Imports Microsoft.VisualBasic
Imports System.IO
Imports System.Web.Script.Serialization

Public Class clsHelpDbTable
    Inherits ClsDataLogic_New

#Region " getTemplateMst "
    Public Function getTemplateMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getTemplateMst = getTemplateMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getTemplateMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        'If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
        '    eStr_Retu = "Invalid Data Retrieval Option"
        '    Exit Function
        'End If

        Try
            getTemplateMst = ObjDtLogic.GetDataset("TemplateMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "Proc_GetNodeWithSubjectCount"
    Public Function Proc_GetNodeWithSubjectCount(ByVal vWorkSpaceId As String, _
        ByVal iParentNodeId As Integer, _
        ByRef sql_DataSet As Data.DataSet, _
        ByRef estr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            qstr = "Proc_GetNodeWithSubjectCount '" + vWorkSpaceId.ToString() + "','" + iParentNodeId.ToString() + "'"
            sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qstr)
            Return True
        Catch ex As Exception
            estr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "GetView_ProjectDetails"
    Public Function GetView_ProjectDetails(ByVal wstr As String, _
                                           ByRef sql_DataSet As Data.DataSet, _
                                           ByRef estr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""
        Try
            If wstr = "" Then
                qstr = "select * from View_ProjectDetails"
            Else
                qstr = "select * from View_ProjectDetails " & _
                "Where " + wstr
            End If
            sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qstr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region "Proc_TemplateTreeView"
    Public Function Proc_TemplateTreeView(ByVal vTemplateId As String, _
                                           ByRef Sql_DataSet As Data.DataSet, _
                                           ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            qStr = "Proc_TemplateTreeView '" + vTemplateId + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region "GetActivityCodeDetails"
    Public Function GetActivityCodeDetails(ByRef Sql_DataSet As Data.DataSet, _
                                            ByVal Wstr As String, _
                                           ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If Wstr = "" Then
                qStr = "select * from View_activitymst"
            Else
                qStr = "select * from View_activitymst where " + Wstr
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region "GetActivityStageDetailByActivityId"
    Public Function GetActivityStageDetailByActivityId(ByVal vActivityId As String, _
                                            ByRef Sql_DataSet As Data.DataSet, _
                                           ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            qStr = "select * from View_ActivityStageDetails where vActivityId = '" + vActivityId + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region "getProjectStartingInNext7Days"
    Public Function getProjectStartingInNext7Days(ByVal WhereCondition_1 As String, _
                          ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                          ByRef Sql_DataSet As Data.DataSet, _
                          ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getProjectStartingInNext7Days = getProjectStartingInNext7Days(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getProjectStartingInNext7Days(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getProjectStartingInNext7Days = ObjDtLogic.GetDataset("View_getProjectStartingInNext7Days", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetPanelDisplayDetailByUserType"
    Public Function GetPanelDisplayDetailByUserType(ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        'ByVal vUserTypeCode As String, _
        Dim vUserTypeCode As String = ""
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            qStr = "select * from panelDisplay where vUserTypeCode = '" + vUserTypeCode + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception

            Return False
        End Try
    End Function
#End Region

#Region "GetStageDetailsByDeptId"
    Public Function GetStageDetailsByDeptId(ByVal deptId As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            qStr = "select * from deptstagemstrix where vdeptId = '" + deptId + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region "GetUserDetailsByUserGroup"
    Public Function GetUserDetailsByUserGroup(ByVal iUserGroupCode As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            qStr = "select * from usermst where iUserGroupCode = " + iUserGroupCode
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region "GetTemplateTypeMst"
    'Public Function GetTemplateTypeMst(ByRef Sql_DataSet As Data.DataSet, _
    '                                    ByRef eStr_Retu As String) As Boolean
    '    Dim ObjDtLogic As ClsDataLogic_New = Nothing
    '    Dim Tbl_1 As Data.DataTable = Nothing

    '    Try

    '        ObjDtLogic = New ClsDataLogic_New
    '        GetTemplateTypeMst = GetTemplateTypeMst(Sql_DataSet, ObjDtLogic, eStr_Retu)

    '        Sql_DataSet = New Data.DataSet
    '        Sql_DataSet.Tables.Add(Tbl_1)

    '    Catch ex As Exception
    '        eStr_Retu = ex.Message
    '    End Try
    'End Function
    'Friend Function GetTemplateTypeMst(ByRef Sql_DataSet As Data.DataSet, _
    '                                   ByRef eStr_Retu As String) As Boolean
    'Public Function GetTemplateTypeMst(ByRef Sql_DataSet As Data.DataSet, _
    '                                    ByRef eStr_Retu As String) As Boolean
    '    Dim qStr As String = ""
    '    Dim ObjDtLogic As New ClsDataLogic_New
    '    Try
    '        qStr = "select * from TemplateTypeMst"
    '        Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
    '        Return True
    '    Catch ex As Exception
    '        Return False
    '    End Try


    'End Function

#End Region

#Region " getTemplateNodeDetail "
    Public Function getTemplateNodeDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getTemplateNodeDetail = getTemplateNodeDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getTemplateNodeDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getTemplateNodeDetail = ObjDtLogic.GetDataset("TemplateNodeDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetNoteAttributeMaxTranNoOnAttrId"
    Public Function GetNoteAttributeMaxTranNoOnAttrId(ByVal Dt_NodeAttributeMaxTranNo As DataTable, _
                                            ByRef iTranNo As Integer, _
                                           ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""
        Dim Sql_DataSet As DataSet
        Try
            '   vworkspaceid = WorkspaceNodeAttrHistoryObj.NodeId

            qStr = "select * from View_NoteAttribute_MaxTranNo where vWorkspaceId = '" + Dt_NodeAttributeMaxTranNo.Rows(0).Item("vWorkspaceId").ToString() + "' and iNodeId = " + Dt_NodeAttributeMaxTranNo.Rows(0).Item("iNodeId") + "' and iAttrId = '" + Dt_NodeAttributeMaxTranNo.Rows(0).Item("iAttrId")
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            If Sql_DataSet Is Nothing Then
                iTranNo = 0
            Else
                iTranNo = Sql_DataSet.Tables(0).Rows(0).Item("iMaxTranNo")
            End If

            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region "getWorkspaceNodeAttrHistory"
    Public Function getWorkspaceNodeAttrHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getWorkspaceNodeAttrHistory = getWorkspaceNodeAttrHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getWorkspaceNodeAttrHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        Try
            getWorkspaceNodeAttrHistory = ObjDtLogic.GetDataset("WorkspaceNodeAttrHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region "getActivityMst"
    Public Function getActivityMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getActivityMst = getActivityMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getActivityMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getActivityMst = ObjDtLogic.GetDataset("ActivityMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "getTemplateWorkflowUserDtl"
    Public Function getTemplateWorkflowUserDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getTemplateWorkflowUserDtl = getTemplateWorkflowUserDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getTemplateWorkflowUserDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        Try
            getTemplateWorkflowUserDtl = ObjDtLogic.GetDataset("TemplateWorkflowUserDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region "getWorkspaceSubjectComment"
    Public Function getWorkspaceSubjectComment(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getWorkspaceSubjectComment = getWorkspaceSubjectComment(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getWorkspaceSubjectComment(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getWorkspaceSubjectComment = ObjDtLogic.GetDataset("WorkspaceSubjectComment", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getWorkspaceNodeHistory "
    Public Function getWorkspaceNodeHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getWorkspaceNodeHistory = getWorkspaceNodeHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getWorkspaceNodeHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getWorkspaceNodeHistory = ObjDtLogic.GetDataset("WorkspaceNodeHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

    Public Function GetMyProjectCompletionListForArchive(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        '====Changed on 10-10-2011 by Mrunal Parekh
        Dim whereCondition As String = "vRequestId  + vProjectNo " + " Like '%"
        whereCondition += prefixText + "%'" + IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), "")
        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_Myprojects", " * ",
            whereCondition, ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            'items.Add("'" + dr.Item("vWorkspaceid").ToString + "#" + dr.Item("vWorkspaceDesc").ToString + _
            '    "#" + dr.Item("vProjectNo").ToString + "#" + _
            '    dr.Item("vClientName").ToString + "#" + dr.Item("vRequestId").ToString())

            items.Add("'" + dr.Item("vWorkspaceid").ToString + "#" + dr.Item("vProjectNo").ToString + "#" + dr.Item("vRequestId").ToString())


        Next

        Return items.ToArray()
    End Function ' Added By Vikas(For Archive Module)


    'Added By Naimesh Dave

#Region " getOperationMst "
    Public Function getOperationMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getOperationMst = getOperationMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getOperationMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getOperationMst = ObjDtLogic.GetDataset("OperationMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getUserTypeMst "
    Public Function getUserTypeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getUserTypeMst = getUserTypeMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getUserTypeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getUserTypeMst = ObjDtLogic.GetDataset("UserTypeMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getroleOperationMatrix "
    Public Function getroleOperationMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getroleOperationMatrix = getroleOperationMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getroleOperationMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getroleOperationMatrix = ObjDtLogic.GetDataset("roleOperationMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getworkspacemst "
    Public Function getworkspacemst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getworkspacemst = getworkspacemst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getworkspacemst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getworkspacemst = ObjDtLogic.GetDataset("workspacemst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getdrugmst "
    Public Function getdrugmst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getdrugmst = getdrugmst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getdrugmst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getdrugmst = ObjDtLogic.GetDataset("drugmst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getregionmst "
    Public Function getregionmst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getregionmst = getregionmst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getregionmst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getregionmst = ObjDtLogic.GetDataset("regionmst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getuserMst "
    Public Function getuserMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getuserMst = getuserMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getuserMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getuserMst = ObjDtLogic.GetDataset("userMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getuserGroupMst "
    Public Function getuserGroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getuserGroupMst = getuserGroupMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getuserGroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getuserGroupMst = ObjDtLogic.GetDataset("userGroupMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getresourcemst "
    Public Function getresourcemst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getresourcemst = getresourcemst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getresourcemst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getresourcemst = ObjDtLogic.GetDataset("resourcemst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getprojectTypeMst "
    Public Function getprojectTypeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getprojectTypeMst = getprojectTypeMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getprojectTypeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getprojectTypeMst = ObjDtLogic.GetDataset("projectTypeMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getclientmst "
    Public Function getclientmst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getclientmst = getclientmst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getclientmst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getclientmst = ObjDtLogic.GetDataset("clientmst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "WorkspaceSpecificSubject"

    Public Function getWorkspaceSpecificSubject(ByVal WhereCondition_1 As String, _
                                                ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                                ByRef Sql_DataSet As Data.DataSet, _
                                                ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            getWorkspaceSpecificSubject = getWorkspaceSpecificSubject(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)
        Catch ex As Exception

        End Try


    End Function
    Friend Function getWorkspaceSpecificSubject(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByVal ObjDtLogic As ClsDataLogic_New, _
                              ByRef Sql_DtTbl As Data.DataTable, _
                              ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getWorkspaceSpecificSubject = ObjDtLogic.GetDataset("WorkspaceSpecificSubjectMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region " getClientContactMatrix "
    Public Function getClientContactMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getClientContactMatrix = getClientContactMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getClientContactMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getClientContactMatrix = ObjDtLogic.GetDataset("ClientContactMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " Get workspaceprotocol Info "
    Public Function getPortocolInfo(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean

        Dim Tbl_1 As Data.DataTable = Nothing
        Dim Tbl_2 As Data.DataTable = Nothing
        Dim Tbl_3 As Data.DataTable = Nothing

        Try
            If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
                eStr_Retu = "Invalid Data Retrieval Option"
                Exit Function
            End If
            Sql_DataSet = New Data.DataSet

            getPortocolInfo = GetDataset("workspacemst", "", WhereCondition_1, DataRetrieval_1, Tbl_1)
            Sql_DataSet.Tables.Add(Tbl_1)

            getPortocolInfo = GetDataset("workspaceprotocoldetail", "", WhereCondition_1, DataRetrieval_1, Tbl_2)
            Sql_DataSet.Tables.Add(Tbl_2)

            getPortocolInfo = GetDataset("workspaceprotocoldetailmatrix", "", WhereCondition_1, DataRetrieval_1, Tbl_3)
            Sql_DataSet.Tables.Add(Tbl_3)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region " getworkspaceSubjectDocDetails "
    Public Function getWorkspaceSubjectDocDetails(ByVal WhereCondition_1 As String, _
                                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                               ByRef Sql_DataSet As Data.DataSet, _
                                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getWorkspaceSubjectDocDetails = getWorkspaceSubjectDocDetails(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getWorkspaceSubjectDocDetails(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getWorkspaceSubjectDocDetails = ObjDtLogic.GetDataset("WorkspaceSubjectDocDetails", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getworkspaceSubjectMaster "
    Public Function getWorkspaceSubjectMaster(ByVal WhereCondition_1 As String, _
                                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                               ByRef Sql_DataSet As Data.DataSet, _
                                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getWorkspaceSubjectMaster = getWorkspaceSubjectMaster(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getWorkspaceSubjectMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getWorkspaceSubjectMaster = ObjDtLogic.GetDataset("WorkspaceSubjectMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetDocSubjectDetails"
    Public Function GetDocSubjectDetails(ByVal WorkSpaceId As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Dt_ProDetail As New DataTable
        Dim Dt_SubDetail As New DataTable
        Dim Dt_DocDetail As New DataTable
        Dim qStr As String = ""

        Try
            qStr = "select Distinct vProjectNo, iNoOfSubjects " & _
                    "from View_getWorkspaceDetailForHdr " & _
                    "where vWorkSpaceId = " + "'" + WorkSpaceId + "'"

            If Not ObjDtLogic.GetResultSet(qStr, Dt_ProDetail) Then
                Return False
            End If

            qStr = ""
            qStr = "select * " & _
                    "from workspaceSubjectMst " & _
                    "where vWorkSpaceId = " + "'" + WorkSpaceId + "' and cRejectionFlag='N'"

            If Not ObjDtLogic.GetResultSet(qStr, Dt_SubDetail) Then
                Return False
            End If

            qStr = ""
            qStr = "select Distinct vDocTypeCode, vDocTypeName " & _
                    "from DocTypeMst"

            If Not ObjDtLogic.GetResultSet(qStr, Dt_DocDetail) Then
                Return False
            End If

            Dt_ProDetail.TableName = "ProDetail"
            Sql_DataSet.Tables.Add(Dt_ProDetail)

            Dt_SubDetail.TableName = "SubDetail"
            Sql_DataSet.Tables.Add(Dt_SubDetail)

            Dt_DocDetail.TableName = "DocTypeMst"
            Sql_DataSet.Tables.Add(Dt_DocDetail)

            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region "GetProjectActivityCurrAttr"
    Public Function GetProjectActivityCurrAttr(ByVal WorkSpaceId As String, _
                                       ByRef Sql_DataSet As Data.DataSet, _
                                       ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If WorkSpaceId = "" Then
                qStr = "select * from View_ProjectActivityCurrAttr "
            Else
                qStr = "select * " & _
                        "from View_ProjectActivityCurrAttr " & _
                        "where vWorkSpaceId = " + "'" + WorkSpaceId + "'"
            End If
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try

    End Function
#End Region

#Region "GetView_SubjectDocDetails"
    Public Function GetView_SubjectDocDetails(ByVal Wstr As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If Wstr = "" Then
                qStr = "Select * from View_SubjectDocDetails"
            Else
                qStr = "Select * from View_SubjectDocDetails " & _
                                    "where " + Wstr
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region "FillDropDown"
    ''' <summary>
    ''' Use this function to Fill Drop Down Values
    ''' </summary>
    ''' <param name="TableName">Database Table Name</param>
    ''' <param name="DataValeField">Data Value Field Name</param>
    ''' <param name="DataTextField">Date Text Field Name</param>
    ''' <param name="WhereCondition">Where condition can be blank</param>
    ''' <param name="Sql_DataSet"></param>
    ''' <param name="eStr_Retu"></param>
    ''' <returns>Returns DataSet</returns>
    ''' <remarks></remarks>
    Public Function FillDropDown(ByVal TableName As String, _
                                           ByVal DataValeField As String, _
                                           ByVal DataTextField As String, _
                                           ByVal WhereCondition As String, _
                                           ByRef Sql_DataSet As Data.DataSet, _
                                           ByRef eStr_Retu As String) As Boolean
        Dim qStr As String = ""
        If String.IsNullOrEmpty(WhereCondition) Then
            qStr = "Select  " & DataTextField & "," & DataValeField & " from " & TableName & " Order by " & DataTextField
        Else
            qStr = "Select  " & DataTextField & "," & DataValeField & " from " & TableName & " where " & WhereCondition & " Order by " & DataTextField
        End If

        Sql_DataSet = ExecuteQuery_DataSet(qStr)
        Return True

    End Function
#End Region

#Region " getLocationMst "
    Public Function getLocationMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getLocationMst = getLocationMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getLocationMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getLocationMst = ObjDtLogic.GetDataset("locationmst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " GetStageMst "
    Public Function GetStageMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetStageMst = GetStageMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetStageMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetStageMst = ObjDtLogic.GetDataset("StageMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region



#Region " GetDoctypeMst "
    Public Function GetDoctypeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetDoctypeMst = GetDoctypeMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetDoctypeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetDoctypeMst = ObjDtLogic.GetDataset("view_doctemplateMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " GetDeptStageMatrix "
    Public Function GetDeptStageMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetDeptStageMatrix = GetDeptStageMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetDeptStageMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetDeptStageMatrix = ObjDtLogic.GetDataset("DeptStageMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region "GetNodeidwiseStage"
    Public Function GetNodeidwiseStage(ByVal NodeId As String, _
                                        ByVal TemplateId As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If NodeId.ToUpper = "" Then
                qStr = "select Distinct istageid, vStageDesc from View_GetTemplateDeptStages "
            Else
                qStr = "select Distinct istageid, vStageDesc from View_GetTemplateDeptStages " & _
                        "where iNodeId in (" & NodeId & ") and vTEmplateid='" & TemplateId & "'"

            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region "GetViewProjectActivityCurrAttr"
    Public Function GetViewProjectActivityCurrAttr(ByVal Wstr As String, _
                                                       ByRef Sql_DataSet As Data.DataSet, _
                                                       ByRef eStr_Retu As String) As Boolean

        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If Wstr = "" Then
                qStr = "select * from View_ProjectActivityCurrAttr "
            Else
                qStr = "select * from View_ProjectActivityCurrAttr " & _
                        "where " & Wstr
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region "GetDataForCommentGrid"
    Public Function GetDataForCommentGrid(ByVal Wstr As String, _
                                                    ByRef Sql_DataSet As Data.DataSet, _
                                                       ByRef eStr_Retu As String) As Boolean

        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If Wstr = "" Then
                qStr = "select Workspacenodehistory.*,UserMst.vUserName from Workspacenodehistory inner Join UserMst on Workspacenodehistory.iModifyBy=UserMst.iUserId "
            Else
                qStr = "select Workspacenodehistory.*,UserMst.vUserName from Workspacenodehistory inner Join UserMst on Workspacenodehistory.iModifyBy=UserMst.iUserId " & _
                        "where " & Wstr
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region "GetFieldsOfTable"
    ''' <summary>
    ''' Get Periculare Columns of Table with/without Where 
    ''' </summary>
    ''' <param name="TableName">TableName</param>
    ''' <param name="Columns">Columns to get</param>
    ''' <param name="WhereCondition">Where Condition</param>
    ''' <param name="Sql_DataSet">Return Dataset</param>
    ''' <param name="eStr_Retu">Error Msg</param>
    ''' <returns>DataSet</returns>
    ''' <remarks></remarks>
    Public Function GetFieldsOfTable(ByVal TableName As String, _
                                          ByVal Columns As String, _
                                          ByVal WhereCondition As String, _
                                          ByRef Sql_DataSet As Data.DataSet, _
                                          ByRef eStr_Retu As String) As Boolean
        Dim qStr As String = ""
        If String.IsNullOrEmpty(WhereCondition) Then
            qStr = "Select " & Columns & " from " & TableName
        Else
            qStr = "Select " & Columns & " from " & TableName & " where " & WhereCondition
        End If

        Sql_DataSet = ExecuteQuery_DataSet(qStr)
        Return True

    End Function
#End Region

#Region "GetViewTemplateWorkflowUserDtl"
    Public Function GetViewTemplateWorkflowUserDtl(ByVal Wstr As String, _
                                                       ByRef Sql_DataSet As Data.DataSet, _
                                                       ByRef eStr_Retu As String) As Boolean

        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If Wstr = "" Then
                qStr = "select * from View_TemplateWorkflowUserDtl "
            Else
                qStr = "select * from View_TemplateWorkflowUserDtl " & _
                        "where " & Wstr
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region " GetWorkspaceCommentMst "
    Public Function GetWorkspaceCommentMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetWorkspaceCommentMst = GetWorkspaceCommentMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetWorkspaceCommentMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetWorkspaceCommentMst = ObjDtLogic.GetDataset("WorkspaceCommentMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " GetWorkspaceCommentDetail "
    Public Function GetWorkspaceCommentDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetWorkspaceCommentDetail = GetWorkspaceCommentDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetWorkspaceCommentDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetWorkspaceCommentDetail = ObjDtLogic.GetDataset("WorkspaceCommentDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getWorkSpaceNodeDetail "
    Public Function getWorkSpaceNodeDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getWorkSpaceNodeDetail = getWorkSpaceNodeDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getWorkSpaceNodeDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getWorkSpaceNodeDetail = ObjDtLogic.GetDataset("WorkSpacenodedetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "getworkspaceWorkflowUserDtl"
    Public Function getworkspaceWorkflowUserDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getworkspaceWorkflowUserDtl = getworkspaceWorkflowUserDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getworkspaceWorkflowUserDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        Try
            getworkspaceWorkflowUserDtl = ObjDtLogic.GetDataset("workspaceWorkflowUserDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region "GetViewWorkspaceWorkflowUserDtl"
    Public Function GetViewWorkspaceWorkflowUserDtl(ByVal Wstr As String, _
                                                       ByRef Sql_DataSet As Data.DataSet, _
                                                       ByRef eStr_Retu As String) As Boolean

        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If Wstr = "" Then
                qStr = "select * from View_WorkspaceWorkflowUserDtl "
            Else
                qStr = "select * from View_WorkspaceWorkflowUserDtl " & _
                        "where " & Wstr
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region " GetCheckedoutfiledetail "
    Public Function GetCheckedoutfiledetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetCheckedoutfiledetail = GetCheckedoutfiledetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetCheckedoutfiledetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetCheckedoutfiledetail = ObjDtLogic.GetDataset("Checkedoutfiledetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "Proc_GetWorkspaceCommentDetail"
    Public Function Proc_GetWorkspaceCommentDetail(ByVal vWorkSpaceId As String, _
                                                ByVal iNodeId As String, _
                                                ByVal iToUserId As String, _
                                                ByRef Sql_DataSet As Data.DataSet, _
                                                ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            qStr = "Proc_GetWorkspaceCommentDetail '" + vWorkSpaceId.Trim() + "'," + iNodeId.Trim() + "," + iToUserId.Trim()
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region "GetActivityOperationMatrix"
    Public Function GetActivityOperationMatrix(ByVal WhereCondition_1 As String, _
                             ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                             ByRef Sql_DataSet As Data.DataSet, _
                             ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetActivityOperationMatrix = GetActivityOperationMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetActivityOperationMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetActivityOperationMatrix = ObjDtLogic.GetDataset("ActivityOperationMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getProtocolCriterienMst "
    Public Function getProtocolCriterienMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getProtocolCriterienMst = getProtocolCriterienMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getProtocolCriterienMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getProtocolCriterienMst = ObjDtLogic.GetDataset("ProtocolCriterienMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getProtocolWorkspaceCriterienDtls "
    Public Function getProtocolWorkspaceCriterienDtls(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getProtocolWorkspaceCriterienDtls = getProtocolWorkspaceCriterienDtls(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getProtocolWorkspaceCriterienDtls(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getProtocolWorkspaceCriterienDtls = ObjDtLogic.GetDataset("ProtocolWorkspaceCriterienDtls", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getProtocolWorkSpaceDetails "
    Public Function getProtocolWorkSpaceDetails(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getProtocolWorkSpaceDetails = getProtocolWorkSpaceDetails(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getProtocolWorkSpaceDetails(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getProtocolWorkSpaceDetails = ObjDtLogic.GetDataset("ProtocolWorkSpaceDetails", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " GetDrugRegionMatrix "
    Public Function GetDrugRegionMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetDrugRegionMatrix = GetDrugRegionMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetDrugRegionMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetDrugRegionMatrix = ObjDtLogic.GetDataset("DrugRegionMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region " GetDrugAnalytesMatrix "
    Public Function GetDrugAnalytesMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetDrugAnalytesMatrix = GetDrugAnalytesMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetDrugAnalytesMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetDrugAnalytesMatrix = ObjDtLogic.GetDataset("DrugAnalytesMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region " GetDrugRegionPKMatrix "
    Public Function GetDrugRegionPKMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetDrugRegionPKMatrix = GetDrugRegionPKMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetDrugRegionPKMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetDrugRegionPKMatrix = ObjDtLogic.GetDataset("DrugRegionPKMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region " getDoctemplatemst "
    Public Function getDoctemplatemst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getDoctemplatemst = getDoctemplatemst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getDoctemplatemst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getDoctemplatemst = ObjDtLogic.GetDataset("Doctemplatemst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " CheckUserRoleOperation "
    Public Function CheckUserRoleOperation(ByVal OperationName As String, _
                                                  ByVal UserTypeCode As String, _
                                                  ByRef ValidRoleOperation As String, _
                                                  ByRef Sql_DS As Data.DataSet, _
                                                  ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New

            Sql_DS = ObjDtLogic.ProcedureExecute("Proc_CheckUserRoleOperation", OperationName.Trim() & "##" & UserTypeCode.Trim())

            'NOP : Not in Operation
            'NOPUC : UserCode has not right for Operation
            'YOPUC : UserCode has Right for Operation

            If Sql_DS.Tables(0).Rows.Count > 0 Then
                If Sql_DS.Tables(0).Rows(0).Item("ExistOperation") = "NOP" Or _
                    Sql_DS.Tables(0).Rows(0).Item("ExistOperation") = "YOPUC" Then
                    CheckUserRoleOperation = True
                    ValidRoleOperation = "YES"
                ElseIf Sql_DS.Tables(0).Rows(0).Item("ExistOperation") = "NOPUC" Then
                    ValidRoleOperation = "NO"
                    CheckUserRoleOperation = False
                End If
            Else
                ValidRoleOperation = "NO"
                CheckUserRoleOperation = False
            End If

            'ObjDtLogic.GetDataset("WorkSpaceRegionAttrDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region " GetMedExScreeningDtl "
    Public Function GetMedExScreeningDtl(ByVal WhereCondition_1 As String, _
                                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                               ByRef Sql_DataSet As Data.DataSet, _
                                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMedExScreeningDtl = GetMedExScreeningDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetMedExScreeningDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetMedExScreeningDtl = ObjDtLogic.GetDataset("MedExScreeningDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " GetMedExScreeningHdr "
    Public Function GetMedExScreeningHdr(ByVal WhereCondition_1 As String, _
                                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                               ByRef Sql_DataSet As Data.DataSet, _
                                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMedExScreeningHdr = GetMedExScreeningHdr(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetMedExScreeningHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetMedExScreeningHdr = ObjDtLogic.GetDataset("MedExScreeningHdr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " GetMedExInfoHdr "
    Public Function GetMedExInfoHdr(ByVal WhereCondition_1 As String, _
                                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                               ByRef Sql_DataSet As Data.DataSet, _
                                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMedExInfoHdr = GetMedExInfoHdr(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetMedExInfoHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetMedExInfoHdr = ObjDtLogic.GetDataset("MedExInfoHdr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " GetMedExInfoDtl "
    Public Function GetMedExInfoDtl(ByVal WhereCondition_1 As String, _
                                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                               ByRef Sql_DataSet As Data.DataSet, _
                                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMedExInfoDtl = GetMedExInfoDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetMedExInfoDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetMedExInfoDtl = ObjDtLogic.GetDataset("MedExInfoDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getSubjectLanguageMst "
    Public Function getSubjectLanguageMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getSubjectLanguageMst = getSubjectLanguageMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getSubjectLanguageMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getSubjectLanguageMst = ObjDtLogic.GetDataset("SubjectLanguageMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetWorkspaceSubjectMst"
    Public Function GetWorkspaceSubjectMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetWorkspaceSubjectMst = GetWorkspaceSubjectMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetWorkspaceSubjectMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetWorkspaceSubjectMst = ObjDtLogic.GetDataset("view_WorkspaceSubjectMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

    'Added by Bhargav Thaker Start
#Region "Get CRF Bunch Master"
    Public Function GetCRFBunchMst(ByVal WhereCondition_1 As String,
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum,
                               ByRef Sql_DataSet As Data.DataSet,
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetCRFBunchMst = GetCRFBunchMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetCRFBunchMst(ByVal WhereCondition_1 As String,
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum,
                               ByVal ObjDtLogic As ClsDataLogic_New,
                               ByRef Sql_DtTbl As Data.DataTable,
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetCRFBunchMst = ObjDtLogic.GetDataset("View_GetCRFBunchDetails", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "Get CRF Bunch Sub master"
    Public Function GetCRFBunchSubMst(ByVal WhereCondition_1 As String,
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum,
                               ByRef Sql_DataSet As Data.DataSet,
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetCRFBunchSubMst = GetCRFBunchSubMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetCRFBunchSubMst(ByVal WhereCondition_1 As String,
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum,
                               ByVal ObjDtLogic As ClsDataLogic_New,
                               ByRef Sql_DtTbl As Data.DataTable,
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetCRFBunchSubMst = ObjDtLogic.GetDataset("View_GetCRFBunchSubDetails", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region
    'Added by Bhargav Thaker End

#Region "getActivityGroupMst"
    Public Function getActivityGroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getActivityGroupMst = getActivityGroupMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getActivityGroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getActivityGroupMst = ObjDtLogic.GetDataset("ActivityGroupMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " Proc_ProjectNodeCommandButtonRights "
    Public Function Proc_ProjectNodeCommandButtonRights(ByVal WorkspaceId As String, _
                                        ByVal UserId As String, _
                                        ByVal MileStone As String, _
                                        ByVal Operational As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = WorkspaceId + "##" + UserId + "##" + MileStone + "##" + Operational
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_ProjectNodeCommandButtonRights", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "GetProjectDetailsForHdr"
    Public Function GetProjectDetailsForHdrUsrWise(ByVal vWorkspaceId As String, _
                                                    ByVal iUserId As String, _
                                                    ByRef Sql_DataSet As Data.DataSet, _
                                                    ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            qStr = "select Distinct View_getWorkspaceDetailForHdr.*,WorkspaceWorkflowUserDtl.iUserId, " + _
                        " UserMst.vUserName from View_getWorkspaceDetailForHdr inner join WorkspaceWorkflowUserDtl " + _
                        " on View_getWorkspaceDetailForHdr.vWorkspaceId=WorkspaceWorkflowUserDtl.vWorkspaceId " + _
                        " inner join UserMst on WorkspaceWorkflowUserDtl.iUserId=UserMst.iUserId "
            '" And View_getWorkspaceDetailForHdr.nScopeNo=UserMst.nScopeNo"

            If (vWorkspaceId.Trim() <> "" And iUserId.Trim() = "") Then
                qStr += " where View_getWorkspaceDetailForHdr.vWorkspaceId = '" + vWorkspaceId.Trim() + "'"
            ElseIf (vWorkspaceId.Trim() = "" And iUserId.Trim() <> "") Then
                qStr += " where WorkspaceWorkflowUserDtl.iUserId = " + iUserId.Trim()
            ElseIf (vWorkspaceId.Trim() <> "" And iUserId.Trim() <> "") Then
                qStr += " where WorkspaceWorkflowUserDtl.iUserId = " + iUserId.Trim() + _
                        "and View_getWorkspaceDetailForHdr.vWorkspaceId = '" + vWorkspaceId + "'"
            Else
                qStr = "select * from View_getWorkspaceDetailForHdr"
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)

            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region " getWorkSpaceNodeDetail "
    Public Function GetViewWorkSpaceNodeDetail(ByVal WhereCondition As String, _
                                                     ByRef Sql_DataSet As Data.DataSet, _
                                                     ByRef eStr_Retu As String) As Boolean


        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If WhereCondition = "" Then
                qStr = "Select * from View_WorkSpaceNodeDetail "
            Else
                qStr = "Select * from View_WorkSpaceNodeDetail " & _
                                    " where " + WhereCondition
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region " View_MedExInfoHdrDtl_Edit "
    Public Function View_MedExInfoHdrDtl_Edit(ByVal WhereCondition As String, _
                                                    ByVal Columns As String, _
                                                     ByRef Sql_DataSet As Data.DataSet, _
                                                     ByRef eStr_Retu As String) As Boolean


        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If WhereCondition = "" Then
                qStr = "Select  " & Columns & " from View_MedExInfoHdrDtl_Edit "
            Else
                qStr = "Select  " & Columns & " from View_MedExInfoHdrDtl_Edit " & _
                                    " where " + WhereCondition
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region " GetMedexInfoHdrQC "
    Public Function GetMedexInfoHdrQC(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMedexInfoHdrQC = GetMedexInfoHdrQC(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetMedexInfoHdrQC(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetMedexInfoHdrQC = ObjDtLogic.GetDataset("MedexInfoHdrQC", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " GetViewWorkSpaceSubjectComment "
    Public Function GetViewWorkSpaceSubjectComment(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewWorkSpaceSubjectComment = GetViewWorkSpaceSubjectComment(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewWorkSpaceSubjectComment(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewWorkSpaceSubjectComment = ObjDtLogic.GetDataset("View_WorkSpaceSubjectComment", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " GetViewClientContactMatrix "
    Public Function GetViewClientContactMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewClientContactMatrix = GetViewClientContactMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewClientContactMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewClientContactMatrix = ObjDtLogic.GetDataset("View_ClientContactMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " GetViewMedExWorkSpaceDtl "
    Public Function GetViewMedExWorkSpaceDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewMedExWorkSpaceDtl = GetViewMedExWorkSpaceDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewMedExWorkSpaceDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewMedExWorkSpaceDtl = ObjDtLogic.GetDataset("View_MedExWorkSpaceDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " GetViewUserMst  "
    Public Function GetViewUserMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewUserMst = GetViewUserMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewUserMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewUserMst = ObjDtLogic.GetDataset("View_UserMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetView_UserLoginFailureDetails"
    ' =================== Added By Jeet Patel on 03-Jun-2015 ===================

    Public Function GetView_UserLoginFailureDetails(ByVal WhereCondition_1 As String, _
                                                    ByVal DataRetrival_1 As DataRetrievalModeEnum, _
                                                    ByRef Sql_DataSet As Data.DataSet, _
                                                    ByRef eStr_Retu As String) As Boolean



        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try
            ObjDtLogic = New ClsDataLogic_New

            GetView_UserLoginFailureDetails = GetView_UserLoginFailureDetails(WhereCondition_1, DataRetrival_1, ObjDtLogic, Tbl_1, eStr_Retu)
            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function GetView_UserLoginFailureDetails(ByVal WhereCondition_1 As String, _
                           ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                           ByVal ObjDtLogic As ClsDataLogic_New, _
                           ByRef Sql_DtTbl As Data.DataTable, _
                           ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetView_UserLoginFailureDetails = ObjDtLogic.GetDataset("View_UserLoginFailureDetails", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

    ' ==========================================================================

#End Region

#Region " GetVIEWMedExWorkspaceHdr"
    Public Function GetVIEWMedExWorkspaceHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetVIEWMedExWorkspaceHdr = GetVIEWMedExWorkspaceHdr(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetVIEWMedExWorkspaceHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetVIEWMedExWorkspaceHdr = ObjDtLogic.GetDataset("VIEW_MedExWorkspaceHdr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " GetViewHolidayMst"
    Public Function GetViewHolidayMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewHolidayMst = GetViewHolidayMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewHolidayMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewHolidayMst = ObjDtLogic.GetDataset("View_HolidayMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " GetViewDrugAnalytesMatrix "
    Public Function GetViewDrugAnalytesMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewDrugAnalytesMatrix = GetViewDrugAnalytesMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewDrugAnalytesMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewDrugAnalytesMatrix = ObjDtLogic.GetDataset("View_DrugAnalytesMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " GetViewDrugRegionPKMatrix "
    Public Function GetViewDrugRegionPKMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewDrugRegionPKMatrix = GetViewDrugRegionPKMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewDrugRegionPKMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewDrugRegionPKMatrix = ObjDtLogic.GetDataset("View_DrugRegionPKMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " GetViewDrugRegionAnalytesRpt "
    Public Function GetViewDrugRegionAnalytesRpt(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewDrugRegionAnalytesRpt = GetViewDrugRegionAnalytesRpt(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewDrugRegionAnalytesRpt(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewDrugRegionAnalytesRpt = ObjDtLogic.GetDataset("View_DrugRegionAnalytesRpt", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " GetViewDrugRegionMatrix "
    Public Function GetViewDrugRegionMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewDrugRegionMatrix = GetViewDrugRegionMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewDrugRegionMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewDrugRegionMatrix = ObjDtLogic.GetDataset("View_DrugRegionMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetViewProjectNodeUserRightsDetails"
    Public Function GetViewProjectNodeUserRightsDetails(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewProjectNodeUserRightsDetails = GetViewProjectNodeUserRightsDetails(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewProjectNodeUserRightsDetails(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewProjectNodeUserRightsDetails = ObjDtLogic.GetDataset("View_ProjectNodeUserRightsDetails", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetViewWorkspaceComments"
    Public Function GetViewWorkspaceComments(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewWorkspaceComments = GetViewWorkspaceComments(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewWorkspaceComments(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewWorkspaceComments = ObjDtLogic.GetDataset("View_WorkspaceComments", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetViewResourceMst"
    Public Function GetViewResourceMst(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewResourceMst = GetViewResourceMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewResourceMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewResourceMst = ObjDtLogic.GetDataset("View_ResourceMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetViewRoleOperationMatrix"
    Public Function GetViewRoleOperationMatrix(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewRoleOperationMatrix = GetViewRoleOperationMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewRoleOperationMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewRoleOperationMatrix = ObjDtLogic.GetDataset("View_RoleOperationMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetSubjectHabitDetails"
    Public Function GetSubjectHabitDetails(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSubjectHabitDetails = GetSubjectHabitDetails(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSubjectHabitDetails(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSubjectHabitDetails = ObjDtLogic.GetDataset("SubjectHabitDetails", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetSubjectHabitMst"
    Public Function GetSubjectHabitMst(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSubjectHabitMst = GetSubjectHabitMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSubjectHabitMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSubjectHabitMst = ObjDtLogic.GetDataset("SubjectHabitMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "getViewMedExScreeningHdrDtl"
    Public Function getViewMedExScreeningHdrDtl(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getViewMedExScreeningHdrDtl = getViewMedExScreeningHdrDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getViewMedExScreeningHdrDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getViewMedExScreeningHdrDtl = ObjDtLogic.GetDataset("View_MedExScreeningHdrDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetViewTemplateMst"
    Public Function GetViewTemplateMst(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewTemplateMst = GetViewTemplateMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewTemplateMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewTemplateMst = ObjDtLogic.GetDataset("View_TemplateMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetviewProjectTypeMst"
    Public Function GetviewProjectTypeMst(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetviewProjectTypeMst = GetviewProjectTypeMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetviewProjectTypeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetviewProjectTypeMst = ObjDtLogic.GetDataset("view_ProjectTypeMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetviewActivityGroupMst"
    Public Function GetviewActivityGroupMst(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetviewActivityGroupMst = GetviewActivityGroupMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetviewActivityGroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetviewActivityGroupMst = ObjDtLogic.GetDataset("view_ActivityGroupMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetViewgetWorkspaceDetailForHdr "
    Public Function GetViewgetWorkspaceDetailForHdr(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewgetWorkspaceDetailForHdr = GetViewgetWorkspaceDetailForHdr(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetViewgetWorkspaceDetailForHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewgetWorkspaceDetailForHdr = ObjDtLogic.GetDataset("View_getWorkspaceDetailForHdr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetViewProjectActivityAtrributes "
    Public Function GetViewProjectActivityAtrributes(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewProjectActivityAtrributes = GetViewProjectActivityAtrributes(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewProjectActivityAtrributes(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewProjectActivityAtrributes = ObjDtLogic.GetDataset("View_ProjectActivityAtrributes", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetViewdeptstagematrix "
    Public Function GetViewdeptstagematrix(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewdeptstagematrix = GetViewdeptstagematrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewdeptstagematrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewdeptstagematrix = ObjDtLogic.GetDataset("View_deptstagematrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetViewDelayedActivityProjects "
    Public Function GetViewDelayedActivityProjects(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewDelayedActivityProjects = GetViewDelayedActivityProjects(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewDelayedActivityProjects(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewDelayedActivityProjects = ObjDtLogic.GetDataset("View_DelayedActivityProjects", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " Proc_GetUserbyScopeValue "
    Public Function Proc_GetUserbyScopeValue(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetUserbyScopeValue", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '===============Added on 29-11-2011 by Mrunal=============

#Region "View_WorkspaceDefaultWorkflowUserDtl_New "

    Public Function View_WorkspaceDefaultWorkflowUserDtl_New(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_WorkspaceDefaultWorkflowUserDtl_New = View_WorkspaceDefaultWorkflowUserDtl_New(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_WorkspaceDefaultWorkflowUserDtl_New(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_WorkspaceDefaultWorkflowUserDtl_New = ObjDtLogic.GetDataset("View_WorkspaceDefaultWorkflowUserDtl_New", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region '===============Added on 15-12-2011 by Mrunal=============


#Region "Proc_GetProjectChilds"
    Public Function Proc_GetProjectChilds(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetProjectChilds", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

    '*******For FFR
#Region "GetMTPHdr "
    Public Function GetMTPHdr(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMTPHdr = GetMTPHdr(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetMTPHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetMTPHdr = ObjDtLogic.GetDataset("MTPHdr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetMTPDtl "
    Public Function GetMTPDtl(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMTPDtl = GetMTPDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetMTPDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetMTPDtl = ObjDtLogic.GetDataset("MTPDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetDWRHdr "
    Public Function GetDWRHdr(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetDWRHdr = GetDWRHdr(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetDWRHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetDWRHdr = ObjDtLogic.GetDataset("DWRHdr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetDWRDetail "
    Public Function GetDWRDetail(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetDWRDetail = GetDWRDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetDWRDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetDWRDetail = ObjDtLogic.GetDataset("DWRDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetSTP "
    Public Function GetSTP(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSTP = GetSTP(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSTP(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSTP = ObjDtLogic.GetDataset("STP", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetOtherExpMst "
    Public Function GetOtherExpMst(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetOtherExpMst = GetOtherExpMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetOtherExpMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetOtherExpMst = ObjDtLogic.GetDataset("OtherExpMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetOtherExpDtl "
    Public Function GetOtherExpDtl(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetOtherExpDtl = GetOtherExpDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetOtherExpDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetOtherExpDtl = ObjDtLogic.GetDataset("OtherExpDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetPlaceMst "
    Public Function GetPlaceMst(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetPlaceMst = GetPlaceMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetPlaceMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetPlaceMst = ObjDtLogic.GetDataset("PlaceMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetStateMSt "
    Public Function GetStateMSt(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetStateMSt = GetStateMSt(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetStateMSt(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetStateMSt = ObjDtLogic.GetDataset("StateMSt", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetViewSTPWithScope "
    Public Function GetViewSTPWithScope(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewSTPWithScope = GetViewSTPWithScope(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewSTPWithScope(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewSTPWithScope = ObjDtLogic.GetDataset("View_STPWithScope", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetViewMTPInfo "
    Public Function GetViewMTPInfo(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewMTPInfo = GetViewMTPInfo(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewMTPInfo(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewMTPInfo = ObjDtLogic.GetDataset("View_MTPInfo", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " Get_ProcMTPMonthWise "
    Public Function Get_ProcMTPMonthWise(ByVal dDate As String, _
                                         ByVal UserId As String, _
                                         ByRef Sql_DS As Data.DataSet, _
                                         ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New

            Sql_DS = ObjDtLogic.ProcedureExecute("Proc_MTPMonthWise", dDate.Trim() & "##" & UserId.Trim())

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetViewSTP "
    Public Function GetViewSTP(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewSTP = GetViewSTP(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewSTP(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewSTP = ObjDtLogic.GetDataset("View_STP", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region


#Region "GetViewSTPUserWise"
    Public Function GetViewSTPUserWise(ByVal UserId As String, _
                                       ByRef Sql_DataSet As Data.DataSet, _
                                       ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            qStr = "select Distinct View_STPWithScope.*,WorkspaceWorkflowUserDtl.iUserId, " + _
                        " UserMst.vUserName from View_STPWithScope inner join WorkspaceWorkflowUserDtl " + _
                        " on View_STPWithScope.vWorkspaceId=WorkspaceWorkflowUserDtl.vWorkspaceId " + _
                        " inner join UserMst on WorkspaceWorkflowUserDtl.iUserId=UserMst.iUserId "
            '" And View_STPWithScope.nScopeNo=UserMst.nScopeNo"

            If (UserId.Trim() <> "") Then
                qStr += " where WorkspaceWorkflowUserDtl.iUserId = " + UserId.Trim()
            Else
                qStr = "select * from View_STPWithScope"
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)

            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region "GetReasonMst "
    Public Function GetReasonMst(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetReasonMst = GetReasonMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetReasonMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetReasonMst = ObjDtLogic.GetDataset("ReasonMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "Proc_DWRLeaveHoliPerMonth"
    Public Function Proc_DWRLeaveHoliPerMonth(ByVal iUserId As Integer, _
                                       ByVal vLocationCode As String, _
                                       ByVal dDate As String, _
                                       ByRef ds_retu As Data.DataSet, _
                                       ByRef eStr_retu As String) As Boolean

        Dim ObjDtLogic As ClsDataLogic_New
        Dim qStr As String = ""

        Try
            ObjDtLogic = New ClsDataLogic_New
            qStr = "Proc_DWRLeaveHoliPerMonth " + iUserId.ToString() + ",'" + vLocationCode.ToString() + "','" + dDate + "'"
            ds_retu = ObjDtLogic.ExecuteQuery_DataSet(qStr)

            Return True
        Catch ex As Exception
            eStr_retu = ex.Message
        End Try

    End Function
#End Region

#Region "ISDCRLock"
    Public Function IsDcrLock(ByVal iUserId As Integer, _
                                  ByVal LocationCode As String, _
                                  ByVal Choice_1 As DataObjOpenSaveModeEnum, _
                                  ByVal DCRDate_1 As Date, _
                                  ByRef IsEditing As Boolean, _
                                  ByRef eStr_Retu As String) As Boolean

        Dim qStr As String = ""
        Dim qStr_Holiday As String = ""
        Dim Dcr_MaxReportDate As Date
        Dim ServerDateTime1 As Date
        Dim FindRow_Holiday As Integer
        Dim AddDay1 As Boolean

        Dim dtLogic As New ClsDataLogic_New
        Dim dtHoliday As Data.DataTable = Nothing
        Dim dtDcrDate As Data.DataTable = Nothing
        Dim dtHoliLeave As Data.DataTable = Nothing
        Dim dtPositionAttach As Data.DataTable = Nothing
        Dim ds_DWR As New DataSet
        Try
            ServerDateTime1 = dtLogic.GetServerDateTime

            If DCRDate_1 > ServerDateTime1.Date Then ' as per the sameerbhai request
                eStr_Retu = "You Can't Fill DWR for future date"
                Return True
            End If

            qStr = "select Max(dReportDate) as MaxDate from DWRHdr where iUserId=" + iUserId.ToString.Trim()
            qStr += " And cStatusIndi <> 'D'"
            dtLogic.GetResultSet(qStr, dtDcrDate)

            If dtDcrDate.Rows(0)("MaxDate") Is System.DBNull.Value Then

                If dtDcrDate.Rows(0)("MaxDate").ToString = "" Then
                    Return True
                End If

            End If

            Dcr_MaxReportDate = dtDcrDate.Rows(0)("MaxDate")

            '-- Retrieve Holiday Information
            '
            qStr_Holiday = "Proc_DWRLeaveHoliPerMonth " + _
                           iUserId.ToString() + ",'" + LocationCode + _
                           "','" + DCRDate_1.ToString("dd-MMM-yyyy") + "'"


            dtLogic.GetResultSet(qStr_Holiday, dtHoliday)

            dtHoliday.DefaultView.Sort = "dDate"

            Dcr_MaxReportDate = Dcr_MaxReportDate.AddDays(1)

            Do While Dcr_MaxReportDate < DCRDate_1

                AddDay1 = False

                If Dcr_MaxReportDate.DayOfWeek = DayOfWeek.Sunday Then
                    AddDay1 = True
                End If

                FindRow_Holiday = dtHoliday.DefaultView.Find(Dcr_MaxReportDate.ToString("dd MMM yyyy"))

                If FindRow_Holiday >= 0 Then
                    AddDay1 = AddDay1 Or (dtHoliday.DefaultView(FindRow_Holiday)("dHolidayDate") <> 0) 'Or (dtHoliday.DefaultView(FindRow_Holiday)("CHLeave") <> 0)
                End If

                If AddDay1 Then
                    Dcr_MaxReportDate = Dcr_MaxReportDate.AddDays(1)
                Else
                    Exit Do
                End If

            Loop

            dtHoliday.DefaultView.RowFilter = "dDate='" + DCRDate_1.ToString("dd-MMM-yyyy") + "'"
            dtHoliLeave = dtHoliday.DefaultView.ToTable()

            'B'Coz to give facality to add DWR of Past Date till Parameter DWREdit Days.
            If ServerDateTime1.Date > DCRDate_1 Then
                IsEditing = True
            End If
            '*******************************

            If dtHoliLeave.Rows(0).Item("dReportDate") <> "" Then
                eStr_Retu = "DWR has been Submited for Today. Please select Another Date !!!"
                IsEditing = True
                Return True

            ElseIf Dcr_MaxReportDate <> DCRDate_1 Then
                eStr_Retu = "Please Submit DWR for " + Dcr_MaxReportDate.ToString("dd-MMM-yyyy") + "."
                Return True

            ElseIf dtHoliLeave.Rows(0).Item("dHolidayDate") <> "" Then
                eStr_Retu = "Today is " + dtHoliLeave.Rows(0).Item("vHolidayDescription") + "."
                Return True

            ElseIf DCRDate_1.DayOfWeek = DayOfWeek.Sunday Then
                eStr_Retu = "Today is Sunday"
                Return True

            End If

            ' we have to check mtp for Date

            If Not Me.IsMTPExist(iUserId, DCRDate_1, eStr_Retu) Then
                If eStr_Retu.Trim() <> "" Then
                    eStr_Retu += " " + " Error occured while checking MTP."
                    Return True
                Else
                    eStr_Retu = "Please Enter MTP For The Day"
                    Return True
                End If
            End If


            Return False

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Private Function IsMTPExist(ByVal iUserId As Integer, _
                                ByVal DcrDate_1 As Date, _
                                ByRef eStr_Retu As String) As Boolean

        Dim wStr As String
        Dim cHelp As New clsHelpDbTable
        Dim ds As New Data.DataSet

        Try

            '-- Convert dcr date to next month First Date
            'NextMonthDate = DateSerial(Year(DcrDate_1), Month(DcrDate_1) + 1, 1)

            wStr = "iUserId = " + iUserId.ToString() + " AND " + _
                   " dMTPDate='" + DcrDate_1.ToString("dd-MMM-yyyy") + "'" '+" AND " + _
            '" nYear = " + DcrDate_1.Year.ToString()

            If Not cHelp.GetViewMTPInfo(wStr, DataRetrievalModeEnum.DataTable_WithWhereCondition, ds, eStr_Retu) Then
                Exit Function
            End If

            Return (ds.Tables(0).Rows.Count <> 0)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "GetOtherExpHdr"
    Public Function GetOtherExpHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetOtherExpHdr = GetOtherExpHdr(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetOtherExpHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetOtherExpHdr = ObjDtLogic.GetDataset("OtherExpHdr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetViewUserWiseDWR "
    Public Function GetViewUserWiseDWR(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewUserWiseDWR = GetViewUserWiseDWR(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewUserWiseDWR(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetViewUserWiseDWR = ObjDtLogic.GetDataset("View_UserWiseDWR", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetViewUserWiseExpense "
    Public Function GetViewUserWiseExpense(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewUserWiseExpense = GetViewUserWiseExpense(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewUserWiseExpense(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetViewUserWiseExpense = ObjDtLogic.GetDataset("View_UserWiseExpense", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetParameterList"
    Public Function GetParameterList(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetParameterList = GetParameterList(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetParameterList(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetParameterList = ObjDtLogic.GetDataset("ParameterList", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetParameterDeptMatrix"
    Public Function GetParameterDeptMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetParameterDeptMatrix = GetParameterDeptMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetParameterDeptMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetParameterDeptMatrix = ObjDtLogic.GetDataset("ParameterDeptMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

    '*******End FFR

#Region " getActivityDocLinkMatrix "
    Public Function getActivityDocLinkMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getActivityDocLinkMatrix = getActivityDocLinkMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getActivityDocLinkMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getActivityDocLinkMatrix = ObjDtLogic.GetDataset("View_ActivityDocLinkMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " GetColumnNames "
    Public Function GetColumnNames(ByVal TableName As String, _
                                    ByRef Sql_DS As Data.DataSet, _
                                    ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Dim str_Query As String

            str_Query = " Select SysColumns.Name as [ColumnName],Type_Name(SysColumns.xType) as [DataType] from SysColumns " + _
                       " Where SysColumns.Id= Object_Id(" + "'" + TableName + "'" + ")"

            If Not ObjDtLogic.GetResultSet(str_Query, Sql_DS) Then
                eStr_Retu = "Error while getting Columns of Table: " & TableName
                Return False
            End If

            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region " GetTableNames "
    Public Function GetTableNames(ByVal TableType As String, _
                                    ByRef Sql_DS As Data.DataSet, _
                                    ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Dim str_Query As String

            str_Query = " Select name as TableName from SysObjects where type='U'"
            If TableType <> "" Then
                str_Query += " And name like '%" + TableType + "'"
            End If


            If Not ObjDtLogic.GetResultSet(str_Query, Sql_DS) Then
                eStr_Retu = "Error while getting Tables of Type: " & TableType
                Return False
            End If

            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region " GetProductAttrDtl "
    Public Function GetProductAttrDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetProductAttrDtl = GetProductAttrDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetProductAttrDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetProductAttrDtl = ObjDtLogic.GetDataset("ProductAttrDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetSubjectMasterQC "
    Public Function GetSubjectMasterQC(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSubjectMasterQC = GetSubjectMasterQC(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSubjectMasterQC(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSubjectMasterQC = ObjDtLogic.GetDataset("SubjectMasterQC", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "View_SubjectMasterQC "
    Public Function View_SubjectMasterQC(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SubjectMasterQC = View_SubjectMasterQC(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_SubjectMasterQC(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SubjectMasterQC = ObjDtLogic.GetDataset("View_SubjectMasterQC", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " GetMedexScreeningHdrQC "
    Public Function GetMedexScreeningHdrQC(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMedexScreeningHdrQC = GetMedexScreeningHdrQC(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetMedexScreeningHdrQC(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetMedexScreeningHdrQC = ObjDtLogic.GetDataset("MedexScreeningHdrQC", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "View_MedexScreeningHdrQc "
    Public Function View_MedexScreeningHdrQc(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_MedexScreeningHdrQc = View_MedexScreeningHdrQc(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_MedexScreeningHdrQc(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_MedexScreeningHdrQc = ObjDtLogic.GetDataset("View_MedexScreeningHdrQc", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region "View_LastMedExScreeningHdrDtl "
    Public Function View_LastMedExScreeningHdrDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_LastMedExScreeningHdrDtl = View_LastMedExScreeningHdrDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_LastMedExScreeningHdrDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_LastMedExScreeningHdrDtl = ObjDtLogic.GetDataset("View_LastMedExScreeningHdrDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region "GetTemplateDefaultWorkFlowUserDtl "

    Public Function GetTemplateDefaultWorkFlowUserDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetTemplateDefaultWorkFlowUserDtl = GetTemplateDefaultWorkFlowUserDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetTemplateDefaultWorkFlowUserDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetTemplateDefaultWorkFlowUserDtl = ObjDtLogic.GetDataset("TemplateDefaultWorkFlowUserDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region "View_TemplateDefaultWorkflowUserDtl "

    Public Function View_TemplateDefaultWorkflowUserDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_TemplateDefaultWorkflowUserDtl = View_TemplateDefaultWorkflowUserDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_TemplateDefaultWorkflowUserDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_TemplateDefaultWorkflowUserDtl = ObjDtLogic.GetDataset("View_TemplateDefaultWorkflowUserDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region "View_MyProjects "
    Public Function View_MyProjects(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_MyProjects = View_MyProjects(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_MyProjects(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_MyProjects = ObjDtLogic.GetDataset("View_MyProjects", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region "View_MedexGroupMst "
    Public Function View_MedexGroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_MedexGroupMst = View_MedexGroupMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_MedexGroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_MedexGroupMst = ObjDtLogic.GetDataset("View_MedexGroupMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region "View_ActivityOperationMatrix "
    Public Function View_ActivityOperationMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_ActivityOperationMatrix = View_ActivityOperationMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_ActivityOperationMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_ActivityOperationMatrix = ObjDtLogic.GetDataset("View_ActivityOperationMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region "GetWorkspaceDefaultWorkFlowUserDtl "

    Public Function GetWorkspaceDefaultWorkFlowUserDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetWorkspaceDefaultWorkFlowUserDtl = GetWorkspaceDefaultWorkFlowUserDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetWorkspaceDefaultWorkFlowUserDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetWorkspaceDefaultWorkFlowUserDtl = ObjDtLogic.GetDataset("WorkspaceDefaultWorkFlowUserDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region "View_WorkspaceDefaultWorkflowUserDtl "

    Public Function View_WorkspaceDefaultWorkflowUserDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_WorkspaceDefaultWorkflowUserDtl = View_WorkspaceDefaultWorkflowUserDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_WorkspaceDefaultWorkflowUserDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_WorkspaceDefaultWorkflowUserDtl = ObjDtLogic.GetDataset("View_WorkspaceDefaultWorkflowUserDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region "View_MedexInfoHdrQc "

    Public Function View_MedexInfoHdrQc(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_MedexInfoHdrQc = View_MedexInfoHdrQc(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_MedexInfoHdrQc(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_MedexInfoHdrQc = ObjDtLogic.GetDataset("View_MedexInfoHdrQc", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region "View_MedExInfoHdrDtl "

    Public Function View_MedExInfoHdrDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_MedExInfoHdrDtl = View_MedExInfoHdrDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_MedExInfoHdrDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_MedExInfoHdrDtl = ObjDtLogic.GetDataset("View_MedExInfoHdrDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region "GetProjectgroupMst "

    Public Function GetProjectgroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetProjectgroupMst = GetProjectgroupMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetProjectgroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetProjectgroupMst = ObjDtLogic.GetDataset("ProjectgroupMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region "View_ProjectgroupMst "

    Public Function View_ProjectgroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_ProjectgroupMst = View_ProjectgroupMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_ProjectgroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_ProjectgroupMst = ObjDtLogic.GetDataset("View_ProjectgroupMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region "GetProjectgroupWorkspaceMatrix "

    Public Function GetProjectgroupWorkspaceMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetProjectgroupWorkspaceMatrix = GetProjectgroupWorkspaceMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetProjectgroupWorkspaceMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetProjectgroupWorkspaceMatrix = ObjDtLogic.GetDataset("ProjectgroupWorkspaceMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region "View_ProjectgroupWorkspaceMatrix "

    Public Function View_ProjectgroupWorkspaceMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_ProjectgroupWorkspaceMatrix = View_ProjectgroupWorkspaceMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_ProjectgroupWorkspaceMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_ProjectgroupWorkspaceMatrix = ObjDtLogic.GetDataset("View_ProjectgroupWorkspaceMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region "View_SubjectEnrollment "

    Public Function View_SubjectEnrollment(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SubjectEnrollment = View_SubjectEnrollment(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_SubjectEnrollment(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SubjectEnrollment = ObjDtLogic.GetDataset("View_SubjectEnrollment", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region " GetAgeGroupMst "
    Public Function GetAgeGroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetAgeGroupMst = GetAgeGroupMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetAgeGroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetAgeGroupMst = ObjDtLogic.GetDataset("AgeGroupMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getSampleTypeMst "
    Public Function getSampleTypeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getSampleTypeMst = getSampleTypeMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getSampleTypeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getSampleTypeMst = ObjDtLogic.GetDataset("SampleTypeMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getSampleTypeDetail "
    Public Function getSampleTypeDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getSampleTypeDetail = getSampleTypeDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getSampleTypeDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getSampleTypeDetail = ObjDtLogic.GetDataset("SampleTypeDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "View_SampleTypeDetail "

    Public Function View_SampleTypeDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SampleTypeDetail = View_SampleTypeDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_SampleTypeDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SampleTypeDetail = ObjDtLogic.GetDataset("View_SampleTypeDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region "View_PendingSampleTypeDetail "

    Public Function View_PendingSampleTypeDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_PendingSampleTypeDetail = View_PendingSampleTypeDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_PendingSampleTypeDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_PendingSampleTypeDetail = ObjDtLogic.GetDataset("View_PendingSampleTypeDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region " getCurrencyMst "
    Public Function getCurrencyMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getCurrencyMst = getCurrencyMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getCurrencyMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getCurrencyMst = ObjDtLogic.GetDataset("CurrencyMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getMedExCostMst "
    Public Function getMedExCostMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getMedExCostMst = getMedExCostMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getMedExCostMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getMedExCostMst = ObjDtLogic.GetDataset("MedExCostMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getLabTypeMst "
    Public Function getLabTypeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getLabTypeMst = getLabTypeMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getLabTypeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getLabTypeMst = ObjDtLogic.GetDataset("LabTypeMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getMedExRangeMst "
    Public Function getMedExRangeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getMedExRangeMst = getMedExRangeMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getMedExRangeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getMedExRangeMst = ObjDtLogic.GetDataset("MedExRangeMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getLabMachineMst "
    Public Function getLabMachineMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getLabMachineMst = getLabMachineMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getLabMachineMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getLabMachineMst = ObjDtLogic.GetDataset("LabMachineMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getLabMachineMedexMatrix "
    Public Function getLabMachineMedexMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getLabMachineMedexMatrix = getLabMachineMedexMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getLabMachineMedexMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getLabMachineMedexMatrix = ObjDtLogic.GetDataset("LabMachineMedexMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "View_RptMedexInfo "

    Public Function View_RptMedexInfo(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_RptMedexInfo = View_RptMedexInfo(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_RptMedexInfo(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_RptMedexInfo = ObjDtLogic.GetDataset("View_RptMedexInfo", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region "View_SubjectSampleCostDetail "

    Public Function View_SubjectSampleCostDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SubjectSampleCostDetail = View_SubjectSampleCostDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_SubjectSampleCostDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SubjectSampleCostDetail = ObjDtLogic.GetDataset("View_SubjectSampleCostDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region " GetSubjectRejectionDetail "
    Public Function GetSubjectRejectionDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSubjectRejectionDetail = GetSubjectRejectionDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSubjectRejectionDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSubjectRejectionDetail = ObjDtLogic.GetDataset("SubjectRejectionDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " GetSubjectScreeningRecordDetail "
    Public Function GetSubjectScreeningRecordDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSubjectScreeningRecordDetail = GetSubjectScreeningRecordDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSubjectScreeningRecordDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSubjectScreeningRecordDetail = ObjDtLogic.GetDataset("SubjectScreeningRecordDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "View_SubjectScreeningRecordDetail "

    Public Function View_SubjectScreeningRecordDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SubjectScreeningRecordDetail = View_SubjectScreeningRecordDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_SubjectScreeningRecordDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SubjectScreeningRecordDetail = ObjDtLogic.GetDataset("View_SubjectScreeningRecordDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region "View_SubjectRejectionDetail "

    Public Function View_SubjectRejectionDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SubjectRejectionDetail = View_SubjectRejectionDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_SubjectRejectionDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SubjectRejectionDetail = ObjDtLogic.GetDataset("View_SubjectRejectionDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region "Proc_MedExInfoHdrDtlEdit_Generic"

    Public Function Proc_MedExInfoHdrDtlEdit_Generic(ByVal vWorkSpaceId As String, _
                                           ByVal vActivityId As String, _
                                           ByRef iPeriod As String, _
                                           ByRef Sql_DataSet As Data.DataSet, _
                                           ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            qStr = "Proc_MedExInfoHdrDtlEdit_Generic '" + vWorkSpaceId + "','" + vActivityId + "','" + iPeriod + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr, 180)
            'Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region " GetSpecialityMst "
    Public Function GetSpecialityMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSpecialityMst = GetSpecialityMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSpecialityMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSpecialityMst = ObjDtLogic.GetDataset("SpecialityMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "View_ReasonMst "
    Public Function View_ReasonMst(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_ReasonMst = View_ReasonMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_ReasonMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_ReasonMst = ObjDtLogic.GetDataset("View_ReasonMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "View_SubjectPIFAuditTrail "
    Public Function View_SubjectPIFAuditTrail(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SubjectPIFAuditTrail = View_SubjectPIFAuditTrail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_SubjectPIFAuditTrail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SubjectPIFAuditTrail = ObjDtLogic.GetDataset("View_SubjectPIFAuditTrail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "View_MedExScreeningHdrDtlAuditTrail "
    Public Function View_MedExScreeningHdrDtlAuditTrail(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_MedExScreeningHdrDtlAuditTrail = View_MedExScreeningHdrDtlAuditTrail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_MedExScreeningHdrDtlAuditTrail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_MedExScreeningHdrDtlAuditTrail = ObjDtLogic.GetDataset("View_MedExScreeningHdrDtlAuditTrail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "View_MedExInfoHdrDtlAuditTrail "
    Public Function View_MedExInfoHdrDtlAuditTrail(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_MedExInfoHdrDtlAuditTrail = View_MedExInfoHdrDtlAuditTrail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_MedExInfoHdrDtlAuditTrail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_MedExInfoHdrDtlAuditTrail = ObjDtLogic.GetDataset("View_MedExInfoHdrDtlAuditTrail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetMedExScreeningHdrHistory "
    Public Function GetMedExScreeningHdrHistory(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMedExScreeningHdrHistory = GetMedExScreeningHdrHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetMedExScreeningHdrHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetMedExScreeningHdrHistory = ObjDtLogic.GetDataset("MedExScreeningHdrHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetDosingDetail "
    Public Function GetDosingDetail(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetDosingDetail = GetDosingDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetDosingDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetDosingDetail = ObjDtLogic.GetDataset("DosingDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetRandomizationDetail "
    Public Function GetRandomizationDetail(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetRandomizationDetail = GetRandomizationDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetRandomizationDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetRandomizationDetail = ObjDtLogic.GetDataset("RandomizationDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

    Public Function GetView_RandomizationDetail(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetView_RandomizationDetail = GetView_RandomizationDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetView_RandomizationDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetView_RandomizationDetail = ObjDtLogic.GetDataset("View_RandomizationDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region "View_DosingDetail "
    Public Function View_DosingDetail(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_DosingDetail = View_DosingDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_DosingDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_DosingDetail = ObjDtLogic.GetDataset("View_DosingDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "getWorkspaceProtocolDetail"
    Public Function getWorkspaceProtocolDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getWorkspaceProtocolDetail = getWorkspaceProtocolDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getWorkspaceProtocolDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        Try
            getWorkspaceProtocolDetail = ObjDtLogic.GetDataset("WorkspaceProtocolDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

    '*********************
    'Added By Vishal Astik
    '*********************

#Region "GetSubjectComments"
    Public Function GetSubjectComments(ByVal vWorkspaceSubjectDocDetailId As String, _
                                       ByRef Sql_DataSet As Data.DataSet, _
                                       ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If vWorkspaceSubjectDocDetailId = "" Then
                qStr = "select * from VIEW_SubjectComments "
            Else
                qStr = "select * " & _
                        "from VIEW_SubjectComments " & _
                        "where vWorkspaceSubjectDocDetailId = " + "'" + vWorkspaceSubjectDocDetailId + "'"
            End If
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try

    End Function
#End Region

#Region "GetSlotCalendar"
    Public Function GetSlotCalendar(ByVal LocationCode As String, _
                                       ByVal ResourceCode As String, _
                                       ByVal FirstDate As String, _
                                       ByVal LastDate As String, _
                                        ByVal WorkSpaceId As String, _
                                       ByRef Sql_DataSet As Data.DataSet, _
                                       ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If ResourceCode <> "0" Then
                If (WorkSpaceId <> "") Then
                    qStr = "select * from View_ProjectActivitySlotting slotting " & _
                                    " inner join ResourceMst resource " & _
                                    " ON resource.vResourceCode = slotting.vResourceCode " & _
                                " WHERE  slotting.vResourceCode='" & ResourceCode & "' " & _
                                " AND resource.vLocationCode ='" & LocationCode & "'" & _
                                " AND ((vschedulestartdate) between '" & FirstDate & "' and '" & LastDate & "')" & _
                                "AND slotting.vWorkspaceId = ' " & WorkSpaceId & " '"
                Else
                    qStr = "select * from View_ProjectActivitySlotting slotting " & _
                                    " inner join ResourceMst resource " & _
                                    " ON resource.vResourceCode = slotting.vResourceCode " & _
                                " WHERE  slotting.vResourceCode='" & ResourceCode & "' " & _
                                " AND resource.vLocationCode ='" & LocationCode & "'" & _
                                " AND ((vschedulestartdate) between '" & FirstDate & "' and '" & LastDate & "')"
                End If

            Else
                If (WorkSpaceId <> "") Then
                    qStr = "SELECT * FROM View_ProjectActivityslotting  slotting " & _
                         " Left join ResourceMst resource " & _
                         " ON resource.vResourceCode = slotting.vResourceCode " & _
                     " WHERE ((vschedulestartdate) between '" & FirstDate & "' and '" & LastDate & "')" & _
                     " AND slotting.vWorkspaceId = '" & WorkSpaceId & "'"
                Else
                    qStr = "SELECT * FROM View_ProjectActivityslotting  slotting " & _
                            " Left join ResourceMst resource " & _
                            " ON resource.vResourceCode = slotting.vResourceCode " & _
                        " WHERE ((vschedulestartdate) between '" & FirstDate & "' and '" & LastDate & "')"
                End If




            End If

            'Else
            'qStr = "select * " & _
            '        "from View_ProjectActivityCurrAttr " & _
            '        "where vWorkSpaceId = " + "'" + WorkSpaceId + "'"
            'End If
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try

    End Function
#End Region

#Region "GetProcedure_ReturnValue"
    Public Function GetProcedure_ReturnValue(ByVal ProcedureName As String, _
                                        ByVal workspaceId As String, _
                                        ByVal ID As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            qStr = "EXEC " & ProcedureName & " '" & workspaceId & "','" & ID & "' "

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region " GetTemplateTypeMst "
    Public Function GetTemplateTypeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetTemplateTypeMst = GetTemplateTypeMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetTemplateTypeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetTemplateTypeMst = ObjDtLogic.GetDataset("TemplateTypeMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region "GetPanelDisplayDetailByUserType"

    Public Function GetPanelDisplayDetailByUserType(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetPanelDisplayDetailByUserType = GetPanelDisplayDetailByUserType(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetPanelDisplayDetailByUserType(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetPanelDisplayDetailByUserType = ObjDtLogic.GetDataset("panelDisplay", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region " GetDeptMst "

    Public Function GetDeptMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetDeptMst = GetDeptMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetDeptMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        Try
            GetDeptMst = ObjDtLogic.GetDataset("DeptMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "Get Audit Trail "
    Friend Function getAuditorial(ByVal WhereCondition_1 As String, _
                                      ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                      ByVal ObjDtLogic As ClsDataLogic_New, _
                                      ByRef Sql_DtTbl As Data.DataTable, _
                                      ByRef eStr_Retu As String) As Boolean

        Return True
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            getAuditorial = ObjDtLogic.GetDataset("ONLINE_AUDITINFO", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " GetCRFHdr "

    Public Function GetCRFHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetCRFHdr = GetCRFHdr(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetCRFHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        Try
            GetCRFHdr = ObjDtLogic.GetDataset("CRFHdr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " GetCRFOperationRemarkDtl "

    Public Function GetCRFOperationRemarkDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetCRFOperationRemarkDtl = GetCRFOperationRemarkDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetCRFOperationRemarkDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        Try
            GetCRFOperationRemarkDtl = ObjDtLogic.GetDataset("View_CRFOperationRemarkDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " CRFProtocolCriterienDtl "

    Public Function GetCRFProtocolCriterienDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetCRFProtocolCriterienDtl = GetCRFProtocolCriterienDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetCRFProtocolCriterienDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        Try
            GetCRFProtocolCriterienDtl = ObjDtLogic.GetDataset("View_CRFProtocolCriterienDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " GetCRFSubSelectionDtl "

    Public Function GetCRFSubSelectionDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetCRFSubSelectionDtl = GetCRFSubSelectionDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetCRFSubSelectionDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        Try
            GetCRFSubSelectionDtl = ObjDtLogic.GetDataset("View_CRFSubSelectionDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "GetMedExSubGroupMst"
    Public Function GetMedExSubGroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMedExSubGroupMst = GetMedExSubGroupMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetMedExSubGroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetMedExSubGroupMst = ObjDtLogic.GetDataset("view_medexsubgroupmst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region " WEB SERVICES FOR AUTOCOMPLETE (INLINE COMPLETE) EXTENDER DO NOT CHANGE "


    'THIS IS WEB SERVICE FOR AUTOCOMPLETE EXTENDER FOR PROJECT
    Public Function GetProjectCompletionList(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "vWorkspaceDesc + vRequestId  + vProjectNo + vClientName   " + " Like '%"
        whereCondition += prefixText + "%'" + IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), "")
        ''whereCondition += " AND  (CASE WHEN  cIsTrainingAssign <> 'Y' THEN 1 ELSE   CASE WHEN  vTrainingFinished = 'YES' THEN 1 ELSE 0 END   END ) =1  AND (CASE WHEN  cIsTrainingAssign = 'Y' THEN 1 ELSE  CASE WHEN vTrainingFinished = 'No' THEN 1 END END ) =1 "
        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_getWorkspaceDetailForHdr", " * ", _
            whereCondition, ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vWorkspaceid").ToString + "#" + dr.Item("vWorkspaceDesc").ToString + _
                "#" + dr.Item("vProjectNo").ToString + "#" + _
                dr.Item("vClientName").ToString + "#" + dr.Item("vRequestId").ToString())

        Next


        Return items.ToArray()
    End Function
    Public Function GetParentProjectCompletionList(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "cWorkspaceType = 'P' AND vRequestId + vProjectNo Like '%"
        whereCondition += prefixText + "%'" + IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), "")
        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_Myprojects", " * ",
            whereCondition, ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vWorkspaceid").ToString() + "#" + dr.Item("vProjectNo").ToString() + "#" + dr.Item("vRequestId").ToString())
        Next

        Return items.ToArray()
    End Function

    'THIS IS WEB SERVICE FOR AUTOCOMPLETE EXTENDER FOR PROJECT WITHOUT SPONSER'S INFORMATION
    Public Function GetProjectCompletionListWithOutSponser(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "WorkspceMerge Like '%"
        whereCondition += prefixText + "%'" + IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), "")
        ''whereCondition += " AND  (CASE WHEN  cIsTrainingAssign <> 'Y' THEN 1 ELSE   CASE WHEN  vTrainingFinished = 'YES' THEN 1 ELSE 0 END   END ) =1  AND (CASE WHEN  cIsTrainingAssign = 'Y' THEN 1 ELSE  CASE WHEN vTrainingFinished = 'No' THEN 1 END END ) =1 "
        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_getWorkspaceDetailForHdr", " * ", _
            whereCondition, ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            'items.Add("'" + dr.Item("vWorkspaceid").ToString + "#" + dr.Item("vProjectNo").ToString + "#" + _
            '    dr.Item("vProjectTypeName").ToString + "#" + _
            '    dr.Item("vDrugName").ToString + "#" + dr.Item("vLocationInitiate").ToString + "#" + _
            '    dr.Item("vRequestId").ToString())

            items.Add("'" + dr.Item("vWorkspaceid").ToString + "#" + dr.Item("vProjectNo").ToString + "#" + dr.Item("vRequestId").ToString())

        Next

        Return items.ToArray()
    End Function

    'THIS IS WEB SERVICE FOR AUTOCOMPLETE EXTENDER FOR SUBJECT
    Public Function GetSubjectCompletionList_NotRejected(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "FullName + vSubjectId " + " Like '%" + prefixText + "%'"
        'added on 29-Jul-2009
        whereCondition += " And cRejectionFlag <> 'Y' and cStatusIndi <>'D'"

        If Not IsNothing(contextKey) AndAlso contextKey.Length > 0 Then
            whereCondition += " AND vLocationCode='" & contextKey.Trim() & "'"
        End If

        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_SubjectMaster", " vSubjectID, FullName  ", whereCondition + " Order BY FullName", ds, estr)


        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vSubjectId").ToString + "#" + dr.Item("FullName").ToString)
            If items.Count > count Then
                Exit For
            End If
        Next


        Return items.ToArray()
    End Function

    'THIS IS WEB SERVICE FOR AUTOCOMPLETE EXTENDER FOR SUBJECT
    Public Function GetAllSubjectCompletionList(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False

        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "FullName + vSubjectId " + " Like '%" + prefixText + "%'"
        If Not IsNothing(contextKey) AndAlso contextKey.Length > 0 Then
            whereCondition += " AND vLocationCode='" & contextKey.Trim() & "'"
        End If

        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_SubjectMaster", " vSubjectID, FullName  ", whereCondition + " Order BY FullName", ds, estr)


        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vSubjectId").ToString + "#" + dr.Item("FullName").ToString)
            If items.Count > count Then
                Exit For
            End If
        Next


        Return items.ToArray()
    End Function

    'Created By Naimesh Dave
    Public Function GetSubjectCompletionList_Dynamic(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()
        Dim objHlp As New WS_HelpDbTable
        Dim dsSub As New DataSet()
        Dim dvSub As New DataView
        Dim dtSub As New DataTable
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing

        Dim whereCondition As String = "FullName + vSubjectId " + " Like '%" + prefixText + "%' And cSubjectType <> 'C'"
        '<>'I'
        Dim strArr() As String
        Dim Qstr As String = ""

        If count = 0 Then
            count = 1
        End If

        If Not IsNothing(contextKey) AndAlso contextKey.Length > 0 Then
            strArr = contextKey.Split("#")

            If strArr.Length > 0 Then

                Qstr = "select vSubjectId,FullName from " + strArr(0) + " where " + strArr(1) + " And " + whereCondition + "  Order BY FullName"

            End If

            dsSub = objHlp.GetResultSet(Qstr, "SubjectMaster")
            'dtSub = dvSub.ToTable()
            'If dsSub.Tables(0).Rows.Count > 0 Then
            '    dvSub = dsSub.Tables(0).DefaultView
            '    dvSub.RowFilter = whereCondition
            '    dtSub = dvSub.ToTable()
            '    result = True
            'End If

        End If

        For Each dr In dsSub.Tables(0).Rows
            items.Add("'" + dr.Item("vSubjectId").ToString + "#" + dr.Item("FullName").ToString)
        Next dr

        Return items.ToArray()

    End Function
    '******************

    'Created By Chandresh Vanker on 10-Feb-2010 For getting only assigned subjects

    Public Function GetSubjectCompletionList_Assigned_NotRejected(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "vInitials + vMySubjectNo + vRandomizationNo " + " Like '%" + prefixText + "%'"
        'added on 29-Jul-2009
        'whereCondition += " And cRejectionFlag <> 'Y'" 'Commented on 27-May-2011 to get rejected subjects also

        If Not IsNothing(contextKey) AndAlso contextKey.Length > 0 Then
            whereCondition += " AND " & contextKey.Trim() & ""
        End If

        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_WorkspacesubjectMst", " vInitials, vSubjectId, vMySubjectNo, vRandomizationNo  ", whereCondition + " Order BY vInitials", ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vSubjectId").ToString + "#" + dr.Item("vInitials").ToString + "-" + dr.Item("vMySubjectNo").ToString + "-" + Convert.ToString(dr.Item("vRandomizationNo")).Trim())
            If items.Count > count Then
                Exit For
            End If
        Next

        Return items.ToArray()

    End Function

    '****************************************

    'THIS IS WEB SERVICE FOR AUTOCOMPLETE EXTENDER FOR ACTIVITY
    Public Function GetActivityCompletionList(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing

        Dim objHlp As New WS_HelpDbTable
        'ContaxtKey Passed for Scope Management
        result = objHlp.GetActivityCodeDetails(ds, " vActivityName Like '%" + prefixText + "%' AND cStatusindi <>'D'" & _
                                    IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), ""), estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vActivityId").ToString + "#" + dr.Item("vActivityName").ToString)
        Next

        Return items.ToArray()

    End Function

    'THIS IS WEB SERVICE FOR AUTOCOMPLETE EXTENDER FOR ADRHdr 
    Public Function GetADRCompletionList(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim wStr As String = " vADRId Like '%" + prefixText + "%'" + _
                            " OR vDrugName Like '%" + prefixText + "%'"


        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable(" View_ADRCompList ", " * ", _
                wStr, ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vADRId").ToString + "#" + dr.Item("vDrugName").ToString)
            If index >= count Then
                Exit For
            End If
        Next

        Return items.ToArray()

    End Function

    'THIS IS WEB SERVICE FOR AUTOCOMPLETE EXTENDER FOR LLT
    Public Function GetLLTCompletionList(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim wStr As String = " llt_code Like '%" + prefixText + "%'" + _
                            " OR llt_name Like '%" + prefixText + "%'"



        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable(" View_LLTPTDetails ", " * ", _
                wStr, ds, estr)




        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("llt_code").ToString + "#" + dr.Item("llt_name").ToString + _
                "#" + dr.Item("vMeddraVersion").ToString + "#" + dr.Item("pt_code").ToString + _
                "#" + dr.Item("pt_name").ToString + "#" + dr.Item("pt_soc_code").ToString + _
                "#" + dr.Item("soc_name").ToString)
            If index >= count Then
                Exit For
            End If
        Next

        Return items.ToArray()

    End Function


    'THIS IS WEB SERVICE FOR AUTOCOMPLETE EXTENDER FOR Drug 'Added By Naimesh Dave
    Public Function GetDrugCompletionList(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing

        Dim objHlp As New WS_HelpDbTable

        result = objHlp.getdrugmst(" vDrugName Like '%" + prefixText + "%'", DataRetrievalModeEnum.DataTable_WithWhereCondition, ds, estr)


        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vDrugCode").ToString + "#" + dr.Item("vDrugName").ToString)
        Next

        Return items.ToArray()

    End Function


    Public Function GetMedexList(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing

        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetMedExMst(" cStatusIndi<>'D' And vMedExDesc + vMedExGroupDesc Like '%" + prefixText + "%'" & _
                                    IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), ""), DataRetrievalModeEnum.DataTable_WithWhereCondition, ds, estr)


        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add(dr.Item("vMedExCode").ToString + "#" + dr.Item("vMedExDesc").ToString + " (" + dr.Item("vMedExGroupDesc").ToString + ")")
        Next

        Return items.ToArray()

    End Function

    'THIS IS WEB SERVICE FOR AUTOCOMPLETE EXTENDER FOR PROJECT which are under User's Rights
    Public Function GetMyProjectCompletionList(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        '====Changed on 10-10-2011 by Mrunal Parekh
        Dim whereCondition As String = "vRequestId  + vProjectNo " + " Like '%"
        whereCondition += prefixText + "%'" + IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), "")
        ''whereCondition += " AND  (CASE WHEN  cIsTrainingAssign <> 'Y' THEN 1 ELSE   CASE WHEN  vTrainingFinished = 'YES' THEN 1 ELSE 0 END   END ) =1  AND (CASE WHEN  cIsTrainingAssign = 'Y' THEN 1 ELSE  CASE WHEN vTrainingFinished = 'No' THEN 1 END END ) =1 "



        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_Myprojects", " * ", _
            whereCondition, ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            'items.Add("'" + dr.Item("vWorkspaceid").ToString + "#" + dr.Item("vWorkspaceDesc").ToString + _
            '    "#" + dr.Item("vProjectNo").ToString + "#" + _
            '    dr.Item("vClientName").ToString + "#" + dr.Item("vRequestId").ToString())

            'items.Add("'" + dr.Item("vWorkspaceid").ToString + "#" + dr.Item("vProjectNo").ToString + "#" + dr.Item("vRequestId").ToString() + "#" + dr.Item("ParentWorkspaceId").ToString.Trim())
            items.Add("'" + dr.Item("vWorkspaceid").ToString + "#" + dr.Item("vProjectNo").ToString + "#" + dr.Item("vRequestId").ToString())


        Next

        Return items.ToArray()
    End Function

    'Public Function GetMyProjectCompletionList(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

    '    Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

    '    If count = 0 Then
    '        count = 10
    '    End If

    '    Dim ds As New DataSet()
    '    Dim estr As String = ""
    '    Dim result As Boolean = False
    '    Dim dr As DataRow = Nothing
    '    Dim whereCondition As String = "vWorkspaceDesc + vRequestId  + vProjectNo + vClientName   " + " Like '%"
    '    whereCondition += prefixText + "%'" + IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), "")
    '    Dim objHlp As New WS_HelpDbTable

    '    result = objHlp.GetFieldsOfTable("View_Myprojects", " * ", _
    '        whereCondition, ds, estr)

    '    For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '        dr = ds.Tables(0).Rows(index)
    '        items.Add("'" + dr.Item("vWorkspaceid").ToString + "#" + dr.Item("vWorkspaceDesc").ToString + _
    '            "#" + dr.Item("vProjectNo").ToString + "#" + _
    '            dr.Item("vClientName").ToString + "#" + dr.Item("vRequestId").ToString())



    '    Next

    '    Return items.ToArray()
    'End Function

    Public Function GetOldProjectsList(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "ProjectNumber + ProductName + SponsorName  " + " Like '%"
        whereCondition += prefixText + "%'" + IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), "")
        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("OldProjects", " * ", _
            whereCondition, ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add(dr.Item("nSerialNo").ToString + "#" + dr.Item("ProjectNumber").ToString + "#" + dr.Item("ProductName").ToString + _
                "#" + dr.Item("SponsorName").ToString() + "#" + dr.Item("ProjectStatus").ToString())

        Next

        Return items.ToArray()

    End Function

    Public Function GetMyProjectCompletionListForProjectTrack(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "vRequestId  + vProjectNo + vClientName + vDrugName   " + " Like '%"
        whereCondition += prefixText + "%'" + IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), "")
        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_getWorkspaceDetailForHdr", " * ", _
            whereCondition, ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vWorkspaceid").ToString + "#" + dr.Item("vRequestId").ToString + _
                "#" + dr.Item("vProjectNo").ToString + "#" + _
                dr.Item("vClientName").ToString + "#" + dr.Item("vDrugName").ToString())

        Next

        Return items.ToArray()
    End Function

    Public Function GetMyProjectCompletionListForDashboard(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "vProjectNo + vClientName + vDrugName   " + " Like '%"
        whereCondition += prefixText + "%'" + IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), "")
        ''whereCondition += " AND  (CASE WHEN  cIsTrainingAssign <> 'Y' THEN 1 ELSE   CASE WHEN  vTrainingFinished = 'YES' THEN 1 ELSE 0 END   END ) =1  AND (CASE WHEN  cIsTrainingAssign = 'Y' THEN 1 ELSE  CASE WHEN vTrainingFinished = 'No' THEN 1 END END ) =1 "
        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_getWorkspaceDetailForHdr", " * ", _
            whereCondition, ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vWorkspaceid").ToString + "#" + dr.Item("vProjectNo").ToString + _
                "#" + dr.Item("vClientName").ToString + "#" + _
                dr.Item("vDrugName").ToString())

        Next

        Return items.ToArray()
    End Function

    Public Function GetClientRequestProjectCompletionListForDashboard(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "vRequestId + vClientName + vDrugName   " + " Like '%"
        whereCondition += prefixText + "%'" + IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), "")
        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_getWorkspaceDetailForHdr", " * ", _
            whereCondition, ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vWorkspaceid").ToString + "#" + dr.Item("vRequestId").ToString + _
                "#" + dr.Item("vClientName").ToString + "#" + _
                dr.Item("vDrugName").ToString())

        Next

        Return items.ToArray()
    End Function

    ' Added by Pratiksha Date: 25-Feb-2011
    'THIS IS WEB SERVICE FOR AUTOCOMPLETE EXTENDER FOR SUBJECT of inhouse
    'Public Function GetSubjectCompletionList_NotRejected_InHouse(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

    '    Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

    '    If count = 0 Then
    '        count = 10
    '    End If

    '    Dim ds As New DataSet()
    '    Dim estr As String = ""
    '    Dim result As Boolean = False
    '    Dim dr As DataRow = Nothing
    '    Dim whereCondition As String = "FullName + vSubjectId " + " Like '%" + prefixText + "%' And cSubjectType = 'I'"
    '    'added on 29-Jul-2009
    '    whereCondition += " And cRejectionFlag <> 'Y' and cStatusIndi <>'D'"

    '    If Not IsNothing(contextKey) AndAlso contextKey.Length > 0 Then
    '        whereCondition += " AND " & contextKey.Trim()
    '    End If

    '    Dim objHlp As New WS_HelpDbTable

    '    result = objHlp.GetFieldsOfTable("View_subjectMaster", " vSubjectID, FullName  ", whereCondition + " Order BY FullName", ds, estr)


    '    For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
    '        dr = ds.Tables(0).Rows(index)
    '        items.Add("'" + dr.Item("vSubjectId").ToString + "#" + dr.Item("FullName").ToString)
    '        If items.Count > count Then
    '            Exit For
    '        End If
    '    Next
    '    Return items.ToArray()
    'End Function

    ' Added by Pratiksha Date: 25-Feb-2011
    'THIS IS WEB SERVICE FOR AUTOCOMPLETE EXTENDER FOR SUBJECT of inhouse
    Public Function GetSubjectCompletionList_NotRejected_InHouse(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()
        Dim objHlp As New WS_HelpDbTable
        Dim dsSub As New DataSet()
        Dim dvSub As New DataView
        Dim dtSub As New DataTable
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing

        Dim whereCondition As String = "FullName + vSubjectId " + " Like '%" + prefixText + "%' And cSubjectType <> 'C' "
        '= 'I'"
        Dim strArr() As String
        Dim Qstr As String = ""

        whereCondition += " And cRejectionFlag <> 'Y' and cStatusIndi <>'D'"

        If count = 0 Then
            count = 10
        End If

        If Not IsNothing(contextKey) AndAlso contextKey.Length > 0 Then
            strArr = contextKey.Split("#")

            If strArr.Length > 0 Then

                Qstr = "select vSubjectId,FullName from " + strArr(0) + " where " + strArr(1) + " And " + whereCondition + "  Order BY FullName"

            End If

            dsSub = objHlp.GetResultSet(Qstr, "SubjectMaster")
            'dtSub = dvSub.ToTable()
            'If dsSub.Tables(0).Rows.Count > 0 Then
            '    dvSub = dsSub.Tables(0).DefaultView
            '    dvSub.RowFilter = whereCondition
            '    dtSub = dvSub.ToTable()
            '    result = True
            'End If

        End If

        For Each dr In dsSub.Tables(0).Rows
            items.Add("'" + dr.Item("vSubjectId").ToString + "#" + dr.Item("FullName").ToString)
        Next dr

        Return items.ToArray()

    End Function

    'THIS IS WEB SERVICE FOR AUTOCOMPLETE EXTENDER FOR ATTRIBUTE Group  
    Public Function GetAttributeGroup(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "vMedExGroupDesc " + " Like '%" + prefixText + "%' And cStatusIndi <> 'D' And cActiveFlag = 'Y'"

        If Not IsNothing(contextKey) AndAlso contextKey.Length > 0 Then
            whereCondition += " AND " & contextKey.Trim()
        End If

        Dim objHlp As New WS_HelpDbTable

        'result = objHlp.GetFieldsOfTable("MedExGroupMst", " vMedExGroupCode+'#'+vMedExGroupDesc  ", whereCondition + " Order BY vMedExGroupDesc", ds, estr)
        result = objHlp.GetFieldsOfTable("MedExGroupMst", " vMedExGroupCode,vMedExGroupDesc  ", whereCondition + " Order BY vMedExGroupDesc", ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vMedExGroupCode").ToString + "#" + dr.Item("vMedExGroupDesc").ToString)
            If items.Count > count Then
                Exit For
            End If
        Next
        Return items.ToArray()
    End Function

    'THIS IS WEB SERVICE FOR AUTOCOMPLETE EXTENDER FOR ATTRIBUTE Sub Group  
    Public Function GetAttributeSubGroup(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "vMedExSubGroupDesc " + " Like '%" + prefixText + "%' And cStatusIndi <> 'D' And cActiveFlag = 'Y'"

        If Not IsNothing(contextKey) AndAlso contextKey.Length > 0 Then
            whereCondition += " AND " & contextKey.Trim()
        End If

        Dim objHlp As New WS_HelpDbTable

        'result = objHlp.GetFieldsOfTable("MedExSubGroupMst", " vMedExSubGroupCode+'#'+vMedExSubGroupDesc  ", whereCondition + " Order BY vMedExSubGroupDesc", ds, estr)
        result = objHlp.GetFieldsOfTable("View_MedExSubGroupMst", " vMedExSubGroupCode,vMedExSubGroupDesc  ", whereCondition + " Order BY vMedExSubGroupDesc", ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vMedExSubGroupCode").ToString + "#" + dr.Item("vMedExSubGroupDesc").ToString)
            If items.Count > count Then
                Exit For
            End If
        Next
        Return items.ToArray()
    End Function

    Public Function GetAllProjectList(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "vWorkspaceDesc + vRequestId  + vProjectNo + vClientName   " + " Like '%"
        whereCondition += prefixText + "%'" + IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), "")
        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_getWorkspaceDetailForHdr", " * ", _
            whereCondition, ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vWorkspaceid").ToString + "#" + dr.Item("vWorkspaceDesc").ToString + _
                "#" + dr.Item("vProjectNo").ToString + "#" + _
                dr.Item("vClientName").ToString + "#" + dr.Item("vRequestId").ToString())
        Next

        Return items.ToArray()

    End Function

    Public Function GetCDMSSubjectCompletionList(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()


        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "FullName + vSubjectId + vContactNo1 " + " Like '%" + prefixText.Replace("'", "''") + "%'"
        'added on 29-Jul-2009
        whereCondition += " And cStatusIndi <>'D'"

        If Not IsNothing(contextKey) AndAlso contextKey.Length > 0 Then
            whereCondition += " AND vLocationCode='" & contextKey.Trim() & "'"
        End If

        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_SubjectCDMSMaster", " vSubjectID, FullName, vContactNo1 ", whereCondition + " Order BY FullName", ds, estr)


        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vSubjectId").ToString + "#" + dr.Item("FullName").ToString + "#" + dr.Item("vContactNo1").ToString)
            If items.Count > count Then
                Exit For
            End If
        Next


        Return items.ToArray()
    End Function

    Public Function GetCDMSSubjectCompletionListActive(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()


        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "FullName + vSubjectId " + " Like '%" + prefixText.Replace("'", "''") + "%'"
        'added on 29-Jul-2009
        whereCondition += " And cStatusIndi <> 'D'"
        whereCondition += " And (cStatus = 'AC' Or cStatus = 'HO' and getdate() > dEndDate)"

        If Not IsNothing(contextKey) AndAlso contextKey.Length > 0 Then
            whereCondition += " AND vLocationCode='" & contextKey.Trim() & "'"
        End If

        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_SubjectCDMSMaster", " vSubjectID, FullName  ", whereCondition + " Order BY FullName", ds, estr)


        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vSubjectId").ToString + "#" + dr.Item("FullName").ToString)
            If items.Count > count Then
                Exit For
            End If
        Next


        Return items.ToArray()
    End Function

    Public Function GetProjectCompletionListForDMS(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "vWorkspaceDesc + vRequestId  + vProjectNo + vClientName   " + " Like '%"
        whereCondition += prefixText
        If Not contextKey Is Nothing Then
            whereCondition += "%'" + IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), "")
        End If
        ''whereCondition += " AND  (CASE WHEN  cIsTrainingAssign <> 'Y' THEN 1 ELSE   CASE WHEN  vTrainingFinished = 'YES' THEN 1 ELSE 0 END   END ) =1  AND (CASE WHEN  cIsTrainingAssign = 'Y' THEN 1 ELSE  CASE WHEN vTrainingFinished = 'No' THEN 1 END END ) =1 "
        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_getWorkspaceDetailForHdr", " * ", _
            whereCondition, ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vWorkspaceid").ToString + "#" + dr.Item("vProjectNo").ToString + "#" + dr.Item("vRequestId").ToString())
        Next

        Return items.ToArray()
    End Function

    '' added by prayag from GetSubjectCompletionList_NotRejected to add block period.
    Public Function GetSubjectCompletionList_NotRejected_BlockPeriod(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "FullName + vSubjectId " + " Like '%" + prefixText + "%'"
        'added on 29-Jul-2009
        whereCondition += " And cRejectionFlag <> 'Y' and cStatusIndi <>'D'"
        whereCondition += " And CAST(GETDATE() As DATE) not Between Cast(isnull(dBlockfrom,'') As Date) And Cast(isnull(dBlockto,'') As Date)" '' added new
        'Vineet'
        If Not IsNothing(contextKey) AndAlso contextKey.Length > 0 Then
            whereCondition += " AND vLocationCode='" & contextKey.Trim() & "'"
        End If

        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_SubjectMaster", " vSubjectID, FullName  ", whereCondition + " Order BY FullName", ds, estr)


        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vSubjectId").ToString + "#" + dr.Item("FullName").ToString)
            If items.Count > count Then
                Exit For
            End If
        Next


        Return items.ToArray()
    End Function
    '' added by prayag from GetSubjectCompletionList_NotRejected_InHouse
    Public Function GetSubjectCompletionList_NotRejected_InHouse_BlockPeriod(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()
        Dim objHlp As New WS_HelpDbTable
        Dim dsSub As New DataSet()
        Dim dvSub As New DataView
        Dim dtSub As New DataTable
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing

        Dim whereCondition As String = "FullName + vSubjectId " + " Like '%" + prefixText + "%' And cSubjectType <> 'C'"
        '= 'I'"
        Dim strArr() As String
        Dim Qstr As String = ""

        whereCondition += " And cRejectionFlag <> 'Y' and cStatusIndi <>'D'"
        whereCondition += " And CAST(GETDATE() As DATE) not Between Cast(isnull(dBlockfrom,'') As Date) And Cast(isnull(dBlockto,'') As Date)" '' added new

        If count = 0 Then
            count = 10
        End If

        If Not IsNothing(contextKey) AndAlso contextKey.Length > 0 Then
            strArr = contextKey.Split("#")

            If strArr.Length > 0 Then

                Qstr = "select vSubjectId,FullName from " + strArr(0) + " where " + strArr(1) + " And " + whereCondition + "  Order BY FullName"

            End If

            dsSub = objHlp.GetResultSet(Qstr, "SubjectMaster")

        End If

        For Each dr In dsSub.Tables(0).Rows
            items.Add("'" + dr.Item("vSubjectId").ToString + "#" + dr.Item("FullName").ToString)
        Next dr

        Return items.ToArray()

    End Function

    '' added by prayag from GetSubjectCompletionList_NotRejected_OnlyID
    Public Function GetSubjectCompletionList_NotRejected_OnlyID_BlockPeriod(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "vSubjectId " + " Like '%" + prefixText + "%'"
        'added on 29-Jul-2009
        whereCondition += " And cRejectionFlag <> 'Y' and cStatusIndi <>'D'"

        If Not IsNothing(contextKey) AndAlso contextKey.Length > 0 Then
            whereCondition += " AND vLocationCode='" & contextKey.Trim() & "'"
        End If

        whereCondition += " And CAST(GETDATE() As DATE) not Between Cast(isnull(dBlockfrom,'') As Date) And Cast(isnull(dBlockto,'') As Date)" '' added new

        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_SubjectMaster", " vSubjectID, vInitials ", whereCondition + " Order BY vSubjectId", ds, estr)


        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vSubjectId").ToString + "#" + dr.Item("vInitials").ToString)
            If items.Count > count Then
                Exit For
            End If
        Next


        Return items.ToArray()
    End Function
 
#End Region

    '*******************
    'Added By Mihir Oza
    '*******************


#Region " GetView_SubjectMaster"
    Public Function GetView_SubjectMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetView_SubjectMaster = GetView_SubjectMaster(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetView_SubjectMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetView_SubjectMaster = ObjDtLogic.GetDataset("View_SubjectMaster", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " GetSubjectFemaleDetails"
    Public Function GetSubjectFemaleDetails(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSubjectFemaleDetails = GetSubjectFemaleDetails(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSubjectFemaleDetails(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetSubjectFemaleDetails = ObjDtLogic.GetDataset("SubjectFemaleDetails", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetCRFDrugScanReport"
    Public Function GetCRFDrugScanReport(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetCRFDrugScanReport = GetCRFDrugScanReport(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetCRFDrugScanReport(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetCRFDrugScanReport = ObjDtLogic.GetDataset("View_CRFDrugScanReport", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region



#Region "GetSetProjectMatrix"

    Public Function GetSetProjectMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSetProjectMatrix = GetSetProjectMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSetProjectMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetSetProjectMatrix = ObjDtLogic.GetDataset("SetProjectMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "GetMedExMst"
    Public Function GetMedExMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMedExMst = GetMedExMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetMedExMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetMedExMst = ObjDtLogic.GetDataset("VIEW_MedExMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetMedExGroupMst"
    Public Function GetMedExGroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMedExGroupMst = GetMedExGroupMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetMedExGroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetMedExGroupMst = ObjDtLogic.GetDataset("MedExGroupMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetMedExTemplateDtl"
    Public Function GetMedExTemplateDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMedExTemplateDtl = GetMedExTemplateDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetMedExTemplateDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetMedExTemplateDtl = ObjDtLogic.GetDataset("View_MedExTemplateDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetTemplateCostMst"
    Public Function GetTemplateCostMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetTemplateCostMst = GetTemplateCostMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetTemplateCostMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetTemplateCostMst = ObjDtLogic.GetDataset("TemplateCostMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetMedExWorkSpaceDtl"
    Public Function GetMedExWorkSpaceDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetMedExWorkSpaceDtl = GetMedExWorkSpaceDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
    Friend Function GetMedExWorkSpaceDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetMedExWorkSpaceDtl = ObjDtLogic.GetDataset("MedExWorkspaceDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetMedExWorkSpaceHdr"
    Public Function GetMedExWorkSpaceHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMedExWorkSpaceHdr = GetMedExWorkSpaceHdr(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetMedExWorkSpaceHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetMedExWorkSpaceHdr = ObjDtLogic.GetDataset("MedExWorkSpaceHdr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetDocTypeTemplateMst"
    Public Function GetDocTypeTemplateMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetDocTypeTemplateMst = GetDocTypeTemplateMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetDocTypeTemplateMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetDocTypeTemplateMst = ObjDtLogic.GetDataset("VIEW_DocTypeTemplateMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetMedExWorkspaceDtlDelete"
    Public Function GetMedExWorkspaceDtlDelete(ByVal MedExWorkspaceHdrNo As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            qStr = "Delete from MedExWorkspaceDtl where nMedExWorkSpaceHdrNo = '" + MedExWorkspaceHdrNo + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region



    '

#Region "GetCountryMaster"
    Public Function GetCountryMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetCountryMaster = GetCountryMaster(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetCountryMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetCountryMaster = ObjDtLogic.GetDataset("View_CountryMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region


#Region " GetSpecialityMaster "
    Public Function GetSpecialityMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSpecialityMaster = GetSpecialityMaster(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSpecialityMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetSpecialityMaster = ObjDtLogic.GetDataset("SpecialityMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region






    'THIS IS WEB SERVICE FOR AUTOCOMPLETE EXTENDER FOR Template

#Region "GetTemplateCompletionList"
    Public Function GetTemplateCompletionList(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "vTemplateName  " + " Like '%"
        whereCondition += prefixText + "%'" + IIf(contextKey.Trim() <> "", " AND " + contextKey.Trim(), "")

        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_MedExTemplateDtl", " Distinct vMedExTemplateId, vTemplateName, vProjectTypeCode ", _
                                        whereCondition, ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vMedExTemplateId").ToString + "#" + dr.Item("vTemplateName").ToString)
        Next
        Return items.ToArray()
    End Function
#End Region

    '********************************************************
    'Added By Satyam
    '********************************************************

#Region "Proc_GetMedExWorkSpaceDtl"

    Public Function Proc_GetMedExWorkSpaceDtl(ByVal vWorkSpaceId As String, _
                                           ByVal vActivityId As String, _
                                           ByRef iPeriod As String, _
                                           ByRef Sql_DataSet As Data.DataSet, _
                                           ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            qStr = "Proc_GetMedExWorkSpaceDtl '" + vWorkSpaceId + "','" + vActivityId + "','" + iPeriod + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "Proc_MedExInfoHdrDtlEdit"
    Public Function Proc_MedExInfoHdrDtlEdit(ByVal vWorkSpaceId As String, _
                                             ByVal vActivityId As String, _
                                             ByVal vSubjectId As String, _
                                             ByVal iPeriod As String, _
                                             ByRef Sql_DataSet As Data.DataSet, _
                                             ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            qStr = "Proc_MedExInfoHdrDtlEdit '" + vWorkSpaceId + "','" + vActivityId + "','" + vSubjectId + "','" + iPeriod + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr, 180)
            'Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region


#Region "GetViewCrfHdrDtlSubDtl"
    Public Function GetViewCrfHdrDtlSubDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewCrfHdrDtlSubDtl = GetViewCrfHdrDtlSubDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
    Friend Function GetViewCrfHdrDtlSubDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetViewCrfHdrDtlSubDtl = ObjDtLogic.GetDataset("View_CRFHdrDtlSubDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

    'Add by ShivaniPandya
#Region "GetViewCRFUploadGuidelineDetail"
    Public Function GetCRFUploadGuidelineDetail(ByVal WhereCondition_1 As String, _
                            ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                            ByRef Sql_DataSet As Data.DataSet, _
                            ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetCRFUploadGuidelineDetail = GetCRFUploadGuidelineDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
    Friend Function GetCRFUploadGuidelineDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetCRFUploadGuidelineDetail = ObjDtLogic.GetDataset("CRFUploadGuidelineDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region
#Region "GetViewCRFUploadGuidelineDetailHistory"
    Public Function GetViewCRFUploadGuidelineDetailHistory(ByVal WhereCondition_1 As String, _
                            ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                            ByRef Sql_DataSet As Data.DataSet, _
                            ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewCRFUploadGuidelineDetailHistory = GetViewCRFUploadGuidelineDetailHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
    Friend Function GetViewCRFUploadGuidelineDetailHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetViewCRFUploadGuidelineDetailHistory = ObjDtLogic.GetDataset("View_CRFUploadGuidelineDtlHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region
    'End

#Region "GetViewWorkspaceSubjectMst"
    Public Function GetViewWorkspaceSubjectMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewWorkspaceSubjectMst = GetViewWorkspaceSubjectMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewWorkspaceSubjectMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetViewWorkspaceSubjectMst = ObjDtLogic.GetDataset("view_WorkspaceSubjectMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetSubjectMaster"
    Public Function GetSubjectMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSubjectMaster = GetSubjectMaster(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSubjectMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetSubjectMaster = ObjDtLogic.GetDataset("SubjectMaster", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetDocTemplateWorkspaceDtl"
    Public Function GetDocTemplateWorkspaceDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetDocTemplateWorkspaceDtl = GetDocTemplateWorkspaceDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetDocTemplateWorkspaceDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetDocTemplateWorkspaceDtl = ObjDtLogic.GetDataset("VIEW_DocTemplateWorkspaceDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetViewWorkSpaceNodeHistory"
    Public Function GetViewWorkSpaceNodeHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewWorkSpaceNodeHistory = GetViewWorkSpaceNodeHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewWorkSpaceNodeHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetViewWorkSpaceNodeHistory = ObjDtLogic.GetDataset("view_WorkSpaceNodeHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "getSubjectBlobDetails"
    Public Function getSubjectBlobDetails(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getSubjectBlobDetails = getSubjectBlobDetails(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getSubjectBlobDetails(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getSubjectBlobDetails = ObjDtLogic.GetDataset("SubjectBlobDetails", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " GetView_PIFSubjectMaster"
    Public Function GetView_PIFSubjectMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetView_PIFSubjectMaster = GetView_PIFSubjectMaster(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetView_PIFSubjectMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetView_PIFSubjectMaster = ObjDtLogic.GetDataset("View_PIFSubjectMaster", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region " GetView_DocTemplateWorkspaceDtl"
    Public Function GetView_DocTemplateWorkspaceDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetView_DocTemplateWorkspaceDtl = GetView_DocTemplateWorkspaceDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetView_DocTemplateWorkspaceDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetView_DocTemplateWorkspaceDtl = ObjDtLogic.GetDataset("View_DocTemplateWorkspaceDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region " GetPIFSubjectScreeningDtl"
    Public Function GetView_PIFSubjectScreeningDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetView_PIFSubjectScreeningDtl = GetView_PIFSubjectScreeningDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetView_PIFSubjectScreeningDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetView_PIFSubjectScreeningDtl = ObjDtLogic.GetDataset("View_PIFSubjectScreeningDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetDocTypeMaster"
    Public Function GetDocTypeMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetDocTypeMaster = GetDocTypeMaster(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetDocTypeMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetDocTypeMaster = ObjDtLogic.GetDataset("doctypemst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "DocTypeTemplateDataMatrix"
    Public Function DocTypeTemplateDataMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            DocTypeTemplateDataMatrix = DocTypeTemplateDataMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function DocTypeTemplateDataMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            DocTypeTemplateDataMatrix = ObjDtLogic.GetDataset("DocTypeTemplateDataMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetView_SubjectBlobDetails"
    Public Function GetView_SubjectBlobDetails(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable
        Try

            ObjDtLogic = New ClsDataLogic_New

            GetView_SubjectBlobDetails = GetView_SubjectBlobDetails(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)
            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetView_SubjectBlobDetails(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetView_SubjectBlobDetails = ObjDtLogic.GetDataset("View_SubjectBlobDetails", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "UploadFile"

    Public Function UploadFile(ByVal FileByte As Byte(), _
                               ByVal FileName As String, _
                               ByRef eStr_Retu As String) As Boolean

        Dim ms As New System.IO.MemoryStream(FileByte)
        Dim fs As System.IO.FileStream

        Try

            'fs = New System.IO.FileStream(System.Web.a.Hosting.HostingEnvironment.MapPath("~/PublishDocTemplateDetail/") & FileName, IO.FileMode.OpenOrCreate)
            fs = New System.IO.FileStream(System.Web.HttpContext.Current.Server.MapPath("~/PublishDocTemplateDetail/") & FileName, IO.FileMode.OpenOrCreate)
            ms.WriteTo(fs)
            ms.Close()
            fs.Close()
            fs.Dispose()
        Catch ex As Exception
            Return ex.Message.ToString()
        End Try


    End Function

#End Region

#Region "GetView_UnAdjustCollectionDtl"
    Public Function GetView_UnAdjustCollectionDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetView_UnAdjustCollectionDtl = GetView_UnAdjustCollectionDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetView_UnAdjustCollectionDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetView_UnAdjustCollectionDtl = ObjDtLogic.GetDataset("view_UnAdjustCollectionDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetView_UnAdjustInvoiceDtl"
    Public Function GetView_UnAdjustInvoiceDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetView_UnAdjustInvoiceDtl = GetView_UnAdjustInvoiceDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetView_UnAdjustInvoiceDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetView_UnAdjustInvoiceDtl = ObjDtLogic.GetDataset("view_UnAdjustInvoiceDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

    '**************************************************
    'Added By Mihir Oza on 18-Nov-2009
    '**************************************************

#Region " GetConnectionString "
    Public Function GetConnectionString(ByVal Password As String, _
                               ByRef Retu_ConnectionString As String, _
                               ByRef eStr_Retu As String) As Boolean

        GetConnectionString = False
        Try

            Dim arrConString() As String = Nothing
            Dim DataSource1 As String = String.Empty
            Dim Database1 As String = String.Empty
            Dim UserId1 As String = String.Empty
            Dim PassWord1 As String = String.Empty

            Retu_ConnectionString = System.Configuration.ConfigurationManager.AppSettings("connstring").ToString.Trim

            If String.IsNullOrEmpty(Retu_ConnectionString) Then
                Throw New Exception("Connection String Not Found !!!")
            End If

            If Retu_ConnectionString.IndexOf(";") < -1 OrElse _
                Retu_ConnectionString.Split(";").Length < 4 Then
                Throw New Exception("Invalid Connection String !!!")
            End If

            arrConString = Retu_ConnectionString.ToUpper().Split(";")

            For Each s As String In arrConString

                If s.Contains("SERVER") Then

                    DataSource1 = s.Split("=")(1)

                ElseIf s.Contains("UID") Then

                    UserId1 = s.Split("=")(1)

                ElseIf s.Contains("PWD") Then

                    PassWord1 = s.Split("=")(1)

                ElseIf s.Contains("DATABASE") Then

                    Database1 = s.Split("=")(1)

                End If

            Next s

            If PassWord1 <> Password.ToUpper() Then
                Throw New Exception("Access Denied !!!")
            End If

            GetConnectionString = True
        Catch ex As Exception
            GetConnectionString = False
            Retu_ConnectionString = String.Empty
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region


    '**************************************************
    'Added By Chandresh Vanker on 31-01-2009
    '**************************************************

#Region "GetSampleDetail"
    Public Function GetSampleDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSampleDetail = GetSampleDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSampleDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetSampleDetail = ObjDtLogic.GetDataset("SampleDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetSampleMedExDetail"
    Public Function GetSampleMedExDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSampleMedExDetail = GetSampleMedExDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSampleMedExDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetSampleMedExDetail = ObjDtLogic.GetDataset("SampleMedExDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "Get_ViewSampleDetail"
    Public Function Get_ViewSampleDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_ViewSampleDetail = Get_ViewSampleDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function Get_ViewSampleDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            Get_ViewSampleDetail = ObjDtLogic.GetDataset("View_SampleDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '=================Added on 04-02-2009

#Region "GetSampleTypeSendReceiveDetail"
    Public Function GetSampleTypeSendReceiveDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSampleTypeSendReceiveDetail = GetSampleTypeSendReceiveDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSampleTypeSendReceiveDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetSampleTypeSendReceiveDetail = ObjDtLogic.GetDataset("SampleTypeSendReceiveDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '==========Added on 05-02-2009

#Region "View_SampleTypeSendReceiveDetail"
    Public Function View_SampleTypeSendReceiveDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SampleTypeSendReceiveDetail = View_SampleTypeSendReceiveDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_SampleTypeSendReceiveDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            View_SampleTypeSendReceiveDetail = ObjDtLogic.GetDataset("View_SampleTypeSendReceiveDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '==========Added on 09-02-2009

#Region " GetScopeMst "
    Public Function GetScopeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetScopeMst = GetScopeMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetScopeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetScopeMst = ObjDtLogic.GetDataset("ScopeMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '========================Added on 25-02-2009

#Region " Get_ViewSampleMedExDetail "
    Public Function Get_ViewSampleMedExDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_ViewSampleMedExDetail = Get_ViewSampleMedExDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function Get_ViewSampleMedExDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Get_ViewSampleMedExDetail = ObjDtLogic.GetDataset("View_SampleMedExDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '==========Added on 13-04-2009

#Region " GetPasswordPolicyMst "

    Public Function GetPasswordPolicyMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetPasswordPolicyMst = GetPasswordPolicyMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function GetPasswordPolicyMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetPasswordPolicyMst = ObjDtLogic.GetDataset("PasswordPolicyMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region '===============Added on 06-05-2009===================For PassWord Policy

#Region " GetPasswordHistory "

    Public Function GetPasswordHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetPasswordHistory = GetPasswordHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function GetPasswordHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetPasswordHistory = ObjDtLogic.GetDataset("PasswordHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " GetUserLoginDetails "

    Public Function GetUserLoginDetails(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetUserLoginDetails = GetUserLoginDetails(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function GetUserLoginDetails(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetUserLoginDetails = ObjDtLogic.GetDataset("UserLoginDetails", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region " GetActivityMedExTemplateDtl "

    Public Function GetActivityMedExTemplateDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetActivityMedExTemplateDtl = GetActivityMedExTemplateDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function GetActivityMedExTemplateDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetActivityMedExTemplateDtl = ObjDtLogic.GetDataset("ActivityMedExTemplateDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region '===============Added on 30-05-2009=============Activity MedEx Template

#Region "VIEW_ActivityMedExTemplateDtl "

    Public Function VIEW_ActivityMedExTemplateDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            VIEW_ActivityMedExTemplateDtl = VIEW_ActivityMedExTemplateDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function VIEW_ActivityMedExTemplateDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            VIEW_ActivityMedExTemplateDtl = ObjDtLogic.GetDataset("VIEW_ActivityMedExTemplateDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region '===============Added on 02-06-2009=============VIEW_ActivityMedExTemplateDtl

#Region "GetUOMMst"

    Public Function GetUOMMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetUOMMst = GetUOMMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function GetUOMMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetUOMMst = ObjDtLogic.GetDataset("UOMMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region '===============Added on 03-06-2009=============

#Region "GetEmailAlertMst"

    Public Function GetEmailAlertMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetEmailAlertMst = GetEmailAlertMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function GetEmailAlertMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetEmailAlertMst = ObjDtLogic.GetDataset("EmailAlertMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region '===============Added on 12-06-2009=============

#Region "GetSubjectProofDetails"

    Public Function GetSubjectProofDetails(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetSubjectProofDetails = GetSubjectProofDetails(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function GetSubjectProofDetails(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSubjectProofDetails = ObjDtLogic.GetDataset("SubjectProofDetails", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region '===============Added on 02-07-2009=============

#Region "View_ProjectgroupWorkspaceSubject"

    Public Function View_ProjectgroupWorkspaceSubject(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            View_ProjectgroupWorkspaceSubject = View_ProjectgroupWorkspaceSubject(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function View_ProjectgroupWorkspaceSubject(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_ProjectgroupWorkspaceSubject = ObjDtLogic.GetDataset("View_ProjectgroupWorkspaceSubject", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region '===============Added on 13-07-2009=============

#Region "Proc_SchedulingGunningActivities"
    Public Function Proc_SchedulingGunningActivities(ByVal WorkspaceId As String, _
                                         ByVal LocationCode As String, _
                                         ByVal DeptCode As String, _
                                         ByVal UserTypeCode As String, _
                                       ByRef Sql_DataSet As Data.DataSet, _
                                       ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = DeptCode + "##" + LocationCode + "##" + UserTypeCode + "##" + WorkspaceId
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_SchedulingGunningActivities", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function '' Added by Dipen Shah on 19-Feb-2015
#End Region


#Region " Proc_SubjectEnrollment "
    Public Function Proc_SubjectEnrollment(ByVal WorkspaceId As String, _
    ByVal LocationCode As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = WorkspaceId + "##" + LocationCode + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_SubjectEnrollment", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '===============Added on 21-07-2009=============

#Region "View_WorkSpaceVisitDtl"

    Public Function View_WorkSpaceVisitDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            View_WorkSpaceVisitDtl = View_WorkSpaceVisitDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function View_WorkSpaceVisitDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_WorkSpaceVisitDtl = ObjDtLogic.GetDataset("View_WorkSpaceVisitDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region '===============Added on 24-07-2009=============

#Region "GetCollectionDetail"

    Public Function GetCollectionDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetCollectionDetail = GetCollectionDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function GetCollectionDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetCollectionDetail = ObjDtLogic.GetDataset("CollectionDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region '===============Added on 31-07-2009=============As per telephonic conversation with Yasheshbhai

#Region "View_WorkspaceSubjectScreeningDtl"

    Public Function View_WorkspaceSubjectScreeningDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            View_WorkspaceSubjectScreeningDtl = View_WorkspaceSubjectScreeningDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function View_WorkspaceSubjectScreeningDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_WorkspaceSubjectScreeningDtl = ObjDtLogic.GetDataset("View_WorkspaceSubjectScreeningDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region '===============Added on 10-08-2009=============

#Region "GetSubjectWorkspaceAssignment"

    Public Function GetSubjectWorkspaceAssignment(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetSubjectWorkspaceAssignment = GetSubjectWorkspaceAssignment(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function GetSubjectWorkspaceAssignment(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSubjectWorkspaceAssignment = ObjDtLogic.GetDataset("SubjectWorkspaceAssignment", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region '===============Added on 11-08-2009=============

#Region "View_SubjectWorkspaceAssignment"

    Public Function View_SubjectWorkspaceAssignment(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            View_SubjectWorkspaceAssignment = View_SubjectWorkspaceAssignment(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function View_SubjectWorkspaceAssignment(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SubjectWorkspaceAssignment = ObjDtLogic.GetDataset("View_SubjectWorkspaceAssignment", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region '===============Added on 11-08-2009=============

#Region "View_MaxSubjectBlobdetails_Search"

    Public Function View_MaxSubjectBlobdetails_Search(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            View_MaxSubjectBlobdetails_Search = View_MaxSubjectBlobdetails_Search(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function View_MaxSubjectBlobdetails_Search(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        'If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
        '    eStr_Retu = "Invalid Data Retrieval Option"
        '    Exit Function
        'End If

        Try
            View_MaxSubjectBlobdetails_Search = ObjDtLogic.GetDataset("View_MaxSubjectBlobdetails_Search", WhereCondition_1, WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region '===============Added on 20-08-2009=============

#Region "GetSubjectLabReportDetail"

    Public Function GetSubjectLabReportDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetSubjectLabReportDetail = GetSubjectLabReportDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function GetSubjectLabReportDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSubjectLabReportDetail = ObjDtLogic.GetDataset("SubjectLabReportDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region '===============Added on 27-08-2009=============

#Region "View_SubjectLabReportDetail"

    Public Function View_SubjectLabReportDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            View_SubjectLabReportDetail = View_SubjectLabReportDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function View_SubjectLabReportDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SubjectLabReportDetail = ObjDtLogic.GetDataset("View_SubjectLabReportDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region '===============Added on 27-08-2009=============

#Region " GetUserLoginFailureDetails"
    Public Function GetUserLoginFailureDetails(ByVal WhereCondition_1 As String, _
                                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                               ByRef Sql_DataSet As Data.DataSet, _
                                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetUserLoginFailureDetails = GetUserLoginFailureDetails(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
    Friend Function GetUserLoginFailureDetails(ByVal WhereCondition_1 As String, _
                                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                               ByVal ObjDtLogic As ClsDataLogic_New, _
                                               ByRef Sql_DtTbl As Data.DataTable, _
                                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetUserLoginFailureDetails = ObjDtLogic.GetDataset("UserLoginFailureDetails", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '===============Added on 16-09-2009=============

#Region "GetCRFHdrForCTM"
    Public Function GetCRFHdrForCTM(ByVal WhereCondition_1 As String, _
                                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                               ByRef Sql_DataSet As Data.DataSet, _
                                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetCRFHdrForCTM = GetCRFHdrForCTM(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
    Friend Function GetCRFHdrForCTM(ByVal WhereCondition_1 As String, _
                                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                               ByVal ObjDtLogic As ClsDataLogic_New, _
                                               ByRef Sql_DtTbl As Data.DataTable, _
                                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetCRFHdrForCTM = ObjDtLogic.GetDataset("CRFHdr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '===============Added on 19-12-2009=============

#Region "GetCRFDtl"
    Public Function GetCRFDtl(ByVal WhereCondition_1 As String, _
                                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                               ByRef Sql_DataSet As Data.DataSet, _
                                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetCRFDtl = GetCRFDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
    Friend Function GetCRFDtl(ByVal WhereCondition_1 As String, _
                                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                               ByVal ObjDtLogic As ClsDataLogic_New, _
                                               ByRef Sql_DtTbl As Data.DataTable, _
                                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetCRFDtl = ObjDtLogic.GetDataset("CRFDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '===============Added on 19-12-2009=============

#Region "GetCRFSubDtl"
    Public Function GetCRFSubDtl(ByVal WhereCondition_1 As String, _
                                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                               ByRef Sql_DataSet As Data.DataSet, _
                                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetCRFSubDtl = GetCRFSubDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
    Friend Function GetCRFSubDtl(ByVal WhereCondition_1 As String, _
                                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                               ByVal ObjDtLogic As ClsDataLogic_New, _
                                               ByRef Sql_DtTbl As Data.DataTable, _
                                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetCRFSubDtl = ObjDtLogic.GetDataset("CRFSubDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '===============Added on 19-12-2009=============

#Region "GetCRFWorkFlowDtl"
    Public Function GetCRFWorkFlowDtl(ByVal WhereCondition_1 As String, _
                                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                               ByRef Sql_DataSet As Data.DataSet, _
                                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetCRFWorkFlowDtl = GetCRFWorkFlowDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
    Friend Function GetCRFWorkFlowDtl(ByVal WhereCondition_1 As String, _
                                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                               ByVal ObjDtLogic As ClsDataLogic_New, _
                                               ByRef Sql_DtTbl As Data.DataTable, _
                                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetCRFWorkFlowDtl = ObjDtLogic.GetDataset("CRFWorkFlowDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '===============Added on 19-12-2009=============

#Region "View_CRFHdrDtlSubDtl"

    Public Function View_CRFHdrDtlSubDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            View_CRFHdrDtlSubDtl = View_CRFHdrDtlSubDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function View_CRFHdrDtlSubDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_CRFHdrDtlSubDtl = ObjDtLogic.GetDataset("View_CRFHdrDtlSubDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region '===============Added on 19-12-2009=============

#Region " View_CRFHdrDtlSubDtl_Edit "
    Public Function View_CRFHdrDtlSubDtl_Edit(ByVal WhereCondition As String, _
                                              ByVal Columns As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean


        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If WhereCondition = "" Then
                qStr = "Select  " & Columns & " from View_CRFHdrDtlSubDtl_Edit "
            Else
                qStr = "Select  " & Columns & " from View_CRFHdrDtlSubDtl_Edit " & _
                                    " where " + WhereCondition
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region "GetDCFMst"

    Public Function GetDCFMst(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetDCFMst = GetDCFMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetDCFMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetDCFMst = ObjDtLogic.GetDataset("DCFMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region '===============Added on 25-12-2009=============

#Region "View_DCFMst"

    Public Function View_DCFMst(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_DCFMst = View_DCFMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_DCFMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_DCFMst = ObjDtLogic.GetDataset("View_DCFMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region '===============Added on 25-12-2009=============

#Region "GetReferenceTableDefinitions"

    Public Function GetReferenceTableDefinitions(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetReferenceTableDefinitions = GetReferenceTableDefinitions(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetReferenceTableDefinitions(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetReferenceTableDefinitions = ObjDtLogic.GetDataset("ReferenceTableDefinitions", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

    Public Function GetReferenceTableDefinitionsHistory(ByVal WhereCondition_1 As String, _
                             ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                             ByRef Sql_DataSet As Data.DataSet, _
                             ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetReferenceTableDefinitionsHistory = GetReferenceTableDefinitionsHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetReferenceTableDefinitionsHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetReferenceTableDefinitionsHistory = ObjDtLogic.GetDataset("View_ReferenceTableDefinitionsHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function


#End Region '===============Added on 29-12-2009=============

#Region "VIEW_DiscrepancyStatusReport"

    Public Function VIEW_DiscrepancyStatusReport(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            VIEW_DiscrepancyStatusReport = VIEW_DiscrepancyStatusReport(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function VIEW_DiscrepancyStatusReport(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            VIEW_DiscrepancyStatusReport = ObjDtLogic.GetDataset("VIEW_DiscrepancyStatusReport", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region '===============Added on 31-12-2009=============

#Region "GetProjectNo"

    Public Function GetProjectNo(ByRef ProjNo As String, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Ds As Data.DataSet = Nothing
        Dim qStr As String = ""
        Try

            ObjDtLogic = New ClsDataLogic_New
            Ds = New DataSet
            ''Below Code commented and Added by Aaditya for increase project length from 3 to 4 digit
            ''qStr = "SELECT  right('00' + cast(IsNull(Max(substring(vProjectNo,0,4)),'0') + 1 as varchar),3)" + _
            ''            "+ '-' + right(cast(Year(GetDate()) as varchar(4)),2)  FROM workspaceprotocoldetail " + _
            ''            " WHERE substring(vProjectNo,5,2) = right(cast(Year(GetDate()) as varchar(4)),2)  and vProjectNo Not Like 'MV%' AND vPROJECTNO NOT LIKE 'MD%'"

            qStr = "SELECT RIGHT('000' + Cast(Isnull(Max(Substring(CASE WHEN LEN(vProjectNo) = 6 THEN '0' + vProjectNo ELSE vProjectNo END, 0, 5)), '0') + 1 AS VARCHAR), 4)" + _
                        " + '-' + RIGHT(Cast(Year(Getdate()) AS VARCHAR(4)), 2)  FROM workspaceprotocoldetail " + _
                        " WHERE Substring(CASE WHEN LEN(vProjectNo) = 6 THEN '0' + vProjectNo ELSE vProjectNo END, 6, 2) = RIGHT(Cast(Year(Getdate()) AS VARCHAR(4)), 2)" + _
                        " and vProjectNo Not Like 'MV%' AND vPROJECTNO NOT LIKE 'MD%'"
            ''Ended by Aaditya
            GetProjectNo = ObjDtLogic.GetResultSet(qStr, Ds)

            If Not Ds.Tables(0) Is Nothing Then
                ProjNo = Ds.Tables(0).Rows(0)(0).ToString()
            End If

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region '===============Added on 05-01-2010=============

#Region "View_WorkspaceActivitySubjectMatrix"

    Public Function View_WorkspaceActivitySubjectMatrix(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_WorkspaceActivitySubjectMatrix = View_WorkspaceActivitySubjectMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_WorkspaceActivitySubjectMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_WorkspaceActivitySubjectMatrix = ObjDtLogic.GetDataset("View_WorkspaceActivitySubjectMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region '===============Added on 27-01-2010=============

#Region " Proc_WorkspaceActivitySubjectMatrix "
    Public Function Proc_WorkspaceActivitySubjectMatrix(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_WorkspaceActivitySubjectMatrix", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '===============Added on 27-01-2010=============

#Region "GetMedExCrossChecks"

    Public Function GetMedExCrossChecks(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMedExCrossChecks = GetMedExCrossChecks(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetMedExCrossChecks(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetMedExCrossChecks = ObjDtLogic.GetDataset("MedExCrossChecks", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region '===============Added on 17-02-2010=============

#Region "View_WorkSpaceSubjectRegistration"

    Public Function View_WorkSpaceSubjectRegistration(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_WorkSpaceSubjectRegistration = View_WorkSpaceSubjectRegistration(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_WorkSpaceSubjectRegistration(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_WorkSpaceSubjectRegistration = ObjDtLogic.GetDataset("View_WorkSpaceSubjectRegistration", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region '===============Added on 26-02-2010=============

#Region " GetColumnNamesWithWhereCondition "
    Public Function GetColumnNamesWithWhereCondition(ByVal TableName As String, _
                                    ByVal wStr As String, _
                                    ByRef Sql_DS As Data.DataSet, _
                                    ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Dim str_Query As String

            str_Query = " Select SysColumns.Name as [ColumnName],Type_Name(SysColumns.xType) as [DataType] from SysColumns " + _
                       " Where SysColumns.Id= Object_Id(" + "'" + TableName + "'" + ")"
            If wStr.Trim() <> "" Then
                str_Query += " AND " + wStr
            End If

            If Not ObjDtLogic.GetResultSet(str_Query, Sql_DS) Then
                eStr_Retu = "Error while getting Columns of Table: " & TableName
                Return False
            End If

            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '===============Added on 11-03-2010=============

#Region "View_CRFDetailedReport"

    Public Function View_CRFDetailedReport(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_CRFDetailedReport = View_CRFDetailedReport(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_CRFDetailedReport(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_CRFDetailedReport = ObjDtLogic.GetDataset("View_CRFDetailedReport", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region '===============Added on 11-03-2010=============

#Region "View_CRFActivityStatus"

    Public Function View_CRFActivityStatus(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_CRFActivityStatus = View_CRFActivityStatus(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_CRFActivityStatus(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_CRFActivityStatus = ObjDtLogic.GetDataset("View_CRFActivityStatus", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region '===============Added on 01-04-2010=============

#Region "VIEW_MedExActivityVise"

    Public Function VIEW_MedExActivityVise(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            VIEW_MedExActivityVise = VIEW_MedExActivityVise(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function VIEW_MedExActivityVise(ByVal WhereCondition_1 As String, _
                                   ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                   ByVal ObjDtLogic As ClsDataLogic_New, _
                                   ByRef Sql_DtTbl As Data.DataTable, _
                                   ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            VIEW_MedExActivityVise = ObjDtLogic.GetDataset("VIEW_MedExActivityVise", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function


#End Region '===============Added on 05-04-2010=============

#Region "GetMedExEditChecks"

    Public Function GetMedExEditChecks(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMedExEditChecks = GetMedExEditChecks(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetMedExEditChecks(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetMedExEditChecks = ObjDtLogic.GetDataset("MedExEditChecks", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region '===============Added on 05-04-2010=============

#Region "Proc_GetStructure"
    Public Function Proc_GetStructure(ByVal Param As String, ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetStructure", Param)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  '=== Added on 07-Dec-2011

#Region "Proc_GetNodeInformation"
    Public Function Proc_GetNodeInformation(ByVal Param As String, ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetNodeInformation", Param)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  '=== Added on 24-March-2012

#Region "View_WorkspaceActivitySequenceDeviation"

    Public Function View_WorkspaceActivitySequenceDeviation(ByVal WhereCondition As String, _
                              ByVal DataRetrieval As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_WorkspaceActivitySequenceDeviation = View_WorkspaceActivitySequenceDeviation(WhereCondition, DataRetrieval, ObjDtLogic, Tbl, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_WorkspaceActivitySequenceDeviation(ByVal WhereCondition As String, _
                               ByVal DataRetrieval As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_WorkspaceActivitySequenceDeviation = ObjDtLogic.GetDataset("View_WorkspaceActivitySequenceDeviation", "", WhereCondition, DataRetrieval, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region '===============Added on 24-Feb-2012=============

#Region "View_CRFDetail"

    Public Function View_CRFDetail(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_CRFDetail = View_CRFDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_CRFDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_CRFDetail = ObjDtLogic.GetDataset("View_CRFDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region '===============Added on 07-04-2010=============

#Region "GetEditChecksHdr"

    Public Function GetEditChecksHdr(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetEditChecksHdr = GetEditChecksHdr(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetEditChecksHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetEditChecksHdr = ObjDtLogic.GetDataset("EditChecksHdr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region '===============Added on 07-04-2010=============

#Region "GetEditChecksDtl"

    Public Function GetEditChecksDtl(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetEditChecksDtl = GetEditChecksDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetEditChecksDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetEditChecksDtl = ObjDtLogic.GetDataset("EditChecksDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region '===============Added on 07-04-2010=============

#Region "Get_EditChecksHdrDtl"

    'Public Function view_editcheckshdrdtl(ByVal wherecondition_1 As String, _
    '                          ByVal dataretrieval_1 As DataRetrievalModeEnum, _
    '                          ByRef sql_dataset As Data.DataSet, _
    '                          ByRef estr_retu As String) As Boolean
    '    Dim objdtlogic As clsdatalogic_new = Nothing
    '    Dim tbl_1 As data.datatable = Nothing

    '    Try

    '        objdtlogic = New clsdatalogic_new
    '        view_editcheckshdrdtl = view_editcheckshdrdtl(wherecondition_1, dataretrieval_1, objdtlogic, tbl_1, estr_retu)

    '        sql_dataset = New data.dataset
    '        sql_dataset.tables.add(tbl_1)

    '    Catch ex As exception
    '        estr_retu = ex.message
    '    End Try

    'End Function

    'Friend Function view_editcheckshdrdtl(ByVal wherecondition_1 As String, _
    '                           ByVal dataretrieval_1 As DataRetrievalModeEnum, _
    '                           ByVal objdtlogic As ClsDataLogic_New, _
    '                           ByRef sql_dttbl As Data.DataTable, _
    '                           ByRef estr_retu As String) As Boolean


    '    If dataretrieval_1 = dataretrievalmodeenum.datattable_query Then
    '        estr_retu = "invalid data retrieval option"
    '        Exit Function
    '    End If

    '    Try
    '        view_editcheckshdrdtl = objdtlogic.getdataset("view_editcheckshdrdtl", "", wherecondition_1, dataretrieval_1, sql_dttbl)
    '    Catch ex As exception
    '        estr_retu = ex.message
    '    End Try


    'End Function

    Public Function Get_EditChecksHdrDtl(ByVal WorkSpaceId As String, ByVal SubjectId As String, _
                                         ByVal NodeId As Integer, ByRef Sql_DataSet As Data.DataSet, _
                                         ByRef eStr_Retu As String) As Boolean
        Try

            Dim Param As String = ""
            Dim ObjDtLogic As New ClsDataLogic_New
            Param = WorkSpaceId + "##" + SubjectId + "##" + NodeId.ToString() + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_EditChecksHdrDtl", Param)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function


#End Region '===============Added on 23-04-2010=============

#Region "GetCRFLockDtl"

    Public Function GetCRFLockDtl(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetCRFLockDtl = GetCRFLockDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetCRFLockDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetCRFLockDtl = ObjDtLogic.GetDataset("CRFLockDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region '===============Added on 25-04-2010=============

#Region "View_CRFLockDtl"

    Public Function View_CRFLockDtl(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_CRFLockDtl = View_CRFLockDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_CRFLockDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_CRFLockDtl = ObjDtLogic.GetDataset("View_CRFLockDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region '===============Added on 25-04-2010=============

#Region "View_EditChecksHdr"

    Public Function View_EditChecksHdr(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_EditChecksHdr = View_EditChecksHdr(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_EditChecksHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_EditChecksHdr = ObjDtLogic.GetDataset("View_EditChecksHdr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region '===============Added on 28-04-2010=============

#Region "View_EditChecksHdr_MaxTran"

    'Removed as view is changed to procedure-Pratiksha
    'Public Function View_EditChecksHdr_MaxTran(ByVal WhereCondition_1 As String, _
    '                          ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
    '                          ByRef Sql_DataSet As Data.DataSet, _
    '                          ByRef eStr_Retu As String) As Boolean
    '    Dim ObjDtLogic As ClsDataLogic_New = Nothing
    '    Dim Tbl_1 As Data.DataTable = Nothing

    '    Try

    '        ObjDtLogic = New ClsDataLogic_New
    '        View_EditChecksHdr_MaxTran = View_EditChecksHdr_MaxTran(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

    '        Sql_DataSet = New Data.DataSet
    '        Sql_DataSet.Tables.Add(Tbl_1)

    '    Catch ex As Exception
    '        eStr_Retu = ex.Message
    '    End Try

    'End Function

    'Friend Function View_EditChecksHdr_MaxTran(ByVal WhereCondition_1 As String, _
    '                           ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
    '                           ByVal ObjDtLogic As ClsDataLogic_New, _
    '                           ByRef Sql_DtTbl As Data.DataTable, _
    '                           ByRef eStr_Retu As String) As Boolean


    '    If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
    '        eStr_Retu = "Invalid Data Retrieval Option"
    '        Exit Function
    '    End If

    '    Try
    '        View_EditChecksHdr_MaxTran = ObjDtLogic.GetDataset("View_EditChecksHdr_MaxTran", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
    '    Catch ex As Exception
    '        eStr_Retu = ex.Message
    '    End Try


    'End Function
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    Public Function Get_EditChecksHdr_MaxTran(ByVal WorkSpaceId As String, ByVal NodeId As Integer, ByRef Sql_DataSet As Data.DataSet, _
                                                ByRef eStr_Retu As String) As Boolean
        Try

            Dim Param As String = ""
            Dim ObjDtLogic As New ClsDataLogic_New
            Param = WorkSpaceId + "##" + NodeId.ToString() + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_EditChecksHdr_MaxTran", Param)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region '===============Added on 03-05-2010=============

#Region "View_EditChecksDtl"

    Public Function View_EditChecksDtl(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_EditChecksDtl = View_EditChecksDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_EditChecksDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_EditChecksDtl = ObjDtLogic.GetDataset("View_EditChecksDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region '===============Added on 14-05-2010=============

#Region "GetOldProjects"

    Public Function GetOldProjects(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetOldProjects = GetOldProjects(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetOldProjects(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetOldProjects = ObjDtLogic.GetDataset("OldProjects", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region '===============Added on 25-08-2010=============

#Region "view_getanalyticalprojects"

    Public Function view_getanalyticalprojects(ByVal WhereCondition_1 As String, _
                                  ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                  ByRef Sql_DataSet As Data.DataSet, _
                                  ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_getanalyticalprojects = view_getanalyticalprojects(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function view_getanalyticalprojects(ByVal WhereCondition_1 As String, _
                                   ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                   ByVal ObjDtLogic As ClsDataLogic_New, _
                                   ByRef Sql_DtTbl As Data.DataTable, _
                                   ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            view_getanalyticalprojects = ObjDtLogic.GetDataset("view_getanalyticalprojects", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "View_getClinicalPhaseProjects"

    Public Function View_getClinicalPhaseProjects(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_getClinicalPhaseProjects = View_getClinicalPhaseProjects(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_getClinicalPhaseProjects(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_getClinicalPhaseProjects = ObjDtLogic.GetDataset("View_getClinicalPhaseProjects", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region '===============Added on 14-09-2010=============

#Region " Proc_GetProjectStatusCount "
    Public Function Proc_GetProjectStatusCount(ByVal ProjectTypeCode As String, _
               ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = ProjectTypeCode
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetProjectStatusCount", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '===============Added on 14-09-2010=============

#Region " Proc_GetNotificationEmailId "
    Public Function Proc_GetNotificationEmailId(ByVal ActivityId As String, _
                                        ByVal ActivityStartedOrEnded As String, _
                                        ByVal TaskToDo As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = ActivityId + "##" + ActivityStartedOrEnded + "##" + TaskToDo + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetNotificationEmailId", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '===============Added on 15-10-2010=============

#Region " Proc_GetProjectStudyWorkSummaryDetails "
    Public Function Proc_GetProjectStudyWorkSummaryDetails(ByVal ActivityId As String, _
                                        ByVal FromDate As String, _
                                        ByVal ToDate As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = ActivityId + "##" + FromDate + "##" + ToDate + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetProjectStudyWorkSummaryDetails", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '===============Added on 20-10-2010=============

#Region " getExpenseTypeMst "
    Public Function getExpenseTypeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getExpenseTypeMst = getExpenseTypeMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getExpenseTypeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getExpenseTypeMst = ObjDtLogic.GetDataset("ExpenseTypeMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getExpenseMst "
    Public Function getExpenseMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getExpenseMst = getExpenseMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getExpenseMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getExpenseMst = ObjDtLogic.GetDataset("ExpenseMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " View_ExpenseMst "
    Public Function View_ExpenseMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_ExpenseMst = View_ExpenseMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_ExpenseMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_ExpenseMst = ObjDtLogic.GetDataset("View_ExpenseMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getExpenseDtl "
    Public Function getExpenseDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getExpenseDtl = getExpenseDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getExpenseDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getExpenseDtl = ObjDtLogic.GetDataset("ExpenseDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " View_BlankCRF "
    Public Function View_BlankCRF(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_BlankCRF = View_BlankCRF(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_BlankCRF(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_BlankCRF = ObjDtLogic.GetDataset("View_BlankCRF", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region '===============Added on 17-12-2010=============

#Region " getWorkSpaceSubjectMstHistory "
    Public Function getWorkSpaceSubjectMstHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getWorkSpaceSubjectMstHistory = getWorkSpaceSubjectMstHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getWorkSpaceSubjectMstHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getWorkSpaceSubjectMstHistory = ObjDtLogic.GetDataset("WorkSpaceSubjectMstHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region '===============Added on 27-12-2010=============

#Region " View_WorkSpaceSubjectMstHistory "
    Public Function View_WorkSpaceSubjectMstHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_WorkSpaceSubjectMstHistory = View_WorkSpaceSubjectMstHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_WorkSpaceSubjectMstHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_WorkSpaceSubjectMstHistory = ObjDtLogic.GetDataset("View_WorkSpaceSubjectMstHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region '===============Added on 28-12-2010=============

#Region " Proc_WorkspaceActivitySubjectMatrix_Count "
    'Public Function Proc_WorkspaceActivitySubjectMatrix_Count(ByVal WorkspaceId As String, _
    '                                    ByVal Period As String, _
    '                                    ByRef Sql_DataSet As Data.DataSet, _
    '                                    ByRef eStr_Retu As String) As Boolean
    '    Try

    '        Dim ObjDtLogic As New ClsDataLogic_New
    '        Dim Param As String = ""
    '        Param = WorkspaceId + "##" + Period + "##"
    '        Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_WorkspaceActivitySubjectMatrix_Count", Param)
    '        Return True

    '    Catch ex As Exception
    '        eStr_Retu = ex.Message
    '        Return False
    '    End Try
    'End Function



    Public Function Proc_WorkspaceActivitySubjectMatrix_Count(ByVal Parameters As String, _
                                          ByRef Sql_DataSet As Data.DataSet, _
                                          ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_WorkspaceActivitySubjectMatrix_Count", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function



#End Region '===============Added on 02-02-2011=============

#Region " Proc_MyProjects "
    Public Function Proc_MyProjects(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_MyProjects", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '===============Added on 03-02-2011=============

#Region " Proc_Test "
    Public Function Proc_Test(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_Test")
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region " Proc_GetMyProjectsCount "
    Public Function Proc_GetMyProjectsCount(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetMyProjectsCount", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '===============Added on 03-02-2011=============

#Region " getWorkSpaceStatusDtl "
    Public Function getWorkSpaceStatusDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getWorkSpaceStatusDtl = getWorkSpaceStatusDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getWorkSpaceStatusDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getWorkSpaceStatusDtl = ObjDtLogic.GetDataset("WorkSpaceStatusDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 04-02-2011=============

#Region " Proc_WorkspaceActivitySubjectMatrix_BABE "
    Public Function Proc_WorkspaceActivitySubjectMatrix_BABE(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_WorkspaceActivitySubjectMatrix_BABE", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '===============Added on 02-03-2011=============

#Region "getDocumentReleaseDetails"
    Public Function getDocumentReleaseDetails(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getDocumentReleaseDetails = getDocumentReleaseDetails(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getDocumentReleaseDetails(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getDocumentReleaseDetails = ObjDtLogic.GetDataset("DocumentReleaseDetails", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region '=============Added on 24-03-2011 on request of Vishal=============

#Region " Proc_GetTabularDataForActivity "
    Public Function Proc_GetTabularDataForActivity(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetTabularDataForActivity", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '===============Added on 14-04-2011=============

#Region " View_ActivityStartEndDtl "
    Public Function View_ActivityStartEndDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_ActivityStartEndDtl = View_ActivityStartEndDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_ActivityStartEndDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_ActivityStartEndDtl = ObjDtLogic.GetDataset("View_ActivityStartEndDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region '' Added By Dharmesh H.Salla ''

#Region "Get Actibity Tree For BABE" '
    Friend Function Proc_ActivityTreeBABE(ByVal WorkSpaceId_1 As String, _
                               ByVal iPeriod As String, _
                               ByVal cSubjectWiseFlag As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean


        Try

            Dim Param As String = ""
            Dim ObjDtLogic As New ClsDataLogic_New
            Param = WorkSpaceId_1 + "##" + iPeriod.ToString() + "##" + cSubjectWiseFlag + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("proc_GetActivityTreeView", Param)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '=============Added on 18-08-2011 on request of Suhani=============

#Region "Get Activity Tree For CRFTerm BABE"

    Friend Function Proc_GetActivityTreeCRFTerm_BABE(ByVal WorkSpaceId_1 As String, _
                               ByVal iPeriod As String, _
                               ByVal cSubjectWiseFlag As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean


        Try

            Dim Param As String = ""
            Dim ObjDtLogic As New ClsDataLogic_New
            Param = WorkSpaceId_1 + "##" + iPeriod.ToString() + "##" + cSubjectWiseFlag + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetActivityTreeCRFTerm_BABE", Param)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '=============Added on 24-11-2017 for Medical Coding BABE Hiren Rami=============

#Region "Get Actibity Tree For CTM" '
    Friend Function Proc_ActivityTreeCTM(ByVal WorkSpaceId_1 As String, _
                               ByVal iPeriod As String, _
                               ByVal cSubjectWiseFlag As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean


        Try

            Dim Param As String = ""
            Dim ObjDtLogic As New ClsDataLogic_New
            Param = WorkSpaceId_1 + "##" + iPeriod.ToString() + "##" + cSubjectWiseFlag + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("proc_GetActivityTreeView_CTM", Param)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '=============Added on 18-08-2011 on request of Suhani=============

#Region "Get Activity Tree For CRFTerm"
    Friend Function Proc_GetActivityTreeCRFTerm(ByVal WorkSpaceId_1 As String, _
                               ByVal iPeriod As String, _
                               ByVal cSubjectWiseFlag As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean


        Try

            Dim Param As String = ""
            Dim ObjDtLogic As New ClsDataLogic_New
            Param = WorkSpaceId_1 + "##" + iPeriod.ToString() + "##" + cSubjectWiseFlag + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetActivityTreeCRFTerm", Param)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '=============Added on 24-11-2017 for Medical Coding Hiren Rami=============

#Region "proc_GetCRFActivityStatusCTM"
    Public Function proc_GetCRFActivityStatusCTM(ByVal WorkSpaceId_1 As String, _
                                              ByVal iPeriod As String, _
                                                         ByVal vSubjectId As String, _
                                                         ByVal iParentActivityNodeId As String, _
                                                         ByVal iActivityNodeId As String, _
                                                         ByVal cSubjectWiseFlag As String, _
                                                         ByVal cDataStatus As String, _
                                                         ByVal iWorkFlowStageId As String, _
                                                         ByRef Sql_DataSet As Data.DataSet, _
                                                         ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = WorkSpaceId_1 + "##" + iPeriod.ToString() + "##" + vSubjectId + "##" + iParentActivityNodeId + "##" + iActivityNodeId + "##" + cSubjectWiseFlag.ToString() + "##" + cDataStatus.ToString() + "##" + iWorkFlowStageId.ToString() + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("proc_getcrfactivitystatus_New1_CTM", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '=============Added on 18-08-2011 on request of Suhani=============

#Region "proc_GetCRFActivityStatus"
    Public Function proc_GetCRFActivityStatusBABE(ByVal WorkSpaceId_1 As String, _
                                              ByVal iPeriod As String, _
                                                         ByVal vSubjectId As String, _
                                                         ByVal iParentActivityNodeId As String, _
                                                         ByVal iActivityNodeId As String, _
                                                         ByVal cSubjectWiseFlag As String, _
                                                         ByVal cDataStatus As String, _
                                                         ByVal iWorkFlowStageId As String, _
                                                         ByRef Sql_DataSet As Data.DataSet, _
                                                         ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = WorkSpaceId_1 + "##" + iPeriod.ToString() + "##" + vSubjectId + "##" + iParentActivityNodeId + "##" + iActivityNodeId + "##" + cSubjectWiseFlag.ToString() + "##" + cDataStatus.ToString() + "##" + iWorkFlowStageId.ToString() + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetCRFActivityStatusReport_BABE", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '=============Added on 18-08-2011 on request of Suhani=============

#Region "proc_GetCRFActivityStatusCount"
    Public Function proc_GetCRFActivityStatusCount(ByVal WorkSpaceId_1 As String, _
                                                   ByVal iPeriod As String, _
                                                        ByVal vSubjectId As String, _
                                                        ByVal iParentActivityNodeId As String, _
                                                        ByVal iActivityNodeId As String, _
                                                        ByVal cSubjectWiseFlag As String, _
                                                        ByVal ProjectType As Integer, _
                                                        ByVal cDataStatus As String, _
                                                         ByVal iWorkFlowStageId As String, _
                                                        ByRef Sql_DataSet As Data.DataSet, _
                                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = WorkSpaceId_1 + "##" + iPeriod.ToString() + "##" + vSubjectId + "##" + iParentActivityNodeId + "##" + iActivityNodeId + "##" + cSubjectWiseFlag + "##" + ProjectType.ToString() + "##" + cDataStatus.ToString() + "##" + iWorkFlowStageId.ToString() + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("proc_GetCRFActivityStatusCount", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '=============Added on 18-08-2011 on request of Suhani=============

#Region "Proc_getcrfactivitystatusformedicalcoding"
    Public Function Proc_getcrfactivitystatusformedicalcoding(ByVal WorkSpaceId_1 As String, _
                                                        ByVal iPeriod As String, _
                                                        ByVal vSubjectId As String, _
                                                        ByVal iParentActivityNodeId As String, _
                                                        ByVal iActivityNodeId As String, _
                                                        ByVal cSubjectWiseFlag As String, _
                                                        ByVal ProjectType As Integer, _
                                                        ByVal cDataStatus As String, _
                                                        ByVal iWorkFlowStageId As String, _
                                                        ByVal cDictionaryType As String, _
                                                        ByVal CRFTerm As String, _
                                                        ByVal cCodingStatus As String, _
                                                        ByVal cActStatus As String, _
                                                        ByRef Sql_DataSet As Data.DataSet, _
                                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = WorkSpaceId_1 + "##" + iPeriod.ToString() + "##" + vSubjectId + "##" + iParentActivityNodeId + "##" + iActivityNodeId + "##" + _
                    cSubjectWiseFlag + "##" + ProjectType.ToString() + "##" + cDataStatus.ToString() + "##" + iWorkFlowStageId.ToString() + "##" + _
                    cDictionaryType.ToString() + "##" + CRFTerm.ToString() + "##" + cCodingStatus.ToString() + "##" + cActStatus.ToString() + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_getcrfactivitystatusformedicalcoding", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '==============Added on 15-05-2017 for Medical Coding by Vikram==============

#Region " View_CRFHdrDtlSubDtl_Edit_All " '===Added on 15-09-0011 on request of suhani============
    Public Function View_CRFHdrDtlSubDtl_Edit_All(ByVal WhereCondition As String, _
                                                    ByVal Columns As String, _
                                                     ByRef Sql_DataSet As Data.DataSet, _
                                                     ByRef eStr_Retu As String) As Boolean


        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If WhereCondition = "" Then
                qStr = "Select  " & Columns & " from View_CRFHdrDtlSubDtl_Edit_All "
            Else
                qStr = "Select  " & Columns & " from View_CRFHdrDtlSubDtl_Edit_All " & _
                                    " where " + WhereCondition
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region " View_CRFWorkFlowDtl "
    Public Function View_CRFWorkFlowDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_CRFWorkFlowDtl = View_CRFWorkFlowDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_CRFWorkFlowDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_CRFWorkFlowDtl = ObjDtLogic.GetDataset("View_CRFWorkFlowDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region '===============Added on 31-08-2011=============

#Region " View_Userlogindetails "
    Public Function View_Userlogindetails(ByVal WhereCondition As String, _
                               ByVal DataRetrieval As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_Userlogindetails = View_Userlogindetails(WhereCondition, DataRetrieval, ObjDtLogic, Tbl, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_Userlogindetails(ByVal WhereCondition As String, _
                               ByVal DataRetrieval As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_Userlogindetails = ObjDtLogic.GetDataset("View_Userlogindetails", "", WhereCondition, DataRetrieval, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region '===============Added on 17-10-2011=============

#Region " view_UserLoginHistory "
    Public Function view_UserLoginHistory(ByVal WhereCondition As String, _
                               ByVal DataRetrieval As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_UserLoginHistory = view_UserLoginHistory(WhereCondition, DataRetrieval, ObjDtLogic, Tbl, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function view_UserLoginHistory(ByVal WhereCondition As String, _
                               ByVal DataRetrieval As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            view_UserLoginHistory = ObjDtLogic.GetDataset("view_UserLoginHistory", "", WhereCondition, DataRetrieval, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region '===============Added on 18-10-2011=============

#Region " Proc_TreeViewOfNodes_BlankCRF "
    Public Function Proc_TreeViewOfNodes_BlankCRF(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_TreeViewOfNodes_BlankCRF", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '===============Added on 17-10-2011=============

#Region " Proc_GetTableFormatDataForCRF "
    Public Function Proc_GetTableFormatDataForCRF(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetTableFormatDataForCRF", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '===============Added on 22-11-2011=============

    ''added on 10-10-2011 by Mrunal Parekh
    Public Function GetMyProjectCompletionListwithworkspacedesc(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "vWorkspaceDesc + vRequestId  + vProjectNo + vClientName   " + " Like '%"
        whereCondition += prefixText + "%'" + IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), "")
        ''whereCondition += "AND  (CASE WHEN  cIsTrainingAssign <> 'Y' THEN 1 ELSE   CASE WHEN  vTrainingFinished = 'YES' THEN 1 ELSE 0 END   END ) =1 AND (CASE WHEN  cIsTrainingAssign = 'Y' THEN 1 ELSE  CASE WHEN vTrainingFinished = 'No' THEN 1 END END ) =1 "
        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_Myprojects", " * ", _
            whereCondition, ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vWorkspaceid").ToString + "#" + dr.Item("vWorkspaceDesc").ToString + _
                "#" + dr.Item("vProjectNo").ToString + "#" + _
                dr.Item("vClientName").ToString + "#" + dr.Item("vRequestId").ToString())



        Next

        Return items.ToArray()
    End Function

    '******************************************************************************************************
    '******************************************************************************************************

    '**************************************************
    'Added By: Deepak Singh
    '**************************************************

#Region "GetUserMstHistory"
    Public Function getUserMstHistory(ByVal WhereCondition_1 As String, _
                                   ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                   ByRef Sql_DataSet As Data.DataSet, _
                                   ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getUserMstHistory = getUserMstHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getUserMstHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getUserMstHistory = ObjDtLogic.GetDataset("UserMstHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "getUserLoginHistory"
    Public Function getUserLoginHistory(ByVal WhereCondition_1 As String, _
                                  ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                  ByRef Sql_DataSet As Data.DataSet, _
                                  ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getUserLoginHistory = getUserLoginHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getUserLoginHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getUserLoginHistory = ObjDtLogic.GetDataset("UserLoginHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region '===Added on 14-09-09===

#Region "View_UserMstHistoryAuditTrail"
    Public Function View_UserMstHistoryAuditTrail(ByVal WhereCondition_1 As String, _
                                     ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                     ByRef Sql_DataSet As Data.DataSet, _
                                     ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_UserMstHistoryAuditTrail = View_UserMstHistoryAuditTrail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_UserMstHistoryAuditTrail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_UserMstHistoryAuditTrail = ObjDtLogic.GetDataset("View_UserMstHistoryAuditTrail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region '===Added on 15-09-09====

#Region "View_UserLoginAuditTrail"
    Public Function View_UserLoginAuditTrail(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_UserLoginAuditTrail = View_UserLoginAuditTrail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_UserLoginAuditTrail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_UserLoginAuditTrail = ObjDtLogic.GetDataset("View_UserLoginAuditTrail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region '===Added on 15-09-09===

#Region "View_PasswordHistoryAuditTrail"
    Public Function View_PasswordHistoryAuditTrail(ByVal WhereCondition_1 As String, _
                                            ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                            ByRef Sql_DataSet As Data.DataSet, _
                                            ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_PasswordHistoryAuditTrail = View_PasswordHistoryAuditTrail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_PasswordHistoryAuditTrail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_PasswordHistoryAuditTrail = ObjDtLogic.GetDataset("View_PasswordHistoryAuditTrail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region '===Added on 15-09-09===

#Region "View_UserAuditTrail"
    Public Function View_UserAuditTrail(ByVal WhereCondition_1 As String, _
                                           ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                           ByRef Sql_DataSet As Data.DataSet, _
                                           ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_UserAuditTrail = View_UserAuditTrail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_UserAuditTrail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_UserAuditTrail = ObjDtLogic.GetDataset("View_UserAuditTrail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region '===Added on 15-09-09===

#Region " GetUsersForDropDown "
    Public Function GetUsersForDropDown(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetUsersForDropDown = GetUsersForDropDown(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
    Friend Function GetUsersForDropDown(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetUsersForDropDown = ObjDtLogic.GetDataset("View_UsersForDropDown", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region " getWorkTypeMst "
    Public Function getWorkTypeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getWorkTypeMst = getWorkTypeMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getWorkTypeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getWorkTypeMst = ObjDtLogic.GetDataset("WorktypeMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region '===added on 08-12-09====

#Region "View_WorkspaceDtlForHdrwithCurrAttr"

    Public Function View_WorkspaceDtlForHdrwithCurrAttr(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_WorkspaceDtlForHdrwithCurrAttr = View_WorkspaceDtlForHdrwithCurrAttr(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_WorkspaceDtlForHdrwithCurrAttr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_WorkspaceDtlForHdrwithCurrAttr = ObjDtLogic.GetDataset("View_WorkspaceDtlForHdrwithCurrAttr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region '==added on 23-Dec-2009

#Region "Common project search for old and new projects"
    Public Function GetOldNewProjects(ByVal WhereCondition As String, _
                                      ByVal WhereConditionForNewProjects As String, _
                                       ByVal DatareTrival As DataRetrievalModeEnum, _
                                       ByRef Sql_DataSet As Data.DataSet, _
                                       ByRef eStr_Retu As String) As Boolean

        Dim ObjDtLogic As ClsDataLogic_New = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetOldNewProjects = GetOldNewProjects(WhereCondition, WhereConditionForNewProjects, DatareTrival, ObjDtLogic, Sql_DataSet, eStr_Retu)
        Catch ex As Exception

        End Try
    End Function

    Friend Function GetOldNewProjects(ByVal WhereCondition As String, _
                                      ByVal WhereConditionForNewProjects As String, _
                               ByVal DataRetrieval As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean

        Dim TblOldProjects As Data.DataTable = Nothing
        Dim TblNewProjects As Data.DataTable = Nothing
        Dim qStr As String = ""

        'Sql_DtSet = New Data.DataSet

        Try
            qStr = "Proc_GetProjectDetails '" + WhereConditionForNewProjects + "'"
            Sql_DtSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

        Try
            GetOldNewProjects = ObjDtLogic.GetDataset("View_OldProjects", "", WhereCondition, DataRetrieval, TblOldProjects)
            Sql_DtSet.Tables.Add(TblOldProjects)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region ' Added by peatiksha for common old and new project search

#Region "GetMedExWorkspaceTemplateDtl"
    Public Function GetMedExWorkspaceTemplateDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMedExWorkspaceTemplateDtl = GetMedExWorkspaceTemplateDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetMedExWorkspaceTemplateDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetMedExWorkspaceTemplateDtl = ObjDtLogic.GetDataset("MedExWorkspaceTemplateDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  '==added on 02-Mar-2010

#Region "View_MedExWorkspaceTemplateDtl"
    Public Function View_MedExWorkspaceTemplateDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_MedExWorkspaceTemplateDtl = View_MedExWorkspaceTemplateDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_MedExWorkspaceTemplateDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            View_MedExWorkspaceTemplateDtl = ObjDtLogic.GetDataset("View_MedExWorkspaceTemplateDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  '==added on 09-Mar-2010

#Region "View_PKSampleDetail"
    Public Function View_PKSampleDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_PKSampleDetail = View_PKSampleDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_PKSampleDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            View_PKSampleDetail = ObjDtLogic.GetDataset("View_PKSampleDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '==added on 31-Mar-2010

#Region "PKSampleDetail"
    Public Function PKSampleDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            PKSampleDetail = PKSampleDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function PKSampleDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            PKSampleDetail = ObjDtLogic.GetDataset("PKSampleDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '==added on 31-Mar-2010

#Region "View_SubjectLabRptDtl"

    Public Function View_SubjectLabRptDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            View_SubjectLabRptDtl = View_SubjectLabRptDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function View_SubjectLabRptDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SubjectLabRptDtl = ObjDtLogic.GetDataset("View_SubjectLabRptDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region '===added on 28-Apr-2010

#Region "View_SubjectLabReportDtl_Audit"

    Public Function View_SubjectLabReportDtl_Audit(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            View_SubjectLabReportDtl_Audit = View_SubjectLabReportDtl_Audit(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function View_SubjectLabReportDtl_Audit(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SubjectLabReportDtl_Audit = ObjDtLogic.GetDataset("View_SubjectLabReportDtl_Audit", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region '==added on 30-Apr-2010

#Region "GetSourceDocDtl"
    Public Function GetSourceDocDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSourceDocDtl = GetSourceDocDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSourceDocDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetSourceDocDtl = ObjDtLogic.GetDataset("SourceDocDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "VIEW_PreviewMedExTemplateDtl"
    Public Function VIEW_PreviewMedExTemplateDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            VIEW_PreviewMedExTemplateDtl = VIEW_PreviewMedExTemplateDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function VIEW_PreviewMedExTemplateDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            VIEW_PreviewMedExTemplateDtl = ObjDtLogic.GetDataset("VIEW_PreviewMedExTemplateDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "View_LabRptLockUnlockDtl"
    Public Function View_LabRptLockUnlockDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_LabRptLockUnlockDtl = View_LabRptLockUnlockDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_LabRptLockUnlockDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            View_LabRptLockUnlockDtl = ObjDtLogic.GetDataset("View_LabRptLockUnlockDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '==added on 10-June-2010

#Region "GetLabRptLockUnlockDtl"
    Public Function GetLabRptLockUnlockDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetLabRptLockUnlockDtl = GetLabRptLockUnlockDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetLabRptLockUnlockDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetLabRptLockUnlockDtl = ObjDtLogic.GetDataset("LabRptLockUnlockDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '==added on 09-June-2010

#Region "GetScreeningLockDtl"
    Public Function GetScreeningLockDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetScreeningLockDtl = GetScreeningLockDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetScreeningLockDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetScreeningLockDtl = ObjDtLogic.GetDataset("ScreeningLockDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '==added on 05-July-2010

#Region "View_MaxScreeningLockDtl"
    Public Function View_MaxScreeningLockDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_MaxScreeningLockDtl = View_MaxScreeningLockDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_MaxScreeningLockDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            View_MaxScreeningLockDtl = ObjDtLogic.GetDataset("View_MaxScreeningLockDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '==added on 07-July-2010

#Region "ChkLockedScreenDate"

    Public Function ChkLockedScreenDate(ByVal ScreeningHdrNo As String) As Boolean

        Dim wStr As String = String.Empty
        Dim ds_MaxScrDtl As New DataSet
        Dim eStr As String = String.Empty

        Try

            ChkLockedScreenDate = True

            wStr = " nMedexScreeningHdrNo = " + ScreeningHdrNo + " and cLockUnlockFlag = 'L'"

            If Not View_MaxScreeningLockDtl(wStr, DataRetrievalModeEnum.DataTable_WithWhereCondition, _
                                ds_MaxScrDtl, eStr) Then

                Throw New Exception(eStr)

            End If

            If ds_MaxScrDtl.Tables(0).Rows.Count > 0 Then

                ChkLockedScreenDate = False
            End If


        Catch ex As Exception
            eStr = ex.Message
            ChkLockedScreenDate = False
        End Try

    End Function

#End Region '==added on 07-July-2010

#Region "getViewMaxMedExScreeningHdrDtl_Rpt"
    Public Function getViewMaxMedExScreeningHdrDtl_Rpt(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getViewMaxMedExScreeningHdrDtl_Rpt = getViewMaxMedExScreeningHdrDtl_Rpt(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getViewMaxMedExScreeningHdrDtl_Rpt(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getViewMaxMedExScreeningHdrDtl_Rpt = ObjDtLogic.GetDataset("View_MedExScreeningHdrDtl_Rpt", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region  '==added on 27-July-2010===

#Region "View_MedExScreeningHdrHistory"
    Public Function View_MedExScreeningHdrHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_MedExScreeningHdrHistory = View_MedExScreeningHdrHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_MedExScreeningHdrHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            View_MedExScreeningHdrHistory = ObjDtLogic.GetDataset("View_MedExScreeningHdrHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '==added on 23-Aug-2010===

#Region "view_rptactivityDetailsReport"
    Public Function view_rptactivityDetailsReport(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_rptactivityDetailsReport = view_rptactivityDetailsReport(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function view_rptactivityDetailsReport(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            view_rptactivityDetailsReport = ObjDtLogic.GetDataset("view_rptactivityDetailsReport", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "Proc_GetOperational_KPIs"
    Public Function Proc_GetOperational_KPIs(ByVal StartDate As String, _
                                                ByVal EndDate As String, _
                                                ByRef Sql_DataSet As Data.DataSet, _
                                                ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            qStr = "Exec Proc_GetOperational_KPIs '" + StartDate.Trim() + "','" + EndDate.Trim() + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region '==added on 29-Oct-2010 for Dash Board ==

#Region "Proc_Get_BedNights"
    Public Function Proc_Get_BedNights(ByVal StartDate As String, _
                                                ByVal EndDate As String, _
                                                 ByVal LocationCode As String, _
                                                ByRef Sql_DataSet As Data.DataSet, _
                                                ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            qStr = "Proc_Get_BedNights '" + StartDate.Trim() + "','" + EndDate.Trim() + "','" + LocationCode + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region '==added on 29-Oct-2010 for Dash Board ===

#Region "Proc_CRFHdrDtlSubDtl"
    Public Function Proc_CRFHdrDtlSubDtl(ByVal vProjectNo As String, _
                                                ByVal vSubjectId As String, _
                                                ByRef Sql_DataSet As Data.DataSet, _
                                                ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            qStr = "Proc_CRFHdrDtlSubDtl '" + vProjectNo.Trim() + "','" + vSubjectId.Trim() + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region '===Added on 08-Dec-2010 for CRFReport

#Region "ReportTypeMst"
    Public Function ReportTypeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            ReportTypeMst = ReportTypeMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function ReportTypeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            ReportTypeMst = ObjDtLogic.GetDataset("ReportTypeMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '===Added on 11-Feb-2011 for CRFReport

#Region "View_ReportTypeMst"
    Public Function View_ReportTypeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_ReportTypeMst = View_ReportTypeMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_ReportTypeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            View_ReportTypeMst = ObjDtLogic.GetDataset("View_ReportTypeMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  '===Added on 14-Feb-2011 for CRFReport

#Region "View_GetEligibleScreeningHdrDtl"
    Public Function View_GetEligibleScreeningHdrDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_GetEligibleScreeningHdrDtl = View_GetEligibleScreeningHdrDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_GetEligibleScreeningHdrDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            View_GetEligibleScreeningHdrDtl = ObjDtLogic.GetDataset("View_GetEligibleScreeningHdrDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  '===Added on 02-Mar-2011 for SubjectAssignment

#Region "GetView_SubjectBlobDetails_Housing"
    Public Function GetView_SubjectBlobDetails_Housing(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable
        Try

            ObjDtLogic = New ClsDataLogic_New

            GetView_SubjectBlobDetails_Housing = GetView_SubjectBlobDetails_Housing(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)
            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetView_SubjectBlobDetails_Housing(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetView_SubjectBlobDetails_Housing = ObjDtLogic.GetDataset("View_SubjectBlobDetails_Housing", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  '===Added on 01-April-2011 for Housing photo Capturing

#Region "view_rptactivityDetailsReport"
    Public Function view_RptSubAttendance(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_RptSubAttendance = view_RptSubAttendance(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function view_RptSubAttendance(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            view_RptSubAttendance = ObjDtLogic.GetDataset("view_RptSubAttendance", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region  '=== Added on 12-May-2011 for Attendance Report

#Region "GetProjectTypeDimensionDtl"
    Public Function GetProjectTypeDimensionDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetProjectTypeDimensionDtl = GetProjectTypeDimensionDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetProjectTypeDimensionDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetProjectTypeDimensionDtl = ObjDtLogic.GetDataset("ProjectTypeDimensionDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  '=== Added on 30-August-2011 for geting ProjectTypeDimensionDtl

#Region "Get_EditChecksReport"
    Public Function Get_EditChecksReport(ByVal Param As String, ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_EditChecksReport", Param)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Public Function Get_EditChecksExecutedReport(ByVal Param As String, ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_EditChecksExecutedReport", Param)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  '=== Added on 09-Nov-2011


#Region "View_MaxSubjectBlobdetails_ForOVIS"

    Public Function View_MaxSubjectBlobdetails_ForOVIS(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            View_MaxSubjectBlobdetails_ForOVIS = View_MaxSubjectBlobdetails_ForOVIS(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function View_MaxSubjectBlobdetails_ForOVIS(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        'If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
        '    eStr_Retu = "Invalid Data Retrieval Option"
        '    Exit Function
        'End If

        Try
            View_MaxSubjectBlobdetails_ForOVIS = ObjDtLogic.GetDataset("View_MaxSubjectBlobdetails_ForOVIS", WhereCondition_1, WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "Get_TreeView_BlankCRF"
    Public Function Get_TreeView_BlankCRF(ByVal WorkSpaceId As String, ByVal NodeId As Integer, ByRef Sql_DataSet As Data.DataSet, _
                                            ByRef eStr_Retu As String) As Boolean
        Try

            Dim Param As String = ""
            Dim ObjDtLogic As New ClsDataLogic_New
            Param = WorkSpaceId + "##" + NodeId.ToString() + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_TreeViewOfNodes_BlankCRF", Param)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "GetViewWorkspaceSubjectMst_InHouse"
    Public Function GetViewWorkspaceSubjectMstInHouse(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewWorkspaceSubjectMstInHouse = GetViewWorkspaceSubjectMstInHouse(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewWorkspaceSubjectMstInHouse(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetViewWorkspaceSubjectMstInHouse = ObjDtLogic.GetDataset("view_WorkspaceSubjectMst_InHouse", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region


#Region "Get Data "
    Public Function GetData(ByVal TableName As String, _
                            ByVal ColumnNames As String, _
                            ByVal WhereCondition As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As Data.DataTable = Nothing
        Dim qStr As String = ""


        Try
            qStr = "select " & ColumnNames & " from " & TableName
            If DataRetrieval_1 = DataRetrievalModeEnum.DataTable_WithWhereCondition Then
                qStr += " Where " & WhereCondition
            ElseIf DataRetrieval_1 = DataRetrievalModeEnum.DataTable_Empty Then
                qStr += " Where  1 = 2"
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try

    End Function

#End Region


    '===========for e-CTD=====================
#Region "GetAgencyMst"
    Public Function GetAgencyMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetAgencyMst = GetAgencyMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetAgencyMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetAgencyMst = ObjDtLogic.GetDataset("AgencyMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "WorkspaceCMSMst"
    Public Function WorkspaceCMSMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            WorkspaceCMSMst = WorkspaceCMSMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function WorkspaceCMSMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            WorkspaceCMSMst = ObjDtLogic.GetDataset("WorkspaceCMSMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "view_WorkspaceCmsMst"

    Public Function view_WorkspaceCmsMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            view_WorkspaceCmsMst = view_WorkspaceCmsMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function view_WorkspaceCmsMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        'If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
        '    eStr_Retu = "Invalid Data Retrieval Option"
        '    Exit Function
        'End If

        Try
            view_WorkspaceCmsMst = ObjDtLogic.GetDataset("view_WorkspaceCmsMst", WhereCondition_1, WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "GetSubmissioninfoEU14Mst"
    Public Function GetSubmissioninfoEU14Mst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSubmissioninfoEU14Mst = GetSubmissioninfoEU14Mst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetSubmissioninfoEU14Mst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetSubmissioninfoEU14Mst = ObjDtLogic.GetDataset("SubmissioninfoEU14Mst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetSubmissioninfoUSMst"
    Public Function GetSubmissioninfoUSMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSubmissioninfoUSMst = GetSubmissioninfoUSMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetSubmissioninfoUSMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetSubmissioninfoUSMst = ObjDtLogic.GetDataset("SubmissioninfoUSMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetSubmissioninfoCAMst"
    Public Function GetSubmissioninfoCAMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSubmissioninfoCAMst = GetSubmissioninfoCAMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetSubmissioninfoCAMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetSubmissioninfoCAMst = ObjDtLogic.GetDataset("SubmissioninfoCAMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "view_AllWorkspaceSubmissionInfo"

    Public Function view_AllWorkspaceSubmissionInfo(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            view_AllWorkspaceSubmissionInfo = view_AllWorkspaceSubmissionInfo(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function view_AllWorkspaceSubmissionInfo(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        'If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
        '    eStr_Retu = "Invalid Data Retrieval Option"
        '    Exit Function
        'End If

        Try
            view_AllWorkspaceSubmissionInfo = ObjDtLogic.GetDataset("view_AllWorkspaceSubmissionInfo", WhereCondition_1, WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "GetWorkspacenodeattrdetail"
    Public Function GetWorkspacenodeattrdetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetWorkspacenodeattrdetail = GetWorkspacenodeattrdetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetWorkspacenodeattrdetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetWorkspacenodeattrdetail = ObjDtLogic.GetDataset("Workspacenodeattrdetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetAttributeMstForEctd"
    Public Function GetAttributeMstForEctd(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetAttributeMstForEctd = GetAttributeMstForEctd(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetAttributeMstForEctd(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetAttributeMstForEctd = ObjDtLogic.GetDataset("AttributeMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "View_DocumentHistory_ForECTD"
    Public Function View_DocumentHistory_ForECTD(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_DocumentHistory_ForECTD = View_DocumentHistory_ForECTD(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_DocumentHistory_ForECTD(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            View_DocumentHistory_ForECTD = ObjDtLogic.GetDataset("View_DocumentHistory_ForECTD", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "View_WorkSpaceNodeAttrDetail"
    Public Function View_WorkSpaceNodeAttrDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_WorkSpaceNodeAttrDetail = View_WorkSpaceNodeAttrDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_WorkSpaceNodeAttrDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            View_WorkSpaceNodeAttrDetail = ObjDtLogic.GetDataset("View_WorkSpaceNodeAttrDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetAttributeValueMatrix"

    Public Function GetAttributeValueMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetAttributeValueMatrix = GetAttributeValueMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetAttributeValueMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetAttributeValueMatrix = ObjDtLogic.GetDataset("AttributeValueMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "GetsubmissionInfoEU14Dtl"

    Public Function GetsubmissionInfoEU14Dtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetsubmissionInfoEU14Dtl = GetsubmissionInfoEU14Dtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetsubmissionInfoEU14Dtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetsubmissionInfoEU14Dtl = ObjDtLogic.GetDataset("submissionInfoEU14Dtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "View_WorkspaceNodeHistory_ForEctd"
    Public Function View_WorkspaceNodeHistory_ForEctd(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_WorkspaceNodeHistory_ForEctd = View_WorkspaceNodeHistory_ForEctd(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_WorkspaceNodeHistory_ForEctd(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            View_WorkspaceNodeHistory_ForEctd = ObjDtLogic.GetDataset("View_WorkspaceNodeHistory_ForEctd", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "Getstfstudyidentifiermst"

    Public Function Getstfstudyidentifiermst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            Getstfstudyidentifiermst = Getstfstudyidentifiermst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Getstfstudyidentifiermst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Getstfstudyidentifiermst = ObjDtLogic.GetDataset("stfstudyidentifiermst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "Getstfcategorymst"

    Public Function Getstfcategorymst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            Getstfcategorymst = Getstfcategorymst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Getstfcategorymst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Getstfcategorymst = ObjDtLogic.GetDataset("stfcategorymst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "View_STFCategoryAttrValueMatrix"
    Public Function View_STFCategoryAttrValueMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_STFCategoryAttrValueMatrix = View_STFCategoryAttrValueMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_STFCategoryAttrValueMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            View_STFCategoryAttrValueMatrix = ObjDtLogic.GetDataset("View_STFCategoryAttrValueMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "Getstfcategoryattrvaluematrix"

    Public Function Getstfcategoryattrvaluematrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            Getstfcategoryattrvaluematrix = Getstfcategoryattrvaluematrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Getstfcategoryattrvaluematrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Getstfcategoryattrvaluematrix = ObjDtLogic.GetDataset("stfcategoryattrvaluematrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "Getstfnodemst"

    Public Function Getstfnodemst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            Getstfnodemst = Getstfnodemst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Getstfnodemst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Getstfnodemst = ObjDtLogic.GetDataset("stfnodemst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "View_WorkSpaceNodeDetailS_STF"
    Public Function View_WorkSpaceNodeDetailS_STF(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_WorkSpaceNodeDetailS_STF = View_WorkSpaceNodeDetailS_STF(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_WorkSpaceNodeDetailS_STF(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            View_WorkSpaceNodeDetailS_STF = ObjDtLogic.GetDataset("View_WorkSpaceNodeDetailS_STF", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

    '=====================================
    'Created By : Bharat Patel
    'Created Date : 28-Nov-2011
    'Reason : Get the data from WorkspaceNodeDocHistory for the Source Doc
    '======================================
#Region "GetWorkspaceNodeDocHistory"

    Public Function GetWorkspaceNodeDocHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetWorkspaceNodeDocHistory = GetWorkspaceNodeDocHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetWorkspaceNodeDocHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetWorkspaceNodeDocHistory = ObjDtLogic.GetDataset("WorkspaceNodeDocHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "GetWorkspaceNodeCommentHistory"

    Public Function GetWorkspaceNodeCommentHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetWorkspaceNodeCommentHistory = GetWorkspaceNodeCommentHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetWorkspaceNodeCommentHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetWorkspaceNodeCommentHistory = ObjDtLogic.GetDataset("WorkspaceNodeCommentHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "View_WorkspaceNodeCommentHistory"

    Public Function View_WorkspaceNodeCommentHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_WorkspaceNodeCommentHistory = View_WorkspaceNodeCommentHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_WorkspaceNodeCommentHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_WorkspaceNodeCommentHistory = ObjDtLogic.GetDataset("View_WorkspaceNodeCommentHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "View_WorkSpaceNodeDocHistory"
    Public Function View_WorkSpaceNodeDocHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_WorkSpaceNodeDocHistory = View_WorkSpaceNodeDocHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_WorkSpaceNodeDocHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            View_WorkSpaceNodeDocHistory = ObjDtLogic.GetDataset("View_WorkSpaceNodeDocHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "View_DocReleaseTrack"

    Public Function View_DocReleaseTrack(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_DocReleaseTrack = View_DocReleaseTrack(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_DocReleaseTrack(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByVal ObjDtLogic As ClsDataLogic_New, _
                                        ByRef Sql_DtTbl As Data.DataTable, _
                                        ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_DocReleaseTrack = ObjDtLogic.GetDataset("View_DocReleaseTrack", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "View_DocReleaseTrack_AuditTrail"

    Public Function View_DocReleaseTrack_AuditTrail(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_DocReleaseTrack_AuditTrail = View_DocReleaseTrack_AuditTrail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_DocReleaseTrack_AuditTrail(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByVal ObjDtLogic As ClsDataLogic_New, _
                                        ByRef Sql_DtTbl As Data.DataTable, _
                                        ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_DocReleaseTrack_AuditTrail = ObjDtLogic.GetDataset("View_DocReleaseTrack_AuditTrail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "DocReleaseTrack"

    Public Function DocReleaseTrack(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            DocReleaseTrack = DocReleaseTrack(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function DocReleaseTrack(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByVal ObjDtLogic As ClsDataLogic_New, _
                                        ByRef Sql_DtTbl As Data.DataTable, _
                                        ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            DocReleaseTrack = ObjDtLogic.GetDataset("DocReleaseTrack", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "View_MedExWorkSpaceNodeDtl_Attr"

    Public Function View_MedExWorkSpaceNodeDtl_Attr(ByVal WhereCondition_1 As String, _
                                                    ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                                    ByRef Sql_DataSet As Data.DataSet, _
                                                    ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_MedExWorkSpaceNodeDtl_Attr = View_MedExWorkSpaceNodeDtl_Attr(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_MedExWorkSpaceNodeDtl_Attr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_MedExWorkSpaceNodeDtl_Attr = ObjDtLogic.GetDataset("View_MedExWorkSpaceNodeDtl_Attr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "GetReleaseDocIdTrack"

    Public Function GetReleaseDocIdTrack(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetReleaseDocIdTrack = GetReleaseDocIdTrack(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetReleaseDocIdTrack(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByVal ObjDtLogic As ClsDataLogic_New, _
                                        ByRef Sql_DtTbl As Data.DataTable, _
                                        ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetReleaseDocIdTrack = ObjDtLogic.GetDataset("ReleaseDocIdTrack", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "View_MyReleasedDocuments"

    Public Function View_MyReleasedDocuments(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_MyReleasedDocuments = View_MyReleasedDocuments(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_MyReleasedDocuments(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByVal ObjDtLogic As ClsDataLogic_New, _
                                        ByRef Sql_DtTbl As Data.DataTable, _
                                        ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_MyReleasedDocuments = ObjDtLogic.GetDataset("View_MyReleasedDocuments", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "View_ReleaseDocMgmt"

    Public Function View_ReleaseDocMgmt(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_ReleaseDocMgmt = View_ReleaseDocMgmt(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_ReleaseDocMgmt(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByVal ObjDtLogic As ClsDataLogic_New, _
                                        ByRef Sql_DtTbl As Data.DataTable, _
                                        ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_ReleaseDocMgmt = ObjDtLogic.GetDataset("View_ReleaseDocMgmt", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "ReleaseDocMgmt"

    Public Function ReleaseDocMgmt(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            ReleaseDocMgmt = ReleaseDocMgmt(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function ReleaseDocMgmt(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByVal ObjDtLogic As ClsDataLogic_New, _
                                        ByRef Sql_DtTbl As Data.DataTable, _
                                        ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            ReleaseDocMgmt = ObjDtLogic.GetDataset("ReleaseDocMgmt", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "View_CRFSubDtlForCategory"

    Public Function View_CRFSubDtlForCategory(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_CRFSubDtlForCategory = View_CRFSubDtlForCategory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_CRFSubDtlForCategory(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByVal ObjDtLogic As ClsDataLogic_New, _
                                        ByRef Sql_DtTbl As Data.DataTable, _
                                        ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_CRFSubDtlForCategory = ObjDtLogic.GetDataset("View_CRFSubDtlForCategory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "View_SOPMailMgmt"

    Public Function View_SOPMailMgmt(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SOPMailMgmt = View_SOPMailMgmt(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_SOPMailMgmt(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByVal ObjDtLogic As ClsDataLogic_New, _
                                        ByRef Sql_DtTbl As Data.DataTable, _
                                        ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SOPMailMgmt = ObjDtLogic.GetDataset("View_SOPMailMgmt", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "GetSOPMailMgmt"

    Public Function GetSOPMailMgmt(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSOPMailMgmt = GetSOPMailMgmt(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetSOPMailMgmt(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByVal ObjDtLogic As ClsDataLogic_New, _
                                        ByRef Sql_DtTbl As Data.DataTable, _
                                        ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSOPMailMgmt = ObjDtLogic.GetDataset("SOPMailMgmt", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

    ''''' FOR GLOBAL DOCUMENT REPOSITORY '''''

#Region "MoleculeMst"

    Public Function MoleculeMst(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            MoleculeMst = MoleculeMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function MoleculeMst(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByVal ObjDtLogic As ClsDataLogic_New, _
                                        ByRef Sql_DtTbl As Data.DataTable, _
                                        ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            MoleculeMst = ObjDtLogic.GetDataset("MoleculeMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "Proc_GetDetailsForGlobalDoc"
    Public Function Proc_GetDetailsForGlobalDoc(ByVal WorkspaceId As String, _
                                                ByVal Clients As String, _
                                                ByVal Molecules As String, _
                                                ByVal Locations As String, _
                                                ByVal ProjectType As String, _
                                                ByRef Sql_DataSet As Data.DataSet, _
                                                ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = WorkspaceId + "##" + Clients + "##" + Molecules + "##" + Locations + "##" + ProjectType
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetDetailsForGlobalDoc", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region         '''''''''''''' Added On 15-Feb-2012 by Jugal Kundal

#Region "Proc_GetDetailsForProjectSynopsis"
    Public Function Proc_GetDetailsForProjectSynopsis(ByVal WorkspaceId As String, _
                                                ByVal Clients As String, _
                                                ByVal Molecules As String, _
                                                ByVal Locations As String, _
                                                ByVal ProjectType As String, _
                                                ByRef Sql_DataSet As Data.DataSet, _
                                                ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = WorkspaceId + "##" + Clients + "##" + Molecules + "##" + Locations + "##" + ProjectType
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetDetailsForProjectSynopsis", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region         '''''''''''''' Added On 15-Feb-2012 by Jugal Kundal

#Region "Proc_GetDetailsForGlobalDoc_temp"
    Public Function Proc_GetDetailsForGlobalDoc_temp(ByVal WorkspaceId As String, _
                                                     ByVal FromDate As String, _
                                                     ByVal ToDate As String, _
                                                     ByRef Sql_NewDataSet As Data.DataSet, _
                                                     ByRef eStr_NewRetu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = WorkspaceId + "##" + FromDate + "##" + ToDate
            Sql_NewDataSet = ObjDtLogic.ProcedureExecute("Proc_GetDetailsForGlobalDoc_temp", Param)
            Return True

        Catch ex As Exception
            eStr_NewRetu = ex.Message
            Return False
        End Try
    End Function
#End Region

    '=========================================
    '******************************************************************************************************
    '******************************************************************************************************

    '*****************************************
    ' Added By: Yashesh Parikh on 27-07-2009
    '*****************************************

#Region " getInvoiceHdr "

    Public Function getInvoiceHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getInvoiceHdr = getInvoiceHdr(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getInvoiceHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getInvoiceHdr = ObjDtLogic.GetDataset("InvoiceHdr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region " getInvoiceDtl "

    Public Function getInvoiceDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getInvoiceDtl = getInvoiceDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getInvoiceDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getInvoiceDtl = ObjDtLogic.GetDataset("InvoiceDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region " getInvoiceSubDtl "

    Public Function getInvoiceSubDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getInvoiceSubDtl = getInvoiceSubDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getInvoiceSubDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getInvoiceSubDtl = ObjDtLogic.GetDataset("InvoiceSubDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "GetReferralMaster"

    Public Function GetReferralMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetReferralMaster = GetReferralMaster(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function GetReferralMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetReferralMaster = ObjDtLogic.GetDataset("ReferralMaster", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "GetSubjectSampleMedexDetail"

    Public Function GetSubjectSampleMedexDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetSubjectSampleMedexDetail = GetSubjectSampleMedexDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function GetSubjectSampleMedexDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSubjectSampleMedexDetail = ObjDtLogic.GetDataset("View_SubjectSampleDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "Getview_RptSampleCollection"

    Public Function Getview_RptSampleCollection(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            Getview_RptSampleCollection = Getview_RptSampleCollection(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function Getview_RptSampleCollection(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Getview_RptSampleCollection = ObjDtLogic.GetDataset("view_RptSampleCollection", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " GetSampleReportPrintingDetail "

    Public Function GetSampleReportPrintingDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSampleReportPrintingDetail = GetSampleReportPrintingDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSampleReportPrintingDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSampleReportPrintingDetail = ObjDtLogic.GetDataset("SampleReportPrintingDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region " View_GetSampleMedExDetailForApproval "

    Public Function View_GetSampleMedExDetailForApproval(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_GetSampleMedExDetailForApproval = View_GetSampleMedExDetailForApproval(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_GetSampleMedExDetailForApproval(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_GetSampleMedExDetailForApproval = ObjDtLogic.GetDataset("View_GetSampleMedExDetailForApproval", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "Patient Master"

    Public Function Get_PatientMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_PatientMaster = Get_PatientMaster(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Get_PatientMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            Get_PatientMaster = ObjDtLogic.GetDataset("PatientMaster", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function


#End Region

#Region "SMS Details"
    Public Function Get_SMSDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable
        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_SMSDetail = Get_SMSDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Get_SMSDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            Get_SMSDetail = ObjDtLogic.GetDataset("SMSDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function


#End Region

#Region "Template Cost Details"
    Public Function Get_TemplateCostMSt(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable
        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_TemplateCostMSt = Get_SMSDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Get_TemplateCostMSt(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            Get_TemplateCostMSt = ObjDtLogic.GetDataset("TemplateCostMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function


#End Region

#Region "Proc_GetMedExWorkSpaceDtl"

    Public Function Get_DiscountMedexTemplateMatrix(ByVal Choice1 As Integer, _
                                           ByVal DiscountCode1 As Integer, _
                                           ByRef Sql_DataSet As Data.DataSet, _
                                           ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            qStr = "Get_DiscountMedexTemplateMatrix '" + Choice1 + "','" + DiscountCode1 + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "GetSubjectPatientMaster"
    Public Function GetSubjectPatientMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSubjectPatientMaster = GetSubjectPatientMaster(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSubjectPatientMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetSubjectPatientMaster = ObjDtLogic.GetDataset("View_SubjectPatientMaster", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "Document Upload LIMS"

    Public Function Get_DocumentUpload(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_DocumentUpload = Get_DocumentUpload(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Get_DocumentUpload(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            Get_DocumentUpload = ObjDtLogic.GetDataset("DocumentUpload", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function


#End Region

#Region "getTestCreationDetails"

    Public Function getTestCreationDetails(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            getTestCreationDetails = getTestCreationDetails(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getTestCreationDetails(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            getTestCreationDetails = ObjDtLogic.GetDataset("View_TestCreationDetails", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function


#End Region

#Region "getTemplateCreationDetails"

    Public Function getTemplateCreationDetails(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            getTemplateCreationDetails = getTemplateCreationDetails(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getTemplateCreationDetails(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            getTemplateCreationDetails = ObjDtLogic.GetDataset("View_TemplateCreationDetails", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function


#End Region

#Region "UploadDocument"

    Public Function UploadDocument(ByVal FileByte As Byte(), _
                               ByVal Path As String, _
                               ByVal FileName As String, _
                               ByRef estr As String) As Boolean


        Dim ms As New System.IO.MemoryStream(FileByte)
        Dim fs As System.IO.FileStream
        Dim Dir As DirectoryInfo

        Try
            '---Create folder and save file on server------
            Path = HttpContext.Current.Server.MapPath(Path)

            Dir = New DirectoryInfo(Path)
            If Not Dir.Exists() Then
                Dir.Create()
            End If
            Path += FileName

            fs = New System.IO.FileStream(Path, IO.FileMode.OpenOrCreate)
            ms.WriteTo(fs)
            ms.Close()
            fs.Close()
            fs.Dispose()

            UploadDocument = True

        Catch ex As Exception
            estr = ex.Message
            UploadDocument = False
        End Try

    End Function

#End Region

#Region "GetDiscountMedExTemplateMatrix"

    Public Function GetDiscountMedExTemplateMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetDiscountMedExTemplateMatrix = GetDiscountMedExTemplateMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function GetDiscountMedExTemplateMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetDiscountMedExTemplateMatrix = ObjDtLogic.GetDataset("DiscountMedExTemplateMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region '===============Added on 12-08-2009=============

#Region "GetView_MedExCostDtl"
    Public Function GetView_MedExCostDtl(ByVal Wstr As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If Wstr = "" Then
                qStr = "Select * from View_MedExCostDtl"
            Else
                qStr = "Select * from View_MedExCostDtl " & _
                                    "where " + Wstr
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region '== For LIMS

#Region "Getview_RptInvoice"
    Public Function Getview_RptInvoice(ByVal Wstr As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If Wstr = "" Then
                qStr = "Select * from view_RptInvoice"
            Else
                qStr = "Select * from view_RptInvoice " & _
                                    "where " + Wstr
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region ' == For LIMS

#Region "GetView_TemplateCostDtl"
    Public Function GetView_TemplateCostDtl(ByVal Wstr As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If Wstr = "" Then
                qStr = "Select * from View_TemplateCostDtl"
            Else
                qStr = "Select * from View_TemplateCostDtl " & _
                                    "where " + Wstr
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region ' == For LIMS

#Region "city Mst"
    Public Function GetCityMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetCityMst = GetCityMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetCityMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetCityMst = ObjDtLogic.GetDataset("CityMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region ' == For LIMS

#Region "KnockOffDetail"
    Public Function GetKnockOffDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetKnockOffDetail = GetKnockOffDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetKnockOffDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetKnockOffDetail = ObjDtLogic.GetDataset("KnockOffDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region ' == For LIMS

#Region "GetView_RptCollection"
    Public Function GetView_RptCollection(ByVal Wstr As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If Wstr = "" Then
                qStr = "Select * from View_RptCollection"
            Else
                qStr = "Select * from View_RptCollection " & _
                                    "where " + Wstr
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region ' == For LIMS

#Region "GetView_RptReceiptCol"
    Public Function Getview_RptRecColection(ByVal Wstr As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If Wstr = "" Then
                qStr = "Select * from view_RptRecColection"
            Else
                qStr = "Select * from view_RptRecColection " & _
                                    "where " + Wstr
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region ' == For LIMS

#Region "Get_LaboratoryDetail"
    Public Function Get_LaboratoryDetail(ByVal Wstr As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If Wstr = "" Then
                qStr = " select * from ReferralMaster where cType='L'"
            Else
                qStr = " select * from ReferralMaster where cType='L' and " + Wstr
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region  ' == For LIMS

#Region "Get_SampleCollectedMaster"
    Public Function Get_SampleCollectedMaster(ByVal Wstr As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If Wstr = "" Then
                qStr = " select * from SampleCollecterMaster "
            Else
                qStr = "Select * from SampleCollecterMaster " & _
                                    "where " + Wstr
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region  ' == For LIMS

#Region "Lab Patient Master"

    Public Function Get_LabPatientMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_LabPatientMaster = Get_LabPatientMaster(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Get_LabPatientMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            Get_LabPatientMaster = ObjDtLogic.GetDataset("LabPatientMaster", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function


#End Region ' == For LIMS

#Region "GetSampleTemplateDetail"

    Public Function GetSampleTemplateDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetSampleTemplateDetail = GetSampleTemplateDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function GetSampleTemplateDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSampleTemplateDetail = ObjDtLogic.GetDataset("SampleTemplateDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region ' == For LIMS

#Region "Getview_InvoiceDetail"
    Public Function Getview_InvoiceDetail(ByVal Wstr As String, _
                                          ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                          ByRef Sql_DataSet As Data.DataSet, _
                                          ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If Wstr = "" Then
                qStr = " select * from view_InvoiceDetail "
            Else
                qStr = "Select * from view_RptRecColection " & _
                                    "where " + Wstr
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region ' == For LIMS

#Region "getCashWithDrawal"

    Public Function getCashWithDrawal(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            getCashWithDrawal = getCashWithDrawal(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function getCashWithDrawal(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getCashWithDrawal = ObjDtLogic.GetDataset("CashWithDrawal", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region ' == For LIMS

#Region "Getview_SampleTemplateDetail"
    Public Function Getview_SampleTemplateDetail(ByVal Wstr As String, _
                                          ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                          ByRef Sql_DataSet As Data.DataSet, _
                                          ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If Wstr = "" Then
                qStr = " select * from view_SampleTemplateDetail "
            Else
                qStr = "Select * from view_SampleTemplateDetail " & _
                                    "where " + Wstr
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region  ' == For LIMS

#Region "GetTemplateReportMatrix"
    Public Function GetTemplateReportMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetTemplateReportMatrix = GetTemplateReportMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetTemplateReportMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetTemplateReportMatrix = ObjDtLogic.GetDataset("TemplateReportMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  ' == For LIMS

#Region "GetSampleRemarkDtl"
    Public Function GetSampleRemarkDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSampleRemarkDtl = GetSampleRemarkDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSampleRemarkDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetSampleRemarkDtl = ObjDtLogic.GetDataset("SampleRemarkDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  ' == For LIMS

#Region "GetRemarkGroupMst"
    Public Function GetRemarkGroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetRemarkGroupMst = GetRemarkGroupMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetRemarkGroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetRemarkGroupMst = ObjDtLogic.GetDataset("RemarkGroupMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  ' == For LIMS

#Region "GetRemarkGroupDtl"
    Public Function GetRemarkGroupDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetRemarkGroupDtl = GetRemarkGroupDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetRemarkGroupDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetRemarkGroupDtl = ObjDtLogic.GetDataset("RemarkGroupDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  ' == For LIMS

#Region "Get_HistoParameterMst"
    Public Function Get_HistoParameterMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_HistoParameterMst = Get_HistoParameterMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function Get_HistoParameterMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            Get_HistoParameterMst = ObjDtLogic.GetDataset("HistoParameterMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  ' == For LIMS

#Region "Get_TemplateRemarkDtl"
    Public Function Get_TemplateRemarkDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_TemplateRemarkDtl = Get_TemplateRemarkDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function Get_TemplateRemarkDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            Get_TemplateRemarkDtl = ObjDtLogic.GetDataset("TemplateRemarkDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  ' == For LIMS

#Region "Get_SampleCollecterMaster"
    Public Function Get_SampleCollecterMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_SampleCollecterMaster = Get_SampleCollecterMaster(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function Get_SampleCollecterMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            Get_SampleCollecterMaster = ObjDtLogic.GetDataset("SampleCollecterMaster", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  ' == For LIMS

#Region "Get_HistoParameterDtl"
    Public Function Get_HistoParameterDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_HistoParameterDtl = Get_HistoParameterDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function Get_HistoParameterDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            Get_HistoParameterDtl = ObjDtLogic.GetDataset("HistoParameterDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  ' == For LIMS

#Region "Get_ParameterHdr"
    Public Function Get_ParameterHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_ParameterHdr = Get_ParameterHdr(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function Get_ParameterHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Get_ParameterHdr = ObjDtLogic.GetDataset("ParameterHdr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  ' == For LIMS

#Region "Get_ParameterDtl"
    Public Function Get_ParameterDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_ParameterDtl = Get_ParameterDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function Get_ParameterDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Get_ParameterDtl = ObjDtLogic.GetDataset("View_ParameterDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  ' == For LIMS

#Region "Get_SampleParameterDetail"
    Public Function Get_ViewSampleParameterDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_ViewSampleParameterDetail = Get_ViewSampleParameterDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function Get_ViewSampleParameterDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Get_ViewSampleParameterDetail = ObjDtLogic.GetDataset("View_SampleParameterDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  ' == For LIMS

#Region "View_SampleDetailForLabInvoice"
    Public Function View_SampleDetailForLabInvoice(ByVal Wstr As String, _
                                          ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                          ByRef Sql_DataSet As Data.DataSet, _
                                          ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If Wstr = "" Then
                qStr = " Select * From View_SampleDetailForLabInvoice "
            Else
                qStr = "Select * From View_SampleDetailForLabInvoice " & _
                                    "Where " + Wstr
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region  ' == For LIMS

#Region "GetView_LabUnAdjustCollectionDtl"
    Public Function GetView_LabUnAdjustCollectionDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetView_LabUnAdjustCollectionDtl = GetView_LabUnAdjustCollectionDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetView_LabUnAdjustCollectionDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetView_LabUnAdjustCollectionDtl = ObjDtLogic.GetDataset("view_LabUnAdjustCollectionDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region ' == For LIMS

#Region "GetView_LabUnAdjustInvoiceDtl"
    Public Function GetView_LabUnAdjustInvoiceDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetView_LabUnAdjustInvoiceDtl = GetView_LabUnAdjustInvoiceDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetView_LabUnAdjustInvoiceDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetView_LabUnAdjustInvoiceDtl = ObjDtLogic.GetDataset("view_LabUnAdjustInvoiceDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region ' == For LIMS

#Region "view_RptDailyCash"

    Public Function Get_viewRptDailyCash(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_viewRptDailyCash = Get_viewRptDailyCash(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Get_viewRptDailyCash(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Get_viewRptDailyCash = ObjDtLogic.GetDataset("view_RptDailyCash", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS

#Region "Get_ViewRptLabInvoice"

    Public Function Get_ViewRptLabInvoice(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_ViewRptLabInvoice = Get_ViewRptLabInvoice(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Get_ViewRptLabInvoice(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Get_ViewRptLabInvoice = ObjDtLogic.GetDataset("view_RptLabInvoice", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS

#Region "Get_RptDailyCash_New"

    Public Function Get_RptDailyCash_New(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_RptDailyCash_New = Get_RptDailyCash_New(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Get_RptDailyCash_New(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Get_RptDailyCash_New = ObjDtLogic.GetDataset("View_RptDailyCash_New", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS

#Region "Get_ViewRptLabCollection"

    Public Function Get_ViewRptLabCollection(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_ViewRptLabCollection = Get_ViewRptLabCollection(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Get_ViewRptLabCollection(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Get_ViewRptLabCollection = ObjDtLogic.GetDataset("View_RptLabCollection", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS

#Region "View_RptSampleCollector"

    Public Function View_RptSampleCollector(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_RptSampleCollector = View_RptSampleCollector(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_RptSampleCollector(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_RptSampleCollector = ObjDtLogic.GetDataset("View_RptSampleCollector", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS

#Region "View_ResultDetail"

    Public Function View_ResultDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_ResultDetail = View_ResultDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_ResultDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_ResultDetail = ObjDtLogic.GetDataset("View_ResultDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS

#Region "GetView_SampleWiseLabUnAdjustCollectionDtl"
    Public Function GetView_SampleWiseLabUnAdjustCollectionDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetView_SampleWiseLabUnAdjustCollectionDtl = GetView_SampleWiseLabUnAdjustCollectionDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetView_SampleWiseLabUnAdjustCollectionDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetView_SampleWiseLabUnAdjustCollectionDtl = ObjDtLogic.GetDataset("View_SampleWiseLabUnAdjustCollectionDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region ' == For LIMS

#Region "GetView_SampleWiseLabUnAdjustInvoiceDtl"
    Public Function GetView_SampleWiseLabUnAdjustInvoiceDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetView_SampleWiseLabUnAdjustInvoiceDtl = GetView_SampleWiseLabUnAdjustInvoiceDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetView_SampleWiseLabUnAdjustInvoiceDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetView_SampleWiseLabUnAdjustInvoiceDtl = ObjDtLogic.GetDataset("View_SampleWiseLabUnAdjustInvoiceDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region ' == For LIMS

#Region "Getview_RptLABLedger"
    Public Function Getview_RptLABLedger(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Getview_RptLABLedger = Getview_RptLABLedger(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function Getview_RptLABLedger(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            Getview_RptLABLedger = ObjDtLogic.GetDataset("view_RptLABLedger", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region ' == For LIMS

#Region "view_RptOutStanding"

    Public Function view_RptOutStanding(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_RptOutStanding = view_RptOutStanding(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function view_RptOutStanding(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            view_RptOutStanding = ObjDtLogic.GetDataset("view_RptOutStanding", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS

#Region "Get_MedexRemarkDtl"

    Public Function Get_MedexRemarkDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_MedexRemarkDtl = Get_MedexRemarkDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Get_MedexRemarkDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Get_MedexRemarkDtl = ObjDtLogic.GetDataset("MedexRemarkDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS

#Region "Get_ViewRptSampleInfo"

    Public Function Get_ViewRptSampleInfo(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_ViewRptSampleInfo = Get_ViewRptSampleInfo(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Get_ViewRptSampleInfo(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Get_ViewRptSampleInfo = ObjDtLogic.GetDataset("View_RptSampleInfo", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS

#Region "Getview_RptMedExInfo_HistoDivisions"

    Public Function Getview_RptMedExInfo_HistoDivisions(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Getview_RptMedExInfo_HistoDivisions = Getview_RptMedExInfo_HistoDivisions(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Getview_RptMedExInfo_HistoDivisions(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Getview_RptMedExInfo_HistoDivisions = ObjDtLogic.GetDataset("view_RptMedExInfo_HistoDivisions", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS

#Region "Getview_GroupwisePatientOutStanding"

    Public Function Getview_GroupwisePatientOutStanding(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Getview_GroupwisePatientOutStanding = Getview_GroupwisePatientOutStanding(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Getview_GroupwisePatientOutStanding(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Getview_GroupwisePatientOutStanding = ObjDtLogic.GetDataset("view_GroupwisePatientOutStanding", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS


#Region "Get_viewSampleDetailMedexGroupWise"

    Public Function Get_viewSampleDetailMedexGroupWise(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_viewSampleDetailMedexGroupWise = Get_viewSampleDetailMedexGroupWise(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Get_viewSampleDetailMedexGroupWise(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Get_viewSampleDetailMedexGroupWise = ObjDtLogic.GetDataset("viewSampleDetailMedexGroupWise", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS

#Region "Get_viewGetPendingWork"

    Public Function Get_viewGetPendingWork(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_viewGetPendingWork = Get_viewGetPendingWork(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Get_viewGetPendingWork(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Get_viewGetPendingWork = ObjDtLogic.GetDataset("view_GetPendingWork", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS

#Region "Get_HistoSampleUserApproval"

    Public Function Get_HistoSampleUserApproval(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_HistoSampleUserApproval = Get_HistoSampleUserApproval(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Get_HistoSampleUserApproval(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Get_HistoSampleUserApproval = ObjDtLogic.GetDataset("HistoSampleUserApproval", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS

#Region "Get_view_RptLabKnockOffReport"

    Public Function Get_view_RptLabKnockOffReport(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_view_RptLabKnockOffReport = Get_view_RptLabKnockOffReport(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Get_view_RptLabKnockOffReport(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Get_view_RptLabKnockOffReport = ObjDtLogic.GetDataset("view_RptLabKnockOffReport", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS


#Region "Get_MedexFormulaMst"

    Public Function Get_MedexFormulaMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_MedexFormulaMst = Get_MedexFormulaMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Get_MedexFormulaMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Get_MedexFormulaMst = ObjDtLogic.GetDataset("MedexFormulaMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS

#Region "Get_view_GetLaboratorySample"

    Public Function Get_view_GetLaboratorySample(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_view_GetLaboratorySample = Get_view_GetLaboratorySample(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Get_view_GetLaboratorySample(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Get_view_GetLaboratorySample = ObjDtLogic.GetDataset("view_GetLaboratorySample", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS

#Region "Get_view_RptDiscount"

    Public Function Get_view_RptDiscount(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_view_RptDiscount = Get_view_RptDiscount(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Get_view_RptDiscount(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Get_view_RptDiscount = ObjDtLogic.GetDataset("view_RptDiscount", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS


#Region "Get_LaboratoryNo"

    Public Function Get_LaboratoryNo(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_LaboratoryNo = Get_LaboratoryNo(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Get_LaboratoryNo(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Get_LaboratoryNo = ObjDtLogic.GetDataset("view_GetLabNo", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS

#Region "view_GetDiscountRecord"

    Public Function view_GetDiscountRecord(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_GetDiscountRecord = view_GetDiscountRecord(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function view_GetDiscountRecord(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            view_GetDiscountRecord = ObjDtLogic.GetDataset("view_GetDiscountRecord", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS

#Region "GetLaboratoryCostMst"

    Public Function GetLaboratoryCostMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetLaboratoryCostMst = GetLaboratoryCostMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function GetLaboratoryCostMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetLaboratoryCostMst = ObjDtLogic.GetDataset("LaboratoryCostMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "FranchiseCost Master"

    Public Function GetFranchiseCostMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetFranchiseCostMaster = GetFranchiseCostMaster(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetFranchiseCostMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetFranchiseCostMaster = ObjDtLogic.GetDataset("FranchiseCostMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region ' == For LIMS

#Region "Dispatch Sample"

    Public Function GetDispatchSample(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetDispatchSample = GetDispatchSample(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetDispatchSample(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetDispatchSample = ObjDtLogic.GetDataset("SampleDispatch", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region ' == For LIMS

#Region "View_RptTRFInfo "

    Public Function View_RptTRFInfo(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_RptTRFInfo = View_RptTRFInfo(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_RptTRFInfo(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_RptTRFInfo = ObjDtLogic.GetDataset("View_RptTRFInfo", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region "GetSampleMedexAudittrial"

    Public Function GetSampleMedexAudittrial(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSampleMedexAudittrial = GetSampleMedexAudittrial(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetSampleMedexAudittrial(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSampleMedexAudittrial = ObjDtLogic.GetDataset("View_RptSampleMedexDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region ' == For LIMS

#Region "GetSampleInfo"

    Public Function GetSampleInfo(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSampleInfo = GetSampleInfo(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetSampleInfo(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSampleInfo = ObjDtLogic.GetDataset("View_RptSampleinformation", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region ' == For LIMS

#Region "GetBoneMarrowSample"

    Public Function GetBoneMarrowSample(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetBoneMarrowSample = GetBoneMarrowSample(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetBoneMarrowSample(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBoneMarrowSample = ObjDtLogic.GetDataset("View_BoneMarrowAspiration", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region ' == For LIMS

#Region "GetBoneMarrowParameter"

    Public Function GetBoneMarrowParameter(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetBoneMarrowParameter = GetBoneMarrowParameter(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetBoneMarrowParameter(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBoneMarrowParameter = ObjDtLogic.GetDataset("BoneMarrowParameterDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region ' == For LIMS

#Region "Get_viewSendSamplePending" '-- For LIMS

    Public Function Get_viewSendSamplePending(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_viewSendSamplePending = Get_viewSendSamplePending(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Get_viewSendSamplePending(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Get_viewSendSamplePending = ObjDtLogic.GetDataset("viewSendSamplePending", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region ' == For LIMS

#Region "Get_viewSendSamplePending" '-- For LIMS

    Public Function Get_viewReceiveSamplePending(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_viewReceiveSamplePending = Get_viewReceiveSamplePending(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function Get_viewReceiveSamplePending(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Get_viewReceiveSamplePending = ObjDtLogic.GetDataset("viewReceiveSamplePending", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region ' == For LIMS

#Region "GetView_RptBoneMarrowAspiration"

    Public Function GetView_RptBoneMarrowAspiration(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetView_RptBoneMarrowAspiration = GetView_RptBoneMarrowAspiration(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetView_RptBoneMarrowAspiration(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetView_RptBoneMarrowAspiration = ObjDtLogic.GetDataset("View_RptBoneMarrowAspiration", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS

#Region "FranchiseMaster"

    Public Function GetFranchiseMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetFranchiseMaster = GetFranchiseMaster(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetFranchiseMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetFranchiseMaster = ObjDtLogic.GetDataset("FranchiseMaster", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region ' == For LIMS

#Region " GetBoneMarrowDiffCountMst " '==For LIMS

    Public Function GetBoneMarrowDiffCountMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetBoneMarrowDiffCountMst = GetBoneMarrowDiffCountMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetBoneMarrowDiffCountMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBoneMarrowDiffCountMst = ObjDtLogic.GetDataset("BoneMarrowDiffCountMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region " GetBoneMarrowDiffCountDetail " '==For LIMS

    Public Function View_BoneMarrowDiffCountDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_BoneMarrowDiffCountDtl = View_BoneMarrowDiffCountDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_BoneMarrowDiffCountDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_BoneMarrowDiffCountDtl = ObjDtLogic.GetDataset("View_BoneMarrowDiffCountDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region " GetBoneMarrowDiffCountMst " '==For LIMS

    Public Function GetBoneMarrowDiffCountDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetBoneMarrowDiffCountDtl = GetBoneMarrowDiffCountDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetBoneMarrowDiffCountDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBoneMarrowDiffCountDtl = ObjDtLogic.GetDataset("BoneMarrowDiffCountDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region "GetView_CollectionDetail"
    Public Function GetView_CollectionDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetView_CollectionDetail = GetView_CollectionDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetView_CollectionDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetView_CollectionDetail = ObjDtLogic.GetDataset("View_CollectionDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetView_DataExport_CDM"
    Public Function GetView_DataExport_CDM(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetView_DataExport_CDM = GetView_DataExport_CDM(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetView_DataExport_CDM(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetView_DataExport_CDM = ObjDtLogic.GetDataset("View_DataExport_CDM", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "View_SampleMedexRangeDtlForRevise "

    Public Function View_SampleMedexRangeDtlForRevise(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SampleMedexRangeDtlForRevise = View_SampleMedexRangeDtlForRevise(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_SampleMedexRangeDtlForRevise(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SampleMedexRangeDtlForRevise = ObjDtLogic.GetDataset("View_SampleMedexRangeDtlForRevise", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region "view_UploadSampleID "

    Public Function view_UploadSampleID(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_UploadSampleID = view_UploadSampleID(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function view_UploadSampleID(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            view_UploadSampleID = ObjDtLogic.GetDataset("view_UploadSampleID", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region "view_WorkspaceSubjectMstDetail "

    Public Function view_WorkspaceSubjectMstDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_WorkspaceSubjectMstDetail = view_WorkspaceSubjectMstDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function view_WorkspaceSubjectMstDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            view_WorkspaceSubjectMstDetail = ObjDtLogic.GetDataset("view_WorkspaceSubjectMstDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region "view_RptGroupwisePatientOutStanding "

    Public Function view_RptGroupwisePatientOutStanding(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_RptGroupwisePatientOutStanding = view_RptGroupwisePatientOutStanding(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function view_RptGroupwisePatientOutStanding(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            view_RptGroupwisePatientOutStanding = ObjDtLogic.GetDataset("view_RptGroupwisePatientOutStanding", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region " Proc_GetSampleMedExDetailForApproval "
    Public Function Proc_GetSampleMedExDetailForApproval(ByVal FromDate_1 As String, _
                                                             ByVal ToDate_1 As String, _
                                                             ByVal MedexGroupCode_1 As String, _
                                                             ByVal MedexCode_1 As String, _
                                                             ByVal SubjectId_1 As String, _
                                                             ByVal Workspaceid_1 As String, _
                                                             ByVal Sampleid_1 As String, _
                                                             ByRef Sql_DataSet As Data.DataSet, _
                                                             ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = FromDate_1 + "##" + ToDate_1 + "##" + MedexGroupCode_1 + "##" + MedexCode_1 + "##" + SubjectId_1 + "##" + Workspaceid_1 + "##" + Sampleid_1 + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetSampleMedExDetailForApproval", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '==For LIMS 

#Region " Proc_ResultDetail "
    Public Function Proc_ResultDetail(ByVal FromDate_1 As String, _
                                                             ByVal ToDate_1 As String, _
                                                             ByVal MedexGroupCode_1 As String, _
                                                             ByVal MedexCode_1 As String, _
                                                             ByVal SubjectId_1 As String, _
                                                             ByVal Workspaceid_1 As String, _
                                                             ByVal Sampleid_1 As String, _
                                                             ByRef Sql_DataSet As Data.DataSet, _
                                                             ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = FromDate_1 + "##" + ToDate_1 + "##" + MedexGroupCode_1 + "##" + MedexCode_1 + "##" + SubjectId_1 + "##" + Workspaceid_1 + "##" + Sampleid_1 + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_ResultDetail", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '==For LIMS 

#Region "Get_LabKitSendReceiveDtl"
    Public Function Get_LabKitSendReceiveDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_LabKitSendReceiveDtl = Get_LabKitSendReceiveDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function Get_LabKitSendReceiveDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Get_LabKitSendReceiveDtl = ObjDtLogic.GetDataset("LabKitSendReceiveDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  ' == For LIMS

#Region "View_LabKitSampleInfo"
    Public Function View_LabKitSampleInfo(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_LabKitSampleInfo = View_LabKitSampleInfo(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_LabKitSampleInfo(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_LabKitSampleInfo = ObjDtLogic.GetDataset("View_LabKitSampleInfo", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  ' == For LIMS

#Region " Proc_CancelledLabKitSample "
    Public Function Proc_CancelledLabKitSample(ByVal Sampleid_1 As String, _
                                               ByVal ModifyBy_1 As String, _
                                               ByVal Remark As String, _
                                               ByRef eStr_Retu As String) As Boolean
        Try
            Dim ds As DataSet
            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = Sampleid_1 + "##" + ModifyBy_1 + "##" + Remark + "##"
            ds = ObjDtLogic.ProcedureExecute("Proc_CancelledLabKitSample", Param)

            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '==For LIMS 

#Region "View_LabKitSampleInfo"
    Public Function Get_SampleDetailHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_SampleDetailHistory = Get_SampleDetailHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function Get_SampleDetailHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            Get_SampleDetailHistory = ObjDtLogic.GetDataset("SampleDetailHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  ' == For LIMS

#Region "View_LabKitSendReceiveReport"
    Public Function View_LabKitSendReceiveReport(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_LabKitSendReceiveReport = View_LabKitSendReceiveReport(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_LabKitSendReceiveReport(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_LabKitSendReceiveReport = ObjDtLogic.GetDataset("View_LabKitSendReceiveReport", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  ' == For LIMS

#Region "view_LabKitSendSamples"
    Public Function view_LabKitSendSamples(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_LabKitSendSamples = view_LabKitSendSamples(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function view_LabKitSendSamples(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            view_LabKitSendSamples = ObjDtLogic.GetDataset("view_LabKitSendSamples", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  ' == For LIMS

#Region "view_LabKitBarcode"
    Public Function view_LabKitBarcode(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_LabKitBarcode = view_LabKitBarcode(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function view_LabKitBarcode(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            view_LabKitBarcode = ObjDtLogic.GetDataset("view_LabKitBarcode", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  ' == For LIMS

#Region "view_RptAddressGeneration"
    Public Function view_RptAddressGeneration(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_RptAddressGeneration = view_RptAddressGeneration(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function view_RptAddressGeneration(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            view_RptAddressGeneration = ObjDtLogic.GetDataset("view_RptAddressGeneration", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  ' == For LIMS

#Region "View_SampleMedexWithType"
    Public Function View_SampleMedexWithType(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SampleMedexWithType = View_SampleMedexWithType(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_SampleMedexWithType(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            View_SampleMedexWithType = ObjDtLogic.GetDataset("View_SampleMedexWithType", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  ' == For LIMS

#Region "get_LabKitDispatchmst"
    Public Function get_LabKitDispatchmst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            get_LabKitDispatchmst = get_LabKitDispatchmst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function get_LabKitDispatchmst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            get_LabKitDispatchmst = ObjDtLogic.GetDataset("LabKitDispatchmst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region  ' == For LIMS

#Region "view_LabKitDispatch"

    Public Function view_LabKitDispatch(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_LabKitDispatch = view_LabKitDispatch(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function view_LabKitDispatch(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            view_LabKitDispatch = ObjDtLogic.GetDataset("view_LabKitDispatch", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS

#Region "view_getCriticalMedexSamples"

    Public Function view_getCriticalMedexSamples(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_getCriticalMedexSamples = view_getCriticalMedexSamples(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function view_getCriticalMedexSamples(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            view_getCriticalMedexSamples = ObjDtLogic.GetDataset("view_getCriticalMedexSamples", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS

#Region " Proc_ResultDetail "
    Public Function Proc_CheckSampleHIVPositive(ByVal Sampleid_1 As String, _
                                                             ByRef Sql_DataSet As Data.DataSet, _
                                                             ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = Sampleid_1 + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_CheckSampleHIVPositive", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '==For LIMS 

#Region "Get_ViewSampleDetail_positive"
    Public Function Get_ViewSampleDetail_Positive(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            Get_ViewSampleDetail_Positive = Get_ViewSampleDetail_Positive(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function Get_ViewSampleDetail_Positive(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            Get_ViewSampleDetail_Positive = ObjDtLogic.GetDataset("View_SampleDetail_Positive", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region ' == For LIMS

#Region "View_RptMedexInfo_Positive"

    Public Function View_RptMedexInfo_Positive(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_RptMedexInfo_Positive = View_RptMedexInfo_Positive(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_RptMedexInfo_Positive(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_RptMedexInfo_Positive = ObjDtLogic.GetDataset("View_RptMedexInfo_Positive", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region ' == For LIMS

#Region "view_SampleRemarkGroup"

    Public Function view_SampleRemarkGroup(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_SampleRemarkGroup = view_SampleRemarkGroup(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function view_SampleRemarkGroup(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            view_SampleRemarkGroup = ObjDtLogic.GetDataset("view_SampleRemarkGroup", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region  ' == For LIMS

#Region " Proc_DataExport_CDM_New "
    Public Function Proc_DataExport_CDM_New(ByVal FromDate_1 As String, _
                                                             ByVal ToDate_1 As String, _
                                                             ByVal WorkSpaceId_1 As String, _
                                                             ByVal Period_1 As String, _
                                                             ByVal ActivityId_1 As String, _
                                                             ByVal MedexCode_1 As String, _
                                                             ByRef Sql_DataSet As Data.DataSet, _
                                                             ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = FromDate_1 + "##" + ToDate_1 + "##" + WorkSpaceId_1 + "##" + Period_1 + "##" + ActivityId_1 + "##" + MedexCode_1 + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_DataExport_CDM_New", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function

    Public Function Proc_DataExport_CDM_New_Sample(ByVal Sampleid_1 As String, _
                                                             ByRef Sql_DataSet As Data.DataSet, _
                                                             ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = Sampleid_1 + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_DataExport_CDM_New_Sample", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function

#End Region '==For LIMS 

#Region "View_LabKitDistributionReport"
    Public Function View_LabKitDistributionReport(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_LabKitDistributionReport = View_LabKitDistributionReport(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_LabKitDistributionReport(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_LabKitDistributionReport = ObjDtLogic.GetDataset("View_LabKitDistributionReport", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '======For LIMS[16-12-2011]

#Region "GetMedexResultCriticalRemarks"
    Public Function GetMedexResultCriticalRemarks(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMedexResultCriticalRemarks = GetMedexResultCriticalRemarks(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetMedexResultCriticalRemarks(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetMedexResultCriticalRemarks = ObjDtLogic.GetDataset("MedexResultCriticalRemarks", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '== For LIMS 01 March 2012

#Region "GetSampleUnlockDtl"
    Public Function GetSampleUnlockDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSampleUnlockDtl = GetSampleUnlockDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSampleUnlockDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSampleUnlockDtl = ObjDtLogic.GetDataset("SampleUnlockDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region '== For LIMS 01 March 2012


#Region "ScreenigTmpTable"


    Public Function getScreenigTmpTable(ByVal WhereCondition_1 As String, _
                                  ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                  ByRef Sql_DataSet As Data.DataSet, _
                                  ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getScreenigTmpTable = getScreenigTmpTable(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getScreenigTmpTable(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getScreenigTmpTable = ObjDtLogic.GetDataset("ScreenigTmpTable", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region '===============Added on 23-09-2011=============By Suhani

#Region " DeleteScreenigTmpTable"

    Public Function DeleteScreenigTmpTable(ByVal nMedExScreenNo As Integer, _
                                                 ByVal vSubjectID As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try

            qStr = "delete from  ScreenigTmpTable where nMedExScreenNo = " + nMedExScreenNo.ToString() + " and vSubjectID='" + vSubjectID + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function

#End Region '===============Added on 23-09-2011=============By Suhani

#Region "Proc_GetActivityStatusCount"
    Public Function Proc_GetActivityStatusCount(ByVal WorkSpaceId_1 As String, _
                                                   ByVal iPeriod As String, _
                                                        ByRef Sql_DataSet As Data.DataSet, _
                                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = WorkSpaceId_1 + "##" + iPeriod.ToString() + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetActivityStatusCount", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '=============Added on 27-09-2011 on request of Suhani=============


    '====================================================================================
    'Web Methods Related To BA Module
    '====================================================================================

#Region "GetFreezerMst"
    Public Function GetFreezerMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetFreezerMst = GetFreezerMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetFreezerMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetFreezerMst = ObjDtLogic.GetDataset("FreezerMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 17-Jan-2012=============

#Region "GetSampleGroupMst"
    Public Function GetSampleGroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSampleGroupMst = GetSampleGroupMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSampleGroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSampleGroupMst = ObjDtLogic.GetDataset("SampleGroupMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 17-Jan-2012=============

#Region "GetSampleStandardMst"
    Public Function GetSampleStandardMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSampleStandardMst = GetSampleStandardMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSampleStandardMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSampleStandardMst = ObjDtLogic.GetDataset("SampleStandardMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 17-Jan-2012=============

#Region "GetCentrifugationMachineMst"
    Public Function GetCentrifugationMachineMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetCentrifugationMachineMst = GetCentrifugationMachineMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetCentrifugationMachineMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetCentrifugationMachineMst = ObjDtLogic.GetDataset("CentrifugationMachineMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 17-Jan-2012=============

#Region "GetBagBatchMst"
    Public Function GetBagBatchMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetBagBatchMst = GetBagBatchMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetBagBatchMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBagBatchMst = ObjDtLogic.GetDataset("BagBatchMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 17-Jan-2012=============

#Region "GetSampleOperationMst"
    Public Function GetSampleOperationMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSampleOperationMst = GetSampleOperationMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSampleOperationMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSampleOperationMst = ObjDtLogic.GetDataset("SampleOperationMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 17-Jan-2012=============

#Region "GetSampleOperationReasonMst"
    Public Function GetSampleOperationReasonMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSampleOperationReasonMst = GetSampleOperationReasonMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSampleOperationReasonMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSampleOperationReasonMst = ObjDtLogic.GetDataset("SampleOperationReasonMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 17-Jan-2012=============

#Region "GetSampleCentrifugationDtl"
    Public Function GetSampleCentrifugationDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSampleCentrifugationDtl = GetSampleCentrifugationDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSampleCentrifugationDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSampleCentrifugationDtl = ObjDtLogic.GetDataset("SampleCentrifugationDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 17-Jan-2012=============

#Region "GetSampleSeparationDtl"
    Public Function GetSampleSeparationDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSampleSeparationDtl = GetSampleSeparationDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSampleSeparationDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSampleSeparationDtl = ObjDtLogic.GetDataset("SampleSeparationDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 17-Jan-2012=============

#Region "GetBagBatchDtl"
    Public Function GetBagBatchDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetBagBatchDtl = GetBagBatchDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetBagBatchDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBagBatchDtl = ObjDtLogic.GetDataset("BagBatchDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 17-Jan-2012=============

#Region "GetSampleOperationDtl"
    Public Function GetSampleOperationDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSampleOperationDtl = GetSampleOperationDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSampleOperationDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSampleOperationDtl = ObjDtLogic.GetDataset("SampleOperationDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 17-Jan-2012=============

#Region "GetSampleSendReceiveDtl"
    Public Function GetSampleSendReceiveDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSampleSendReceiveDtl = GetSampleSendReceiveDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSampleSendReceiveDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSampleSendReceiveDtl = ObjDtLogic.GetDataset("SampleSendReceiveDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 17-Jan-2012=============

#Region "GetCalibrationMst"
    Public Function GetCalibrationMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetCalibrationMst = GetCalibrationMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetCalibrationMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetCalibrationMst = ObjDtLogic.GetDataset("CalibrationMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 17-Jan-2012=============

#Region "View_FreezerMst"
    Public Function View_FreezerMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_FreezerMst = View_FreezerMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_FreezerMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_FreezerMst = ObjDtLogic.GetDataset("View_FreezerMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 17-Jan-2012=============

#Region "View_CentrifugationMachineMst"
    Public Function View_CentrifugationMachineMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_CentrifugationMachineMst = View_CentrifugationMachineMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_CentrifugationMachineMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_CentrifugationMachineMst = ObjDtLogic.GetDataset("View_CentrifugationMachineMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 17-Jan-2012=============

#Region "View_SampleGroupMst"
    Public Function View_SampleGroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SampleGroupMst = View_SampleGroupMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_SampleGroupMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SampleGroupMst = ObjDtLogic.GetDataset("View_SampleGroupMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 17-Jan-2012=============

#Region "View_CalibrationMst"
    Public Function View_CalibrationMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_CalibrationMst = View_CalibrationMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_CalibrationMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_CalibrationMst = ObjDtLogic.GetDataset("View_CalibrationMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 17-Jan-2012=============

#Region "View_SampleStandardMst"
    Public Function View_SampleStandardMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SampleStandardMst = View_SampleStandardMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_SampleStandardMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SampleStandardMst = ObjDtLogic.GetDataset("View_SampleStandardMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 17-Jan-2012=============

#Region "View_SampleOperationMst"
    Public Function View_SampleOperationMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SampleOperationMst = View_SampleOperationMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_SampleOperationMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SampleOperationMst = ObjDtLogic.GetDataset("View_SampleOperationMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 17-Jan-2012=============

#Region "View_SampleOperationReasonMst"
    Public Function View_SampleOperationReasonMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SampleOperationReasonMst = View_SampleOperationReasonMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_SampleOperationReasonMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SampleOperationReasonMst = ObjDtLogic.GetDataset("View_SampleOperationReasonMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 17-Jan-2012=============

#Region "View_BagBatchMst"
    Public Function View_BagBatchMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_BagBatchMst = View_BagBatchMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_BagBatchMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_BagBatchMst = ObjDtLogic.GetDataset("View_BagBatchMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 17-Jan-2012=============

#Region "View_SamplePickUpDetail"
    Public Function View_SamplePickUpDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SamplePickUpDetail = View_SamplePickUpDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_SamplePickUpDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SamplePickUpDetail = ObjDtLogic.GetDataset("View_SamplePickUpDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 18-Jan-2012=============

#Region "View_SampleCentrifugationDtl"
    Public Function View_SampleCentrifugationDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SampleCentrifugationDtl = View_SampleCentrifugationDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_SampleCentrifugationDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SampleCentrifugationDtl = ObjDtLogic.GetDataset("View_SampleCentrifugationDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 19-Jan-2012=============

#Region "View_SampleSeparationDtl"
    Public Function View_SampleSeparationDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SampleSeparationDtl = View_SampleSeparationDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_SampleSeparationDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SampleSeparationDtl = ObjDtLogic.GetDataset("View_SampleSeparationDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 21-Jan-2012=============

#Region "View_SampleSendReceiveDtl"
    Public Function View_SampleSendReceiveDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SampleSendReceiveDtl = View_SampleSendReceiveDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_SampleSendReceiveDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SampleSendReceiveDtl = ObjDtLogic.GetDataset("View_SampleSendReceiveDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 21-Jan-2012=============

#Region "View_SampleOperationDtl"
    Public Function View_SampleOperationDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SampleOperationDtl = View_SampleOperationDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_SampleOperationDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SampleOperationDtl = ObjDtLogic.GetDataset("View_SampleOperationDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 21-Jan-2012=============

#Region "View_BagBatchDtl"
    Public Function View_BagBatchDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_BagBatchDtl = View_BagBatchDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_BagBatchDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_BagBatchDtl = ObjDtLogic.GetDataset("View_BagBatchDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 29-Jan-2012=============

#Region "View_SampleSeparationDtl_WithBagDtl"
    Public Function View_SampleSeparationDtl_WithBagDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SampleSeparationDtl_WithBagDtl = View_SampleSeparationDtl_WithBagDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_SampleSeparationDtl_WithBagDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SampleSeparationDtl_WithBagDtl = ObjDtLogic.GetDataset("View_SampleSeparationDtl_WithBagDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 29-Jan-2012=============

#Region "View_SampleSeparationDtl_WithBatchDtl"
    Public Function View_SampleSeparationDtl_WithBatchDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SampleSeparationDtl_WithBatchDtl = View_SampleSeparationDtl_WithBatchDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_SampleSeparationDtl_WithBatchDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SampleSeparationDtl_WithBatchDtl = ObjDtLogic.GetDataset("View_SampleSeparationDtl_WithBatchDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 29-Jan-2012=============

#Region "View_MaxSampleOperationDtl"
    Public Function View_MaxSampleOperationDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_MaxSampleOperationDtl = View_MaxSampleOperationDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_MaxSampleOperationDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_MaxSampleOperationDtl = ObjDtLogic.GetDataset("View_MaxSampleOperationDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 2-Feb-2012=============

#Region "View_SampleCentrifugationDtl_Audit"
    Public Function View_SampleCentrifugationDtl_Audit(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SampleCentrifugationDtl_Audit = View_SampleCentrifugationDtl_Audit(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_SampleCentrifugationDtl_Audit(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SampleCentrifugationDtl_Audit = ObjDtLogic.GetDataset("View_SampleCentrifugationDtl_Audit", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 12-Mar-2012=============

#Region "View_Listingreport_BA"
    Public Function View_Listingreport_BA(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_Listingreport_BA = View_Listingreport_BA(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_Listingreport_BA(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_Listingreport_BA = ObjDtLogic.GetDataset("View_Listingreport_BA", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 13-Mar-2012 by Mrunal=============


#Region "View_SampleSeparationDtl_WithCCDtl"
    Public Function View_SampleSeparationDtl_WithCCDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SampleSeparationDtl_WithCCDtl = View_SampleSeparationDtl_WithCCDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_SampleSeparationDtl_WithCCDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SampleSeparationDtl_WithCCDtl = ObjDtLogic.GetDataset("View_SampleSeparationDtl_WithCCDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 19-Mar-2012=============

#Region "GetGeneralRemarksmst"
    Public Function GetGeneralRemarksmst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetGeneralRemarksmst = GetGeneralRemarksmst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetGeneralRemarksmst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetGeneralRemarksmst = ObjDtLogic.GetDataset("GeneralRemarksMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 23-Mar-2012=============

#Region "View_SampleDiscard"
    Public Function View_SampleDiscard(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SampleDiscard = View_SampleDiscard(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_SampleDiscard(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SampleDiscard = ObjDtLogic.GetDataset("View_SampleDiscard", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 23-Mar-2012 by Mrunal=============

#Region "View_GeneralRemarks"
    Public Function View_GeneralRemarks(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_GeneralRemarks = View_GeneralRemarks(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_GeneralRemarks(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_GeneralRemarks = ObjDtLogic.GetDataset("View_GeneralRemarks", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 17-Jan-2012===========

#Region "GetBA_DocumentAttachmst"
    Public Function GetBA_DocumentAttachmst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetBA_DocumentAttachmst = GetBA_DocumentAttachmst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetBA_DocumentAttachmst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBA_DocumentAttachmst = ObjDtLogic.GetDataset("BA_DocumentAttachmst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 24-Mar-2012 by Mrunal=============

#Region "View_BA_DocumentAttachmst"
    Public Function View_BA_DocumentAttachmst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_BA_DocumentAttachmst = View_BA_DocumentAttachmst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_BA_DocumentAttachmst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_BA_DocumentAttachmst = ObjDtLogic.GetDataset("View_BA_DocumentAttachmst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 24-Mar-2012 by Mrunal=============

#Region "GetCCSampleRetrievalMst"
    Public Function GetCCSampleRetrievalMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetCCSampleRetrievalMst = GetCCSampleRetrievalMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetCCSampleRetrievalMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetCCSampleRetrievalMst = ObjDtLogic.GetDataset("CCSampleRetrievalMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region  '===============Added on 30-Mar-2012 =============

#Region "View_CCSampleRetrievalMst"
    Public Function View_CCSampleRetrievalMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_CCSampleRetrievalMst = View_CCSampleRetrievalMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_CCSampleRetrievalMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_CCSampleRetrievalMst = ObjDtLogic.GetDataset("View_CCSampleRetrievalMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 04-Apr-2012 by Mrunal=============

#Region "view_MaxCCSampleOperationDtl"
    Public Function view_MaxCCSampleOperationDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_MaxCCSampleOperationDtl = view_MaxCCSampleOperationDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function view_MaxCCSampleOperationDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            view_MaxCCSampleOperationDtl = ObjDtLogic.GetDataset("view_MaxCCSampleOperationDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 09-Apr-2012 by Mrunal=============

#Region "View_CCBagLabel"
    Public Function View_CCBagLabel(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_CCBagLabel = View_CCBagLabel(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_CCBagLabel(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_CCBagLabel = ObjDtLogic.GetDataset("View_CCBagLabel", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region    '===============Added on 09-Apr-2012=============

#Region "View_QCBagLabel"
    Public Function View_QCBagLabel(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_QCBagLabel = View_QCBagLabel(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_QCBagLabel(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_QCBagLabel = ObjDtLogic.GetDataset("View_QCBagLabel", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region    '===============Added on 09-Apr-2012=============

#Region "GetCCSampleRetrievalMstHistory"
    Public Function GetCCSampleRetrievalMstHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetCCSampleRetrievalMstHistory = GetCCSampleRetrievalMstHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetCCSampleRetrievalMstHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetCCSampleRetrievalMstHistory = ObjDtLogic.GetDataset("CCSampleRetrievalMstHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region  '===============Added on 16-Apr-2012 By Mrunal=============

#Region "View_CCSampleRetrievalMstHistory"
    Public Function View_CCSampleRetrievalMstHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_CCSampleRetrievalMstHistory = View_CCSampleRetrievalMstHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_CCSampleRetrievalMstHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_CCSampleRetrievalMstHistory = ObjDtLogic.GetDataset("View_CCSampleRetrievalMstHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region    '===============Added on 16-Apr-2012 By Mrunal=============

#Region " Proc_OTBagLabel "
    Public Function Proc_OTBagLabel(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_OTBagLabel", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '===============Added on 11-May-2012 by Mrunal=============

#Region "View_BagBatchMst_CDCAudit"
    Public Function View_BagBatchMst_CDCAudit(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_BagBatchMst_CDCAudit = View_BagBatchMst_CDCAudit(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_BagBatchMst_CDCAudit(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_BagBatchMst_CDCAudit = ObjDtLogic.GetDataset("View_BagBatchMst_CDCAudit", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region    '===============Added on 14-May-2012 By Mrunal=============

#Region "GetWinNonlin_DocumentAttachMst"
    Public Function GetWinNonlin_DocumentAttachMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetWinNonlin_DocumentAttachMst = GetWinNonlin_DocumentAttachMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetWinNonlin_DocumentAttachMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetWinNonlin_DocumentAttachMst = ObjDtLogic.GetDataset("WinNonlin_DocumentAttachMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 24-May-2012 by Mrunal=============

#Region "View_WinNonlin_DocumentAttachMst"
    Public Function View_WinNonlin_DocumentAttachMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_WinNonlin_DocumentAttachMst = View_WinNonlin_DocumentAttachMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_WinNonlin_DocumentAttachMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_WinNonlin_DocumentAttachMst = ObjDtLogic.GetDataset("View_WinNonlin_DocumentAttachMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 24-May-2012 by Mrunal=============

#Region "Proc_CRFHdrDtlSubDtl_Edit"
    Public Function Proc_CRFHdrDtlSubDtl_Edit(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_CRFHdrDtlSubDtl_Edit", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '==== added by Megha on 08-06-2012

#Region "Proc_CRFHdrDtlSubDtl_Archive"
    Public Function Proc_CRFHdrDtlSubDtl_Archive(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_CRFHdrDtlSubDtl_Archive", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '==== added by Megha on 11-06-2012

#Region "Proc_SubjectLabReportDtl_Audit "
    Public Function Proc_SubjectLabReportDtl_Audit(ByVal Parameters As String, _
                                                    ByRef Sql_DataSet As Data.DataSet, _
                                                    ByRef eStr_Retu As String) As Boolean
        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_SubjectLabReportDtl_Audit", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '=============Added on 20-06-2012 by Megha =============

#Region "Proc_SampleDetail"
    Public Function Proc_SampleDetail(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_SampleDetail", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '==== added by Megha on 20-06-2012

#Region "Proc_SubjectLabRptDtl"
    Public Function Proc_SubjectLabRptDtl(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_SubjectLabRptDtl", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '==== added by Megha on 20-06-2012

#Region "view_ArchiveProjectList"
    Public Function view_ArchiveProjectList(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "vRequestId  + vProjectNo " + " Like '%"
        whereCondition += prefixText + "%'" + IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), "")
        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("view_ArchiveProjectList", " * ", _
            whereCondition, ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vWorkspaceid").ToString + "#" + dr.Item("vProjectNo").ToString + "#" + dr.Item("vRequestId").ToString() + "#" + dr.Item("vSchemaId").ToString() + "#" + dr.Item("cArchivedFlag").ToString() + "#" + dr.Item("cArchiveForLabData").ToString())
        Next index

        Return items.ToArray()
    End Function
#End Region '====added by Megha

    'Created For:Archive Module=====
    'Created By:Vikas shah=========

#Region "Proc_Schema"

    Public Function Proc_Schema(ByVal vCurrentyear As String, _
                                    ByRef Sql_DataSet As Data.DataSet, _
                                    ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            qStr = "Proc_Schema '" + vCurrentyear + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr, 180)
            'Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "getSchema"
    Public Function getSchema(ByVal WhereCondition_1 As String, _
                             ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                             ByRef Sql_DataSet As Data.DataSet, _
                             ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getSchema = getSchema(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getSchema(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getSchema = ObjDtLogic.GetDataset("sys.schemas", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "view_ArchiveProjectAuditTrail"
    Public Function view_ArchiveProjectAuditTrail(ByVal WhereCondition_1 As String, _
                             ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                             ByRef Sql_DataSet As Data.DataSet, _
                             ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_ArchiveProjectAuditTrail = view_ArchiveProjectAuditTrail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function view_ArchiveProjectAuditTrail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            view_ArchiveProjectAuditTrail = ObjDtLogic.GetDataset("view_ArchiveProjectAuditTrail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "view_ArchiveProjectMst"
    Public Function view_ArchiveProjectMst(ByVal WhereCondition_1 As String, _
                             ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                             ByRef Sql_DataSet As Data.DataSet, _
                             ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_ArchiveProjectMst = view_ArchiveProjectMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function view_ArchiveProjectMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            view_ArchiveProjectMst = ObjDtLogic.GetDataset("view_ArchiveProjectMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "getWorkspaceDetail"
    Public Function getWorkspaceDetail(ByVal WhereCondition_1 As String, _
                             ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                             ByRef Sql_DataSet As Data.DataSet, _
                             ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getWorkspaceDetail = getWorkspaceDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getWorkspaceDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getWorkspaceDetail = ObjDtLogic.GetDataset("WorkSpaceMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetArchieveDetail"

    Public Function GetArchieveDetail(ByVal WhereCondition_1 As String, _
                                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                               ByRef Sql_DataSet As Data.DataSet, _
                                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetArchieveDetail = GetArchieveDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetArchieveDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetArchieveDetail = ObjDtLogic.GetDataset("ArchiveProjectMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "proc_MedexScreeningHdrDtlAuditTrail"
    Public Function proc_MedexScreeningHdrDtlAuditTrail(ByVal vSubjectId As String, _
                                                ByVal vMedexScreeningHdrNo As String, _
                                                ByVal vMedexCode As String, _
                                                ByVal vSchema As String, _
                                                ByRef Sql_DataSet As Data.DataSet, _
                                                ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            qStr = "proc_MedexScreeningHdrDtlAuditTrail '" + vSubjectId.Trim() + "'," + vMedexScreeningHdrNo + ",'" + vMedexCode + "'," + vSchema.Trim()
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region "proc_medexscreeninghdrdtl"
    Public Function proc_medexscreeninghdrdtl(ByVal vSubjectId As String, _
                                                ByVal dScreendate As String, _
                                                ByVal vSchema As String, _
                                                ByRef Sql_DataSet As Data.DataSet, _
                                                ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            qStr = "proc_medexscreeninghdrdtl '" + vSubjectId.Trim() + "','" + dScreendate.Trim() + "'," + vSchema.Trim()
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region "Proc_GetTotalSubjectForNode" '==== added by Megha on 4-07-2012
    Public Function Proc_GetTotalSubjectForNode(ByVal Parameters As String, _
        ByRef sql_DataSet As Data.DataSet, _
        ByRef estr_Retu As String) As Boolean

        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetTotalSubjectForNode", Parameters)
            Return True

        Catch ex As Exception
            estr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "Proc_GetTotalSubjectForNode_Archive"
    Public Function Proc_GetTotalSubjectForNode_Archive(ByVal Parameters As String, _
        ByRef sql_DataSet As Data.DataSet, _
        ByRef estr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetTotalSubjectForNode_Archive", Parameters)
            Return True
        Catch ex As Exception
            estr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '===Added By:VIkas Shah(12-07-2012)For Archive Monitor=====

#Region " Proc_GetNodeWithSubjectCount_Archive "
    Public Function Proc_GetNodeWithSubjectCount_Archive(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetNodeWithSubjectCount_Archive", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '===============Added on 12-07-2012 by vikas=============

#Region " proc_TotalEnterSubject_Archive  "
    Public Function proc_TotalEnterSubject_Archive(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("proc_TotalEnterSubject_Archive ", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '===============Added on 12-07-2012 by Megha=============

#Region "CRFVersion "

#Region " Proc_cdc_dbo_CRFVersionMst_CT  "
    Public Function Proc_cdc_dbo_CRFVersionMst_CT(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_cdc_dbo_CRFVersionMst_CT ", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '===============Added by Megha=============

#Region "GetCrfVersionProjectList"
    Public Function GetCrfVersionProjectList(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()
        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()
        If count = 0 Then
            count = 10
        End If
        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "vRequestId  + vProjectNo " + " Like '%"
        whereCondition += prefixText + "%'" + IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), "")
        ''whereCondition += " AND  (CASE WHEN  cIsTrainingAssign <> 'Y' THEN 1 ELSE   CASE WHEN  vTrainingFinished = 'YES' THEN 1 ELSE 0 END   END ) =1  AND (CASE WHEN  cIsTrainingAssign = 'Y' THEN 1 ELSE  CASE WHEN vTrainingFinished = 'No' THEN 1 END END ) =1 "
        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("view_CrfVersionProjectList", " * ", _
            whereCondition, ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vWorkSpaceId").ToString + "#" + dr.Item("vProjectNo").ToString + "#" + dr.Item("vRequestId").ToString() + "#" + dr.Item("nVersionNo").ToString() + "#" + dr.Item("cFreezeStatus").ToString() + "#" + dr.Item("dFreezedDate").ToString + "#" + dr.Item("vClientName").ToString + "'")
        Next

        Return items.ToArray()
    End Function
#End Region

#Region "GetProjectForTrainingGuideline"
    Public Function GetProjectForTrainingGuideline(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()
        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()
        If count = 0 Then
            count = 10
        End If
        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "vRequestId  + vProjectNo " + " Like '%"
        whereCondition += prefixText + "%'" + IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), "")
        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("view_GetTrainingGuidelineProject", " * ", _
            whereCondition, ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vWorkSpaceId").ToString + "#" + dr.Item("vProjectNo").ToString() + "#" + dr.Item("vRequestId").ToString() + "#" + "'")
        Next

        Return items.ToArray()
    End Function
#End Region

#Region " Proc_ActivityWiseVersionControl  "
    Public Function Proc_ActivityWiseVersionControl(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_ActivityWiseVersionControl ", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '===============Added by Megha=============

#Region " Proc_AttributeWiseVersionControl  "
    Public Function Proc_AttributeWiseVersionControl(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_AttributeWiseVersionControl ", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '===============Added by Megha=============



#End Region

#Region " Proc_SubjectWiseVersionDtls  "
    Public Function Proc_SubjectWiseVersionDtls(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_SubjectWiseVersionDtls ", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '===============Added by 

    '=====================Added for Reports in desktop Application for BA module=============

#Region "Proc__GetStoragedBagDetail1"
    Public Function Proc__GetStoragedBagDetail1(ByVal Parameters As String, _
                                                ByRef Sql_DataSet As Data.DataSet, _
                                                ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc__GetStoragedBagDetail1", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try

    End Function
#End Region
#Region "Proc_GetSamplePickupDetail"
    Public Function Proc_GetSamplePickupDetail(ByVal Parameters As String, _
                                                ByRef Sql_DataSet As Data.DataSet, _
                                                ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetSamplePickupDetail", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try

    End Function
#End Region
#Region "Proc_GetHemolysedSampleDtl"
    Public Function Proc_GetHemolysedSampleDtl(ByVal Parameters As String, _
                                                ByRef Sql_DataSet As Data.DataSet, _
                                                ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetHemolysedSampleDtl", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try

    End Function
#End Region
#Region "Proc_GetSampleVerificationDtl"
    Public Function Proc_GetSampleVerificationDtl(ByVal Parameters As String, _
                                                ByRef Sql_DataSet As Data.DataSet, _
                                                ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetSampleVerificationDtl", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try

    End Function
#End Region
#Region "Proc_GetSampleCentrifugationDtl2"
    Public Function Proc_GetSampleCentrifugationDtl2(ByVal Parameters As String, _
                                                ByRef Sql_DataSet As Data.DataSet, _
                                                ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetSampleCentrifugationDtl2", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try

    End Function
#End Region
    '#Region "Proc_GetMissingSampleDtl"
    '    Public Function Proc_GetMissingSampleDtl(ByVal Parameters As String, _
    '                                                ByRef Sql_DataSet As Data.DataSet, _
    '                                                ByRef eStr_Retu As String) As Boolean

    '        Try
    '            Dim ObjDtLogic As New ClsDataLogic_New
    '            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetMissingSampleDtl", Parameters)
    '            Return True
    '        Catch ex As Exception
    '            eStr_Retu = ex.Message
    '            Return False
    '        End Try
    '    End Function
    '#End Region
#Region "Proc_GetFreezerStatusLogBookNew"
    Public Function Proc_GetFreezerStatusLogBookNew(ByVal Parameters As String, _
                                                ByRef Sql_DataSet As Data.DataSet, _
                                                ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetFreezerStatusLogBookNew", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region
#Region "Proc_GetSampleReplacedDtl"
    Public Function Proc_GetSampleReplacedDtl(ByVal Parameters As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetSampleReplacedDtl", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region
#Region "Proc_GetVerificationDtl"
    Public Function Proc_GetVerificationDtl(ByVal Parameters As String, _
                                            ByRef Sql_DataSet As Data.DataSet, _
                                            ByRef eStr_Retu As String) As Boolean
        Try
            Dim ObjDtlogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtlogic.ProcedureExecute("Proc_GetVerificationDtl", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region
#Region "Proc_GetSampleCentrifugationDtlFromCentrifugeId"
    Public Function Proc_GetSampleCentrifugationDtlFromCentrifugeId(ByVal Parameters As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetSampleCentrifugationDtlFromCentrifugeId", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region
#Region "Proc_GetSampleCentrifugationDtlFromProject"
    Public Function Proc_GetSampleCentrifugationDtlFromProject(ByVal Parameters As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetSampleCentrifugationDtlFromProject", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region
#Region "Proc_GetFreezerLogSheet"
    Public Function Proc_GetFreezerLogSheet(ByVal Parameters As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetFreezerLogSheet", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "Proc_GetFreezerLogSheet"
    Public Function Proc_GetMissingSampleDtl(ByVal Parameters As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetMissingSampleDtl", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "Proc_getFreezerstatusLogBook_NEW"
    Public Function Proc_getFreezerstatusLogBook_NEW(ByVal Parameters As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_getFreezerstatusLogBook_NEW", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "Proc_FreezerLogSheet_New"
    Public Function Proc_FreezerLogSheet_New(ByVal Parameters As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_FreezerLogSheet_New", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

    '=====================================================================================
    '===============Added on 24-09-2012 by Nidhi=============

#Region "GetScreeningTemplateHdr"
    Public Function GetScreeningTemplateHdr(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetScreeningTemplateHdr = GetScreeningTemplateHdr(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
            GetScreeningTemplateHdr = False
        End Try

    End Function
    Friend Function GetScreeningTemplateHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetScreeningTemplateHdr = ObjDtLogic.GetDataset("ScreeningTemplateHdr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
            GetScreeningTemplateHdr = False
        End Try

    End Function
#End Region

#Region "GetScreeningTemplateDtl"
    Public Function GetScreeningTemplateDtl(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetScreeningTemplateDtl = GetScreeningTemplateDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetScreeningTemplateDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetScreeningTemplateDtl = ObjDtLogic.GetDataset("ScreeningTemplateDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetSubjectScreeningTemplate"
    Public Function GetSubjectScreeningTemplate(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSubjectScreeningTemplate = GetSubjectScreeningTemplate(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSubjectScreeningTemplate(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSubjectScreeningTemplate = ObjDtLogic.GetDataset("SubjectScreeningTemplate", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "getViewScreeningTemplateHdrDtl"
    Public Function getViewScreeningTemplateHdrDtl(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getViewScreeningTemplateHdrDtl = getViewScreeningTemplateHdrDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function getViewScreeningTemplateHdrDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getViewScreeningTemplateHdrDtl = ObjDtLogic.GetDataset("View_ScreeningTemplateHdrDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetViewScreeningTemplateDtl"
    Public Function GetViewScreeningTemplateDtl(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewScreeningTemplateDtl = GetViewScreeningTemplateDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewScreeningTemplateDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewScreeningTemplateDtl = ObjDtLogic.GetDataset("View_ScreeningTemplateDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "View_ScreeningTemplateHdrDtlAuditTrail "
    Public Function View_ScreeningTemplateHdrDtlAuditTrail(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_ScreeningTemplateHdrDtlAuditTrail = View_ScreeningTemplateHdrDtlAuditTrail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_ScreeningTemplateHdrDtlAuditTrail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_ScreeningTemplateHdrDtlAuditTrail = ObjDtLogic.GetDataset("View_ScreeningTemplateHdrDtlAuditTrail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "GetBASampleFinalResults"
    Public Function GetBASampleFinalResults(ByVal WhereCondition_1 As String, _
                                            ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                            ByRef Sql_DataSet As Data.DataSet, _
                                            ByRef eStr_Retu As String) As Boolean

        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetBASampleFinalResults = GetBASampleFinalResults(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
            GetBASampleFinalResults = False
        End Try

    End Function

    Friend Function GetBASampleFinalResults(ByVal WhereCondition_1 As String, _
                                           ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                           ByVal ObjDtLogic As ClsDataLogic_New, _
                                           ByRef Sql_DtTbl As Data.DataTable, _
                                           ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBASampleFinalResults = ObjDtLogic.GetDataset("View_BASampleFinalResults", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
            GetBASampleFinalResults = False
        End Try
    End Function
#End Region   '===============Added on 10-Oct-2012 by Pundarik=============

#Region "View_subjectLocation "
    Public Function View_subjectLocation(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_subjectLocation = View_subjectLocation(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_subjectLocation(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_subjectLocation = ObjDtLogic.GetDataset("View_subjectLocation", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "view_PDsampledetail "
    Public Function view_PDsampledetail(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_PDsampledetail = view_PDsampledetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function view_PDsampledetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            view_PDsampledetail = ObjDtLogic.GetDataset("view_PDsampledetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "View_SubjectForCRFActivityStatusReport "
    Public Function View_SubjectForCRFActivityStatusReport(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SubjectForCRFActivityStatusReport = View_SubjectForCRFActivityStatusReport(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_SubjectForCRFActivityStatusReport(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SubjectForCRFActivityStatusReport = ObjDtLogic.GetDataset("View_SubjectForCRFActivityStatusReport", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "Proc_ScreeningDetailsInPivotForm"
    Public Function Proc_ScreeningDetailsInPivotForm(ByVal Parameters As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_ScreeningDetailsInPivotForm", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "view_workspaceprotocoldetail "
    Public Function view_workspaceprotocoldetail(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_workspaceprotocoldetail = view_workspaceprotocoldetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function view_workspaceprotocoldetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            view_workspaceprotocoldetail = ObjDtLogic.GetDataset("view_workspaceprotocoldetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "Proc_ParentActivity" '==== added by Megha on 17-NOV-2012
    Public Function Proc_ParentActivity(ByVal Parameters As String, _
        ByRef sql_DataSet As Data.DataSet, _
        ByRef estr_Retu As String) As Boolean

        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_ParentActivity", Parameters)
            Return True

        Catch ex As Exception
            estr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "Proc_GetSampleSeparationDtl"
    Public Function Proc_GetSampleSeparationDtl(ByVal Parameters As String, _
        ByRef sql_DataSet As Data.DataSet, _
        ByRef estr_Retu As String) As Boolean

        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetSampleSeparationDtl", Parameters)
            Return True

        Catch ex As Exception
            estr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "Proc_Samplesendreceivedtl"
    Public Function Proc_Samplesendreceivedtl(ByVal Parameters As String, _
        ByRef sql_DataSet As Data.DataSet, _
        ByRef estr_Retu As String) As Boolean

        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_Samplesendreceivedtl", Parameters)
            Return True

        Catch ex As Exception
            estr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "Proc_GetSampleVerificationForBioAnalytical"
    Public Function Proc_GetSampleVerificationForBioAnalytical(ByVal Parameters As String, _
        ByRef sql_DataSet As Data.DataSet, _
        ByRef estr_Retu As String) As Boolean

        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetSampleVerificationForBioAnalytical", Parameters)
            Return True

        Catch ex As Exception
            estr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region " GetWorkspaceScreeningHdr "
    Public Function GetWorkspaceScreeningHdr(ByVal WhereCondition_1 As String, _
                                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                               ByRef Sql_DataSet As Data.DataSet, _
                                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetWorkspaceScreeningHdr = GetWorkspaceScreeningHdr(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetWorkspaceScreeningHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetWorkspaceScreeningHdr = ObjDtLogic.GetDataset("WorkspaceScreeningHdr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region ' Added by Megha 1-5-2013

#Region " GetWorkspaceScreeningDtl "
    Public Function GetWorkspaceScreeningDtl(ByVal WhereCondition_1 As String, _
                                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                               ByRef Sql_DataSet As Data.DataSet, _
                                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetWorkspaceScreeningDtl = GetWorkspaceScreeningDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetWorkspaceScreeningDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetWorkspaceScreeningDtl = ObjDtLogic.GetDataset("WorkspaceScreeningDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region ' Added by Megha 1-5-2013

#Region " View_WorkspaceScreeningHdrDtl "
    Public Function View_WorkspaceScreeningHdrDtl(ByVal WhereCondition_1 As String, _
                                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                               ByRef Sql_DataSet As Data.DataSet, _
                                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_WorkspaceScreeningHdrDtl = View_WorkspaceScreeningHdrDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_WorkspaceScreeningHdrDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_WorkspaceScreeningHdrDtl = ObjDtLogic.GetDataset("View_WorkspaceScreeningHdrDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region ' Added by Megha 1-7-2013

#Region " View_GeneralScreeningHdrDtl "
    Public Function View_GeneralScreeningHdrDtl(ByVal WhereCondition_1 As String, _
                                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                               ByRef Sql_DataSet As Data.DataSet, _
                                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_GeneralScreeningHdrDtl = View_GeneralScreeningHdrDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_GeneralScreeningHdrDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_GeneralScreeningHdrDtl = ObjDtLogic.GetDataset("View_GeneralScreeningHdrDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region ' Added by Megha 1-7-2013 

#Region "GetMedExWorkSpaceScreeningHdr"
    Public Function GetMedExWorkSpaceScreeningHdr(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMedExWorkSpaceScreeningHdr = GetMedExWorkSpaceScreeningHdr(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetMedExWorkSpaceScreeningHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetMedExWorkSpaceScreeningHdr = ObjDtLogic.GetDataset("MedExWorkSpaceScreeningHdr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region ' Added by Nidhi 1-7-2013 

#Region "GetMedExWorkSpaceScreeningDtl"
    Public Function GetMedExWorkSpaceScreeningDtl(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMedExWorkSpaceScreeningDtl = GetMedExWorkSpaceScreeningDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetMedExWorkSpaceScreeningDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetMedExWorkSpaceScreeningDtl = ObjDtLogic.GetDataset("MedExWorkSpaceScreeningDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region ' Added by Nidhi 1-7-2013 

#Region "GetMyProjectCompletionListForProjectSpecificScreening"
    Public Function GetMyProjectCompletionListForProjectSpScr(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        '====Changed on 10-10-2011 by Mrunal Parekh
        Dim whereCondition As String = "vRequestId  + vProjectNo " + " Like '%"
        whereCondition += prefixText + "%'" + IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), "")
        ''whereCondition += " AND  (CASE WHEN  cIsTrainingAssign <> 'Y' THEN 1 ELSE   CASE WHEN  vTrainingFinished = 'YES' THEN 1 ELSE 0 END   END ) =1  AND (CASE WHEN  cIsTrainingAssign = 'Y' THEN 1 ELSE  CASE WHEN vTrainingFinished = 'No' THEN 1 END END ) =1 "
        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_MyProjects_ProjectSpecificScreening", " * ", _
            whereCondition, ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vWorkspaceid").ToString + "#" + dr.Item("vProjectNo").ToString + "#" + dr.Item("vRequestId").ToString() + "#" + dr.Item("vClientName").ToString() + "'")
        Next
        Return items.ToArray()
    End Function
#End Region ' Added by Megha 1-11-2013 


#Region "Proc_GetSampleofCC"
    Public Function Proc_GetSampleofCC(ByVal Parameters As String, _
        ByRef sql_DataSet As Data.DataSet, _
        ByRef estr_Retu As String) As Boolean

        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetSampleofCC", Parameters)
            Return True

        Catch ex As Exception
            estr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "Proc_GetSampleofQC"
    Public Function Proc_GetSampleofQC(ByVal Parameters As String, _
        ByRef sql_DataSet As Data.DataSet, _
        ByRef estr_Retu As String) As Boolean

        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetSampleofQC", Parameters)
            Return True

        Catch ex As Exception
            estr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "Proc_GetSampleofOther"
    Public Function Proc_GetSampleofOther(ByVal Parameters As String, _
        ByRef sql_DataSet As Data.DataSet, _
        ByRef estr_Retu As String) As Boolean

        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetSampleofOther", Parameters)
            Return True

        Catch ex As Exception
            estr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "GetBASubProjects"
    Public Function GetBASubProjects(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "vSubProjectName " + " Like '%"
        whereCondition += prefixText + "%'" + IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), "")
        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_BASubProjects", " * ", _
            whereCondition, ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("nBAchildProjectsNo").ToString + "#" + dr.Item("vSubProjectName").ToString + _
                "#" + dr.Item("ProjectAnalytes").ToString)



        Next

        Return items.ToArray()
    End Function
#End Region ''Added by akhilesh


#Region "Proc_CRFTermCode"
    Public Function Proc_CRFTermCode(ByVal Param As String, ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_CRFTermCode", Param)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region


#Region "VIEW_ODMStatusReport"

    Public Function VIEW_ODMStatusReport(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            VIEW_ODMStatusReport = VIEW_ODMStatusReport(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function VIEW_ODMStatusReport(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            VIEW_ODMStatusReport = ObjDtLogic.GetDataset("VIEW_ODMStatusReport", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region '===============Added on 09-04-2013 by Anuj=============


    '=======================================================================================
    'Added by Vimal Ghoniya For CDMS
    '=======================================================================================

#Region " getMedicalConditionsList "

    Public Function getMedicalConditionsList(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getMedicalConditionsList = getMedicalConditionsList(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getMedicalConditionsList(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getMedicalConditionsList = ObjDtLogic.GetDataset("CodeMedicalConditions", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " getSubjectDtlCDMSMedicalCondition "

    Public Function getSubjectDtlCDMSMedicalCondition(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getSubjectDtlCDMSMedicalCondition = getSubjectDtlCDMSMedicalCondition(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getSubjectDtlCDMSMedicalCondition(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getSubjectDtlCDMSMedicalCondition = ObjDtLogic.GetDataset("SubjectDtlCDMSMedicalCondition", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " getSubjectDtlCDMS "

    Public Function getSubjectDtlCDMS(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getSubjectDtlCDMS = getSubjectDtlCDMS(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getSubjectDtlCDMS(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getSubjectDtlCDMS = ObjDtLogic.GetDataset("SubjectDtlCDMS", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " getSubjectDtlCDMSHistory "

    Public Function getSubjectDtlCDMSHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getSubjectDtlCDMSHistory = getSubjectDtlCDMSHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getSubjectDtlCDMSHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getSubjectDtlCDMSHistory = ObjDtLogic.GetDataset("SubjectDtlCDMSHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " getSubjectDtlCDMSConsumption "

    Public Function getSubjectDtlCDMSConsumption(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getSubjectDtlCDMSConsumption = getSubjectDtlCDMSConsumption(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getSubjectDtlCDMSConsumption(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getSubjectDtlCDMSConsumption = ObjDtLogic.GetDataset("SubjectDtlCDMSConsumption", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " getMedicalConditionsList "

    Public Function getCodeConcoMedicationList(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getCodeConcoMedicationList = getCodeConcoMedicationList(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getCodeConcoMedicationList(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getCodeConcoMedicationList = ObjDtLogic.GetDataset("CodeConcoMedication", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " getSubjectDtlCDMSConcoMedication "

    Public Function getSubjectDtlCDMSConcoMedication(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getSubjectDtlCDMSConcoMedication = getSubjectDtlCDMSConcoMedication(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getSubjectDtlCDMSConcoMedication(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getSubjectDtlCDMSConcoMedication = ObjDtLogic.GetDataset("SubjectDtlCDMSConcoMedication", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " View_AuditSubjectDtlCDMS "

    Public Function View_AuditSubjectDtlCDMS(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_AuditSubjectDtlCDMS = View_AuditSubjectDtlCDMS(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_AuditSubjectDtlCDMS(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_AuditSubjectDtlCDMS = ObjDtLogic.GetDataset("View_AuditSubjectDtlCDMS", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " View_AuditSubjectDtlCDMSMedicalCondition "

    Public Function View_AuditSubjectDtlCDMSMedicalCondition(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_AuditSubjectDtlCDMSMedicalCondition = View_AuditSubjectDtlCDMSMedicalCondition(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_AuditSubjectDtlCDMSMedicalCondition(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_AuditSubjectDtlCDMSMedicalCondition = ObjDtLogic.GetDataset("View_AuditSubjectDtlCDMSMedicalCondition", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " View_AuditSubjectDtlCDMSConcoMedication "

    Public Function View_AuditSubjectDtlCDMSConcoMedication(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_AuditSubjectDtlCDMSConcoMedication = View_AuditSubjectDtlCDMSConcoMedication(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_AuditSubjectDtlCDMSConcoMedication(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_AuditSubjectDtlCDMSConcoMedication = ObjDtLogic.GetDataset("View_AuditSubjectDtlCDMSConcoMedication", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " View_AuditProjectDtlCDMSConcoMedication "

    Public Function View_AuditProjectDtlCDMSConcoMedication(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_AuditProjectDtlCDMSConcoMedication = View_AuditProjectDtlCDMSConcoMedication(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_AuditProjectDtlCDMSConcoMedication(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_AuditProjectDtlCDMSConcoMedication = ObjDtLogic.GetDataset("View_AuditProjectDtlCDMSConcoMedication", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " View_AuditProjectDtlCDMSMedicalCondition "

    Public Function View_AuditProjectDtlCDMSMedicalCondition(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_AuditProjectDtlCDMSMedicalCondition = View_AuditProjectDtlCDMSMedicalCondition(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_AuditProjectDtlCDMSMedicalCondition(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_AuditProjectDtlCDMSMedicalCondition = ObjDtLogic.GetDataset("View_AuditProjectDtlCDMSMedicalCondition", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " View_AuditSubjectDtlCDMSConsumption "

    Public Function View_AuditSubjectDtlCDMSConsumption(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_AuditSubjectDtlCDMSConsumption = View_AuditSubjectDtlCDMSConsumption(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_AuditSubjectDtlCDMSConsumption(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_AuditSubjectDtlCDMSConsumption = ObjDtLogic.GetDataset("View_AuditSubjectDtlCDMSConsumption", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " View_SubjectDtlCDMSConsumption "

    Public Function View_SubjectDtlCDMSConsumption(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SubjectDtlCDMSConsumption = View_SubjectDtlCDMSConsumption(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_SubjectDtlCDMSConsumption(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SubjectDtlCDMSConsumption = ObjDtLogic.GetDataset("View_SubjectDtlCDMSConsumption", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " getCDMSConsumption "

    Public Function getCDMSConsumption(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getCDMSConsumption = getCDMSConsumption(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getCDMSConsumption(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getCDMSConsumption = ObjDtLogic.GetDataset("CDMSConsumption", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " getProjectDtlCDMSConcoMedication "

    Public Function getProjectDtlCDMSConcoMedication(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getProjectDtlCDMSConcoMedication = getProjectDtlCDMSConcoMedication(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getProjectDtlCDMSConcoMedication(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getProjectDtlCDMSConcoMedication = ObjDtLogic.GetDataset("ProjectDtlCDMSConcoMedication", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " getProjectDtlCDMSMedicalCondition "

    Public Function getProjectDtlCDMSMedicalCondition(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getProjectDtlCDMSMedicalCondition = getProjectDtlCDMSMedicalCondition(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getProjectDtlCDMSMedicalCondition(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getProjectDtlCDMSMedicalCondition = ObjDtLogic.GetDataset("ProjectDtlCDMSMedicalCondition", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " getStudyDtlCDMS "

    Public Function getStudyDtlCDMS(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getStudyDtlCDMS = getStudyDtlCDMS(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getStudyDtlCDMS(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getStudyDtlCDMS = ObjDtLogic.GetDataset("StudyDtlCDMS", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " getStudyDtlCDMSHistory "

    Public Function getStudyDtlCDMSHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getStudyDtlCDMSHistory = getStudyDtlCDMSHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getStudyDtlCDMSHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getStudyDtlCDMSHistory = ObjDtLogic.GetDataset("StudyDtlCDMSHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " getStudyDtlCDMSConsumption "

    Public Function getStudyDtlCDMSConsumption(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getStudyDtlCDMSConsumption = getStudyDtlCDMSConsumption(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getStudyDtlCDMSConsumption(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getStudyDtlCDMSConsumption = ObjDtLogic.GetDataset("StudyDtlCDMSConsumption", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " View_StudyInformationDtl "

    Public Function View_StudyInformationDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_StudyInformationDtl = View_StudyInformationDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_StudyInformationDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_StudyInformationDtl = ObjDtLogic.GetDataset("View_StudyInformationDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " View_StudyDtlCDMSConsumption "

    Public Function View_StudyDtlCDMSConsumption(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_StudyDtlCDMSConsumption = View_StudyDtlCDMSConsumption(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_StudyDtlCDMSConsumption(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_StudyDtlCDMSConsumption = ObjDtLogic.GetDataset("View_StudyDtlCDMSConsumption", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " View_AuditStudyDtlCDMS "

    Public Function View_AuditStudyDtlCDMS(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_AuditStudyDtlCDMS = View_AuditStudyDtlCDMS(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_AuditStudyDtlCDMS(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_AuditStudyDtlCDMS = ObjDtLogic.GetDataset("View_AuditStudyDtlCDMS", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " View_AuditStudyDtlCDMSConsumption "

    Public Function View_AuditStudyDtlCDMSConsumption(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_AuditStudyDtlCDMSConsumption = View_AuditStudyDtlCDMSConsumption(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_AuditStudyDtlCDMSConsumption(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_AuditStudyDtlCDMSConsumption = ObjDtLogic.GetDataset("View_AuditStudyDtlCDMSConsumption", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "Proc_GetMathcedSubjects"
    Public Function Proc_GetMathcedSubjects(ByVal Parameters As String, _
                                            ByRef Sql_DataSet As Data.DataSet, _
                                            ByRef eStr_Retu As String) As Boolean
        Try
            Dim ObjDtlogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtlogic.ProcedureExecute("Proc_GetMathcedSubjects", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "View_GetSubjectDtlCDMSStatusLog"
    Public Function View_GetSubjectDtlCDMSStatusLog(ByVal wStr As String, _
                                                 ByRef Sql_DataSet As Data.DataSet, _
                                                 ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            If Not ObjDtLogic.GetResultSet(wStr, Sql_DataSet) Then
                Return False
            End If
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region " GetView_CDMSSubjectMaster "

    Public Function GetView_CDMSSubjectMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetView_CDMSSubjectMaster = GetView_CDMSSubjectMaster(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetView_CDMSSubjectMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetView_CDMSSubjectMaster = ObjDtLogic.GetDataset("View_CDMSSubjectMaster", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "Proc_ExecuteEditChecks"
    Public Function Proc_ExecuteEditChecks(ByVal Param As String, ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_ExecuteEditChecks", Param)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "Proc_ExecuteEditChecks_WithinPage"
    Public Function Proc_ExecuteEditChecks_WithinPage(ByVal Param As String, ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_ExecuteEditChecks_WithinPage", Param)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region


#Region " Proc_GetTabularDataForActivity_CTM "
    Public Function Proc_GetTabularDataForActivity_CTM(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetTabularDataForActivity_CTM", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '===============Added on 09-07-2013=============

#Region " getSubjectDtlCDMSStudyHistory "

    Public Function getSubjectDtlCDMSStudyHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getSubjectDtlCDMSStudyHistory = getSubjectDtlCDMSStudyHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getSubjectDtlCDMSStudyHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getSubjectDtlCDMSStudyHistory = ObjDtLogic.GetDataset("SubjectDtlCDMSStudyHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region '===============Added on 08-08-2013=============

#Region " View_SubjectDtlCDMSStudyHistory "

    Public Function getView_SubjectDtlCDMSStudyHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getView_SubjectDtlCDMSStudyHistory = getView_SubjectDtlCDMSStudyHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getView_SubjectDtlCDMSStudyHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getView_SubjectDtlCDMSStudyHistory = ObjDtLogic.GetDataset("View_SubjectDtlCDMSStudyHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " View_AuditSubjectDtlCDMSStudyHistory "

    Public Function getView_AuditSubjectDtlCDMSStudyHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getView_AuditSubjectDtlCDMSStudyHistory = getView_AuditSubjectDtlCDMSStudyHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getView_AuditSubjectDtlCDMSStudyHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getView_AuditSubjectDtlCDMSStudyHistory = ObjDtLogic.GetDataset("View_AuditSubjectDtlCDMSStudyHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "GetTimeZoneMaster"

    Public Function GetTimeZoneMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetTimeZoneMaster = GetTimeZoneMaster(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetTimeZoneMaster(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetTimeZoneMaster = ObjDtLogic.GetDataset("TimeZoneMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetMedexDependency"

    Public Function GetMedexDependency(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMedexDependency = GetMedexDependency(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetMedexDependency(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetMedexDependency = ObjDtLogic.GetDataset("MedExDependency", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetMedexDependency"

    Public Function GetviewMedexDependency(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetviewMedexDependency = GetviewMedexDependency(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetviewMedexDependency(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetviewMedexDependency = ObjDtLogic.GetDataset("View_MedexDependency", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region " View_CRFHdrDtlSubDtl_ForCRFPrint "
    Public Function View_CRFHdrDtlSubDtl_ForCRFPrint(ByVal WhereCondition As String, _
                                              ByVal Columns As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean


        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If WhereCondition = "" Then
                qStr = "Select  " & Columns & " from View_CRFHdrDtlSubDtl_Edit "
            Else
                qStr = "Select  " & Columns & " from View_CRFHdrDtlSubDtl_Edit " & _
                                    " where " + WhereCondition
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr, 0)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region "Proc_GetOperational_KPIs"
    Public Function Proc_GetOperational_KPIs(ByVal Parameters As String, _
        ByRef sql_DataSet As Data.DataSet, _
        ByRef estr_Retu As String) As Boolean

        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetOperational_KPIs", Parameters)
            Return True

        Catch ex As Exception
            estr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region ' ==== Added by Megha 

#Region "Proc_ActualAuditTrailTime"
    Public Function Proc_ActualAuditTrailTime(ByVal Parameters As String, _
                                            ByRef Sql_DataSet As Data.DataSet, _
                                            ByRef eStr_Retu As String) As Boolean
        Try
            Dim ObjDtlogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtlogic.ProcedureExecute("Proc_ActualAuditTrailTime", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region " PROC_GetLIMSProject "
    Public Function PROC_GetLIMSProject(ByVal FromDate_1 As String, _
                                        ByVal ToDate_1 As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = FromDate_1 + "##" + ToDate_1 + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("PROC_GetLIMSProject", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region '==For LIMS 

    '==============================================
    'Added By Vimal Ghoniya For Sequence Generation
    '==============================================

#Region " getBAChildProjects "

    Public Function getBAChildProjects(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getBAChildProjects = getBAChildProjects(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getBAChildProjects(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getBAChildProjects = ObjDtLogic.GetDataset("BAChildProjects", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " getBAProjectAnalyteDtl "

    Public Function getBAProjectAnalyteDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getBAProjectAnalyteDtl = getBAProjectAnalyteDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getBAProjectAnalyteDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getBAProjectAnalyteDtl = ObjDtLogic.GetDataset("BAProjectAnalyteDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " getViewBAProjectAnalyteDtl "

    Public Function getViewBAProjectAnalyteDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getViewBAProjectAnalyteDtl = getViewBAProjectAnalyteDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getViewBAProjectAnalyteDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getViewBAProjectAnalyteDtl = ObjDtLogic.GetDataset("View_BAProjectAnalyteDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " GetBAAnalyteSampleHdr"

    Public Function getBAAnalyteSampleHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getBAAnalyteSampleHdr = getBAAnalyteSampleHdr(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetBAAnalyteSampleHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBAAnalyteSampleHdr = ObjDtLogic.GetDataset("BAAnalyteSampleHdr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " GetBAAnalyteSampleDtl"

    Public Function getBAAnalyteSampleDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getBAAnalyteSampleDtl = getBAAnalyteSampleDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getBAAnalyteSampleDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getBAAnalyteSampleDtl = ObjDtLogic.GetDataset("BAAnalyteSampleDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region


#Region " getBAWorkSPaceNodeDetail"

    Public Function getBAWorkSPaceNodeDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getBAWorkSPaceNodeDetail = getBAWorkSPaceNodeDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getBAWorkSPaceNodeDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getBAWorkSPaceNodeDetail = ObjDtLogic.GetDataset("View_BAWorkSPaceNodeDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " Proc_CDMSSubjectDtlAdvanceQuery_COUNT "

    Public Function Proc_CDMSSubjectDtlAdvanceQuery_COUNT(ByVal Parameters As String, _
                                          ByRef Sql_DataSet As Data.DataSet, _
                                          ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_CDMSSubjectDtlAdvanceQuery_COUNT", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function



#End Region

#Region " Proc_CDMSSubjectDtlAdvanceQuery "

    Public Function Proc_CDMSSubjectDtlAdvanceQuery(ByVal Parameters As String, _
                                          ByRef Sql_DataSet As Data.DataSet, _
                                          ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_CDMSSubjectDtlAdvanceQuery", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function



#End Region

#Region " GetBaSampleReqDtl"

    Public Function GetBaSampleReqDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetBaSampleReqDtl = GetBaSampleReqDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetBaSampleReqDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBaSampleReqDtl = ObjDtLogic.GetDataset("BASampleReqDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " GetBaSampleReqHdr"

    Public Function GetBaSampleReqHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetBaSampleReqHdr = GetBaSampleReqHdr(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetBaSampleReqHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBaSampleReqHdr = ObjDtLogic.GetDataset("BASampleReqHdr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "View_BAAnalyteSampleHdrDtl"
    Public Function View_BAAnalyteSampleHdrDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_BAAnalyteSampleHdrDtl = View_BAAnalyteSampleHdrDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_BAAnalyteSampleHdrDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            'getBASampleStandardMstStudySample
            View_BAAnalyteSampleHdrDtl = ObjDtLogic.GetDataset("View_BAAnalyteSampleHdrDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "View_BASampleReqHdrDtl"

    Public Function View_BASampleReqHdrDtl(ByVal WhereCondition_1 As String, _
                                           ByVal DataRetrival_1 As DataRetrievalModeEnum, _
                                           ByRef Sql_DataSet As Data.DataSet, _
                                           ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try
            ObjDtLogic = New ClsDataLogic_New
            View_BASampleReqHdrDtl = View_BASampleReqHdrDtl(WhereCondition_1, DataRetrival_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function View_BASampleReqHdrDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid data Retrival Option"
            Exit Function
        End If
        Try
            View_BASampleReqHdrDtl = ObjDtLogic.GetDataset("View_BASampleReqHdrDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "GetMyProjectCompletionListParentOnly"

    Public Function GetMyProjectCompletionListParentOnly(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        '====Changed on 10-10-2011 by Mrunal Parekh
        Dim whereCondition As String = "vRequestId  + vProjectNo " + " Like '%"
        whereCondition += prefixText + "%'" + IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), "")
        whereCondition += "AND vWorkSpaceID  = ParentWorkspaceId "
        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_Myprojects", " * ", _
            whereCondition, ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            'items.Add("'" + dr.Item("vWorkspaceid").ToString + "#" + dr.Item("vWorkspaceDesc").ToString + _
            '    "#" + dr.Item("vProjectNo").ToString + "#" + _
            '    dr.Item("vClientName").ToString + "#" + dr.Item("vRequestId").ToString())

            'items.Add("'" + dr.Item("vWorkspaceid").ToString + "#" + dr.Item("vProjectNo").ToString + "#" + dr.Item("vRequestId").ToString() + "#" + dr.Item("ParentWorkspaceId").ToString.Trim())
            items.Add("'" + dr.Item("vWorkspaceid").ToString + "#" + dr.Item("vProjectNo").ToString + "#" + dr.Item("vRequestId").ToString())


        Next

        Return items.ToArray()
    End Function

#End Region

#Region "GetSampleSeparationDtl_Lot"
    Public Function GetSampleSeperationDtl_Lot(ByVal WhereCondition_1 As String, _
                                           ByVal DataRetrival_1 As DataRetrievalModeEnum, _
                                           ByRef Sql_DataSet As Data.DataSet, _
                                           ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try
            ObjDtLogic = New ClsDataLogic_New
            GetSampleSeperationDtl_Lot = GetSampleSeperationDtl_Lot(WhereCondition_1, DataRetrival_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function GetSampleSeperationDtl_Lot(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid data Retrival Option"
            Exit Function
        End If
        Try
            GetSampleSeperationDtl_Lot = ObjDtLogic.GetDataset("View_SampleSeparationDtl_Lot", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region " getBAInstrumentMst"

    Public Function getBAInstrumentMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getBAInstrumentMst = getBAInstrumentMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getBAInstrumentMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getBAInstrumentMst = ObjDtLogic.GetDataset("BAInstrumentMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " GetBAChildProjectsHistory"

    Public Function GetBAChildProjectsHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetBAChildProjectsHistory = GetBAChildProjectsHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetBAChildProjectsHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBAChildProjectsHistory = ObjDtLogic.GetDataset("View_BaChildProjectsHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " GetBAProjectAnalyteDtlHistory"

    Public Function GetBAProjectAnalyteDtlHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetBAProjectAnalyteDtlHistory = GetBAProjectAnalyteDtlHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetBAProjectAnalyteDtlHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBAProjectAnalyteDtlHistory = ObjDtLogic.GetDataset("View_BAProjectAnalyteDtlHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " GetBaSequenceScheduleDtl"

    Public Function GetBaSequenceScheduleDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetBaSequenceScheduleDtl = GetBaSequenceScheduleDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetBaSequenceScheduleDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBaSequenceScheduleDtl = ObjDtLogic.GetDataset("BaSequenceScheduleDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " GetBaSequenceScheduleHdr"

    Public Function GetBaSequenceScheduleHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetBaSequenceScheduleHdr = GetBaSequenceScheduleHdr(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetBaSequenceScheduleHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBaSequenceScheduleHdr = ObjDtLogic.GetDataset("BaSequenceScheduleHdr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "GetBaTemplateDtl"
    Public Function GetBaTemplateDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetBaTemplateDtl = GetBaTemplateDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetBaTemplateDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBaTemplateDtl = ObjDtLogic.GetDataset("BaTemplateDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "GetBaTemplateHdr"
    Public Function GetBaTemplateHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetBaTemplateHdr = GetBaTemplateHdr(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetBaTemplateHdr(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBaTemplateHdr = ObjDtLogic.GetDataset("BaTemplateHdr", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "Proc_SetProjectMatrix"
    Public Function Proc_SetProjectMatrix(ByVal Parameters As String, _
                                          ByRef Sql_DataSet As Data.DataSet, _
                                          ByRef eStr_Retu As String) As Boolean


        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_SetProjectMatrix", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "Proc_SubjectScreeningInfo"
    Public Function Proc_SubjectScreeningInfo(ByVal Parameters As String, _
                                          ByRef Sql_DataSet As Data.DataSet, _
                                          ByRef eStr_Retu As String) As Boolean
        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_ScreeningSubjectInfo", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region




#Region " Proc_ScreeningAnalyticRatio "

    Public Function Proc_ScreeningAnalyticRatio(ByVal Parameters As String, _
                                          ByRef Sql_DataSet As Data.DataSet, _
                                          ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_ScreeningAnalyticRatio", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function



#End Region


#Region " getBAInstrumentDtl"

    Public Function getBAInstrumentDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getBAInstrumentDtl = getBAInstrumentDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getBAInstrumentDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getBAInstrumentDtl = ObjDtLogic.GetDataset("BAInstrumentDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region


#Region " getViewBABatchExport "

    Public Function getViewBABatchExport(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getViewBABatchExport = getViewBABatchExport(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getViewBABatchExport(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getViewBABatchExport = ObjDtLogic.GetDataset("View_BABatchExport", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region


#Region " Proc_GetTotalDosedSubject "

    Public Function Proc_GetTotalDosedSubject(ByVal Parameters As String, _
                                          ByRef Sql_DataSet As Data.DataSet, _
                                          ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetTotalDosedSubject", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function



#End Region

#Region "Proc_Login"
    Public Function Proc_Login(ByVal Parameters As String, _
                                            ByRef Sql_DataSet As Data.DataSet, _
                                            ByRef eStr_Retu As String) As Boolean
        Try
            Dim ObjDtlogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtlogic.ProcedureExecute("Proc_Login", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region " GetBASequenceExportDtl "

    Public Function GetBASequenceExportDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetBASequenceExportDtl = GetBASequenceExportDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetBASequenceExportDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBASequenceExportDtl = ObjDtLogic.GetDataset("BASequenceExportDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "getViewBAChildProjects "

    Public Function getViewBAChildProjects(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getViewBAChildProjects = getViewBAChildProjects(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getViewBAChildProjects(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getViewBAChildProjects = ObjDtLogic.GetDataset("View_BAChildProjects", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "GetBAAnalyteSampleDtlHistory"

    Public Function GetBAAnalyteSampleDtlHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetBAAnalyteSampleDtlHistory = GetBAAnalyteSampleDtlHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetBAAnalyteSampleDtlHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBAAnalyteSampleDtlHistory = ObjDtLogic.GetDataset("View_BAAnalyteSampleDtlHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "GetBASetProjectMatrix"

    Public Function GetBASetProjectMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetBASetProjectMatrix = GetBASetProjectMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetBASetProjectMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBASetProjectMatrix = ObjDtLogic.GetDataset("BASetProjectMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "GetViewBASetProjectMatrix"

    Public Function GetViewBASetProjectMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewBASetProjectMatrix = GetViewBASetProjectMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetViewBASetProjectMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewBASetProjectMatrix = ObjDtLogic.GetDataset("View_BASetProjectMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " GetBARetriveQCSets "

    Public Function GetBARetriveQCSets(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetBARetriveQCSets = GetBARetriveQCSets(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetBARetriveQCSets(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBARetriveQCSets = ObjDtLogic.GetDataset("View_BARetriveQCSets", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " getViewStudySampleTimepoint "

    Public Function getViewStudySampleTimepoint(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getViewStudySampleTimepoint = getViewStudySampleTimepoint(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getViewStudySampleTimepoint(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getViewStudySampleTimepoint = ObjDtLogic.GetDataset("View_StudySampleTimepoint", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "GetPkSampleReviewDtl"
    Public Function GetPkSampleReviewDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetPkSampleReviewDtl = GetPkSampleReviewDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetPkSampleReviewDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetPkSampleReviewDtl = ObjDtLogic.GetDataset("PkSampleReviewDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region '===============Added on 07-Mar-2014=============

#Region "GetViewgetWorkspaceDetailForHdr "
    Public Function GetViewgetpksamplereviewdtl(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewgetpksamplereviewdtl = GetViewgetpksamplereviewdtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetViewgetpksamplereviewdtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewgetpksamplereviewdtl = ObjDtLogic.GetDataset("view_getpksamplereviewdtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " getViewBAExistsingSequenceDetail "

    Public Function getViewBAExistsingSequenceDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getViewBAExistsingSequenceDetail = getViewBAExistsingSequenceDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getViewBAExistsingSequenceDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getViewBAExistsingSequenceDetail = ObjDtLogic.GetDataset("View_BAExistsingSequenceDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "Proc_BASequenceExportDtl"

    Public Function Proc_BASequenceExportDtl(ByVal Parameters As String, _
                                          ByRef Sql_DataSet As Data.DataSet, _
                                          ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_BASequenceExportDtl", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function

#End Region

#Region "GetMyProjectCompletionListDependUser "
    Public Function GetMyProjectCompletionListDependUser(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMyProjectCompletionListDependUser = GetMyProjectCompletionListDependUser(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetMyProjectCompletionListDependUser(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetMyProjectCompletionListDependUser = ObjDtLogic.GetDataset("View_Myprojects", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region " getBAFileDetail"

    Public Function getBAFileDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getBAFileDetail = getBAFileDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getBAFileDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getBAFileDetail = ObjDtLogic.GetDataset("BAFileDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " GetBAFileDetailHistory"

    Public Function GetBAFileDetailHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetBAFileDetailHistory = GetBAFileDetailHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetBAFileDetailHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBAFileDetailHistory = ObjDtLogic.GetDataset("View_BAFileDetailHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " View_BASequenceConcentrationMatrix "

    Public Function View_BASequenceConcentrationMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_BASequenceConcentrationMatrix = View_BASequenceConcentrationMatrix(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_BASequenceConcentrationMatrix(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_BASequenceConcentrationMatrix = ObjDtLogic.GetDataset("View_BASequenceConcentrationMatrix", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "GetCentrifugationParameter"
    Public Function GetCentrifugationParameter(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetCentrifugationParameter = GetCentrifugationParameter(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetCentrifugationParameter(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetCentrifugationParameter = ObjDtLogic.GetDataset("ProjectParameterMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region  '===============Added on 30-Mar-2012 =============

#Region " View_BASequenceSamples "

    Public Function View_BASequenceSamples(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_BASequenceSamples = View_BASequenceSamples(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_BASequenceSamples(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_BASequenceSamples = ObjDtLogic.GetDataset("View_BASequenceSamples", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "getBASampleConcentrationFiles"
    Public Function getBASampleConcentrationFiles(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getBASampleConcentrationFiles = getBASampleConcentrationFiles(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getBASampleConcentrationFiles(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getBASampleConcentrationFiles = ObjDtLogic.GetDataset("BASampleConcentrationFiles", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "View_CRFSubDtlForCategory_OLD"

    Public Function View_CRFSubDtlForCategory_OLD(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_CRFSubDtlForCategory_OLD = View_CRFSubDtlForCategory_OLD(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_CRFSubDtlForCategory_OLD(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByVal ObjDtLogic As ClsDataLogic_New, _
                                        ByRef Sql_DtTbl As Data.DataTable, _
                                        ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_CRFSubDtlForCategory_OLD = ObjDtLogic.GetDataset("View_CRFSubDtlForCategory_OLD", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region " View_BAExportedSequenceDtl "

    Public Function View_BAExportedSequenceDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_BAExportedSequenceDtl = View_BAExportedSequenceDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_BAExportedSequenceDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_BAExportedSequenceDtl = ObjDtLogic.GetDataset("View_BAExportedSequenceDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " GetBARetriveCCSets "

    Public Function GetBARetriveCCSets(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetBARetriveCCSets = GetBARetriveCCSets(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetBARetriveCCSets(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetBARetriveCCSets = ObjDtLogic.GetDataset("View_BARetriveCCSets", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "GetSubjectCompletionList_NotRejected_OnlyID"
    'THIS WEB SERVICE IS FOR AUTOCOMPLETE EXTENDER FOR SUBJECT SEARCH BY ONLY WITH SUBJECT ID
    Public Function GetSubjectCompletionList_NotRejected_OnlyID(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "vSubjectId " + " Like '%" + prefixText + "%'"
        'added on 29-Jul-2009
        whereCondition += " And cRejectionFlag <> 'Y' and cStatusIndi <>'D'"
        'Vineet'
        If Not IsNothing(contextKey) AndAlso contextKey.Length > 0 Then
            'whereCondition += " AND vLocationCode Not In (" & contextKey.Trim() & ")"
            whereCondition += " AND vLocationCode='" & contextKey.Trim() & "'"
        End If

        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_SubjectMaster", " vSubjectID, vInitials ", whereCondition + " Order BY vSubjectId", ds, estr)


        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vSubjectId").ToString + "#" + dr.Item("vInitials").ToString)
            If items.Count > count Then
                Exit For
            End If
        Next


        Return items.ToArray()
    End Function
#End Region

#Region "View_MaxIndividualSampleOperationDtl"
    'Get Individual sample detail (freezer,operation,compartment) from sampleoperationdtl
    Public Function View_MaxIndividualSampleOperationDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_MaxIndividualSampleOperationDtl = View_MaxIndividualSampleOperationDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_MaxIndividualSampleOperationDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_MaxIndividualSampleOperationDtl = ObjDtLogic.GetDataset("View_MaxIndividualSampleOperationDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region  '===============Added on 01-May-2014 =============

#Region "view_IndividualSampleOperationDtl"
    'Get All sample detail (freezer,operation,compartment) using bag,lot,period
    Public Function view_IndividualSampleOperationDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_IndividualSampleOperationDtl = view_IndividualSampleOperationDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function view_IndividualSampleOperationDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            view_IndividualSampleOperationDtl = ObjDtLogic.GetDataset("view_IndividualSampleOperationDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region  '===============Added on 01-May-2014 =============

#Region "Get Activity For Multiple Projects" '
    Friend Function Proc_ActivityForMultipleProjects(ByVal WorkSpaceId_1 As String, _
                               ByVal iPeriod As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Try
            Dim Param As String = ""
            Dim ObjDtLogic As New ClsDataLogic_New
            Param = WorkSpaceId_1 + "##" + iPeriod.ToString()
            Sql_DataSet = ObjDtLogic.ProcedureExecute("proc_GetActivity_ForMultipleProjects", Param)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region " View_CRFHdrDtlSubDtl_Print"

    Public Function View_CRFHdrDtlSubDtl_Print(ByVal WhereCondition As String, _
                                              ByVal Columns As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean


        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If WhereCondition = "" Then
                qStr = "Select  " & Columns & " from View_CRFHdrDtlSubDtl_Print "
            Else
                qStr = "Select  " & Columns & " from View_CRFHdrDtlSubDtl_Print " & _
                                    " where " + WhereCondition
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr, 20000)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region "View_CRFSubDtlForCategory_LatestForm"

    Public Function View_CRFSubDtlForCategory_LatestForm(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_CRFSubDtlForCategory_LatestForm = View_CRFSubDtlForCategory_LatestForm(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_CRFSubDtlForCategory_LatestForm(ByVal WhereCondition_1 As String, _
                                        ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                        ByVal ObjDtLogic As ClsDataLogic_New, _
                                        ByRef Sql_DtTbl As Data.DataTable, _
                                        ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_CRFSubDtlForCategory_LatestForm = ObjDtLogic.GetDataset("View_CRFSubDtlForCategory_LatestNode", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

#Region " View_CCSampleRetrievalMstForDiscard "

    Public Function View_CCSampleRetrievalMstForDiscard(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_CCSampleRetrievalMstForDiscard = View_CCSampleRetrievalMstForDiscard(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_CCSampleRetrievalMstForDiscard(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_CCSampleRetrievalMstForDiscard = ObjDtLogic.GetDataset("View_CCSampleRetrievalMstForDiscard", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region "GetViewWorkspaceWorkflowUserDtl_ForDMS"
    Public Function GetViewWorkspaceWorkflowUserDtl_ForDMS(ByVal Wstr As String, _
                                                       ByRef Sql_DataSet As Data.DataSet, _
                                                       ByRef eStr_Retu As String) As Boolean

        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If Wstr = "" Then
                qStr = "select * from View_workspaceWorkflowUserDtl_ForEctd "
            Else
                qStr = "select * from View_workspaceWorkflowUserDtl_ForEctd " & _
                        "where " & Wstr
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region " View_SampleSeparationDtlForBarcode "

    Public Function View_SampleSeparationDtlForBarcode(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_SampleSeparationDtlForBarcode = View_SampleSeparationDtlForBarcode(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_SampleSeparationDtlForBarcode(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_SampleSeparationDtlForBarcode = ObjDtLogic.GetDataset("View_SampleSeparationDtlForBarcode", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region

#Region " View_GetBAFileDetailCount "

    Public Function View_GetBAFileDetailCount(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_GetBAFileDetailCount = View_GetBAFileDetailCount(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_GetBAFileDetailCount(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_GetBAFileDetailCount = ObjDtLogic.GetDataset("View_GetBAFileDetailCount", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

#End Region                             '===============Added on 20-May-2014 By : Parth Pandya =============

#Region "BAtest"
    Public Function BAtest(ByVal wStr As String, _
                                                 ByRef Sql_DataSet As Data.DataSet, _
                                                 ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            If Not ObjDtLogic.GetResultSet(wStr, Sql_DataSet) Then
                Return False
            End If
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region                       '===============Added on 20-May-2014 By : Parth Pandya =============

#Region "Proc_GetActivityReport"
    Public Function Proc_GetActivityReport(ByVal vWorkspaceList As String, _
        ByVal vActivityList As String, _
        ByVal iPeriod As String, _
        ByVal iUserId As Integer, _
        ByRef sql_DataSet As Data.DataSet, _
        ByRef estr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            qstr = "Proc_GetActivityReport '" + vWorkspaceList.ToString() + "','" + vActivityList.ToString() + "','" + iPeriod.ToString + "','" + iUserId.ToString + "',''"
            sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qstr)
            Return True
        Catch ex As Exception
            estr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region " View_CRFHdrDtlSubDtl_Review"

    Public Function View_CRFHdrDtlSubDtl_Review(ByVal WhereCondition As String, _
                                              ByVal Columns As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean


        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If WhereCondition = "" Then
                qStr = "Select  " & Columns & " from View_CRFHdrDtlSubDtl_Review "
            Else
                qStr = "Select  " & Columns & " from View_CRFHdrDtlSubDtl_Review " & _
                                    " where " + WhereCondition
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr, 20000)
            Return True

        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region "View_BagBatchMstForBarcode"
    Public Function View_BagBatchMstForBarcode(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_BagBatchMstForBarcode = View_BagBatchMstForBarcode(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_BagBatchMstForBarcode(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_BagBatchMstForBarcode = ObjDtLogic.GetDataset("View_BagBatchMstForBarcode", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region "Proc_SampleMedExRangeDtl_Positive"
    Public Function Proc_SampleMedExRangeDtl_Positive(ByVal nSampleIds As String, _
        ByRef sql_DataSet As Data.DataSet, _
        ByRef estr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            qstr = "Proc_SampleMedExRangeDtl_Positive '" + nSampleIds + "'"
            sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qstr, 18000)
            Return True
        Catch ex As Exception
            estr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "Proc_SampleMedExRangeDtl"
    Public Function Proc_SampleMedExRangeDtl(ByVal nSampleIds As String, _
        ByRef sql_DataSet As Data.DataSet, _
        ByRef estr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            qstr = "Proc_SampleMedExRangeDtl '" + nSampleIds + "'"
            sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qstr, 18000)
            Return True
        Catch ex As Exception
            estr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "Proc_GetActivityStatusCountRecords"
    Public Function Proc_GetActivityStatusCountRecords(ByVal vWorkSpaceId As String, _
                                           ByVal iPeriod As String, _
                                           ByVal cIsParentChecked As Char, _
                                           ByVal ProjectType As Integer, _
                                           ByVal cIsChild As Char, _
                                           ByRef sql_DataSet As Data.DataSet, _
                                           ByRef estr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            qstr = "Proc_GetActivityStatusCountRecords '" + vWorkSpaceId.ToString() + "','" + iPeriod.ToString() + "','" + cIsParentChecked.ToString + "','" + cIsChild.ToString() + "'," + ProjectType.ToString
            sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qstr, 20000)
            Return True
        Catch ex As Exception
            estr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "view_IndividualSampleOperationDtlForCPMA"
    Public Function view_IndividualSampleOperationDtlForCPMA(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_IndividualSampleOperationDtlForCPMA = view_IndividualSampleOperationDtlForCPMA(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function view_IndividualSampleOperationDtlForCPMA(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            view_IndividualSampleOperationDtlForCPMA = ObjDtLogic.GetDataset("view_IndividualSampleOperationDtlForCPMA", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region "view_MaxcentrifugationParameterMst"
    Public Function view_MaxcentrifugationParameterMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_MaxcentrifugationParameterMst = view_MaxcentrifugationParameterMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function view_MaxcentrifugationParameterMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            view_MaxcentrifugationParameterMst = ObjDtLogic.GetDataset("view_MaxcentrifugationParameterMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region "view_centrifugationParameterMst"
    Public Function view_centrifugationParameterMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_centrifugationParameterMst = view_centrifugationParameterMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function view_centrifugationParameterMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            view_centrifugationParameterMst = ObjDtLogic.GetDataset("view_centrifugationParameterMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region "View_BagBatchMst_AuditTrail"
    Public Function View_BagBatchMst_AuditTrail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_BagBatchMst_AuditTrail = View_BagBatchMst_AuditTrail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_BagBatchMst_AuditTrail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_BagBatchMst_AuditTrail = ObjDtLogic.GetDataset("View_BagBatchMst_AuditTrail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region "View_GetAuditTrailStudySample"
    Public Function View_GetAuditTrailStudySample(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_GetAuditTrailStudySample = View_GetAuditTrailStudySample(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_GetAuditTrailStudySample(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_GetAuditTrailStudySample = ObjDtLogic.GetDataset("View_GetAuditTrailStudySample", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region "View_GetAuditTrailBaSample"
    Public Function View_GetAuditTrailBaSample(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_GetAuditTrailBaSample = View_GetAuditTrailBaSample(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_GetAuditTrailBaSample(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_GetAuditTrailBaSample = ObjDtLogic.GetDataset("View_GetAuditTrailBaSample", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region "Proc_GetDeletedCRFRecords"
    Public Function Proc_GetDeletedCRFRecords(ByVal vWorkSpaceId As String, _
                                           ByVal iPeriod As String, _
                                           ByVal vActivityId As String, _
                                           ByVal vSubjectId As String, _
                                           ByVal vDeletedBy As String, _
                                           ByVal cIsParentChecked As Char, _
                                           ByVal cIsChild As Char, _
                                           ByRef sql_DataSet As Data.DataSet, _
                                           ByRef estr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            qstr = "Proc_GetDeletedCRFRecords '" + vWorkSpaceId.ToString() + "','" + iPeriod.ToString() + "','" + vActivityId.ToString + "','" + vSubjectId.ToString() + "','" + vDeletedBy.ToString() + "','" + cIsParentChecked.ToString + "','" + cIsChild.ToString() + "'"
            sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qstr, 20000)
            Return True
        Catch ex As Exception
            estr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region " GetDatesMonthsAndYears "
    Public Function GetDatesMonthsAndYears(ByVal str As String, _
                                    ByRef Sql_DS As Data.DataSet, _
                                    ByRef eStr_Retu As String) As Boolean

        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Dim str_Query As String

            If Not ObjDtLogic.GetResultSet("EXEC " + str, Sql_DS) Then
                eStr_Retu = "Error while getting records from: " & str
                Return False
            End If

            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "View_BagBatchMstForOperation"
    Public Function View_BagBatchMstForOperation(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_BagBatchMstForOperation = View_BagBatchMstForOperation(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_BagBatchMstForOperation(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_BagBatchMstForOperation = ObjDtLogic.GetDataset("View_BagBatchMstForOperation", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region "View_DataEntryControl_Lock"
    Public Function View_DataEntryControl_Lock(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_DataEntryControl_Lock = View_DataEntryControl_Lock(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_DataEntryControl_Lock(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_DataEntryControl_Lock = ObjDtLogic.GetDataset("View_DataEntryControl_Lock", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region
#Region "Proc_GetDataForScheduling"
    Public Function Proc_GetDataForScheduling(ByVal vWorkSpaceId As String, _
                                              ByVal iPeriod As String, _
                                              ByVal vActivityId As String, _
                                           ByVal iNodeId As String, _
                                           ByRef sql_DataSet As Data.DataSet, _
                                           ByRef estr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            qstr = "Proc_GetDataForScheduling '" + vWorkSpaceId.ToString() + "','" + iPeriod.ToString() + "','" + vActivityId.ToString() + "','" + iNodeId.ToString + "'"
            sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qstr, 20000)
            Return True
        Catch ex As Exception
            estr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region
#Region "Proc_GetDataForScheduling_Deviation"
    Public Function Proc_GetDataForScheduling_Deviation(ByVal vWorkSpaceId As String, _
                                              ByVal iPeriod As String, _
                                              ByVal iNodeId As String, _
                                              ByRef sql_DataSet As Data.DataSet, _
                                              ByRef UserId As Integer, _
                                           ByRef estr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            qstr = "Proc_GetDataForScheduling_Deviation '" + vWorkSpaceId.ToString() + "','" + iPeriod.ToString() + "','" + iNodeId.ToString + "'," + UserId.ToString
            sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qstr, 20000)
            Return True
        Catch ex As Exception
            estr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "Proc_ReleaseLabReport"
    Public Function Proc_ReleaseLabReport(ByVal nSampleIds As String, ByVal UserId As String, _
        ByRef sql_DataSet As Data.DataSet, _
        ByRef estr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            qstr = "Proc_ReleaseLabReport '" + nSampleIds + "'," + UserId
            sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qstr, 18000)
            Return True
        Catch ex As Exception
            estr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "proc_GetProjectList"
    Public Function proc_GetProjectList(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("proc_GetProjectList", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

    'Adde By Maitri on 19-Jan-2015
#Region " View_CRFActivityStatus_New "
    Public Function View_CRFActivityStatus_New(ByVal WhereCondition As String, _
                                              ByVal Columns As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean


        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If WhereCondition = "" Then
                qStr = "Select  " & Columns & " from View_CRFActivityStatus "
            Else
                qStr = "Select  " & Columns & " from View_CRFActivityStatus " & _
                                    " where " + WhereCondition
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region


    ' ==== Added by Rahul Rupareliya

#Region "View_LabMachineTestCode"
    Public Function View_LabMachineTestCode(ByVal WhereCondition As String, _
                                               ByVal Columns As String, _
                                               ByRef Sql_DataSet As Data.DataSet, _
                                               ByRef eStr_Retu As String) As Boolean


        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If WhereCondition = "" Then
                qStr = "Select  " & Columns & " from View_LabMachineTestCode "
            Else
                qStr = "Select  " & Columns & " from View_LabMachineTestCode " & _
                                    " where " + WhereCondition
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region

#Region "Proc_IndividualSampleOperationDtl"
    Public Function Proc_IndividualSampleOperationDtl(ByVal vWorkSpaceId As String, _
                                                    ByVal nBAchildProjectsNo As String, _
                                                    ByVal strPeriod As String, _
                                                    ByVal cIsBagOrBatch As String, _
                                                    ByVal strsamplestandardno As String, _
                                                    ByVal strmysubjectno As String, _
                                                    ByVal strSampleoperationdtlno As String, _
                                                    ByVal strdsenton As String, _
                                                    ByVal cstatusindi As String, _
                                                    ByVal strpagesize As String, _
                                                    ByVal strpagenumber As String, _
                                                    ByRef Sql_DataSet As Data.DataSet, _
                                                    ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            qstr = "Proc_IndividualSampleOperationDtl '" + vWorkSpaceId.ToString() + "','" + nBAchildProjectsNo.ToString() + "','" + strPeriod.ToString() + "','" + cIsBagOrBatch.ToString() + "','" + strsamplestandardno.ToString() + "','" + strmysubjectno.ToString() + "'," + strSampleoperationdtlno.ToString() + "," + strdsenton.ToString() + ",'" + cstatusindi.ToString() + "'," + strpagesize.ToString() + "," + strpagenumber.ToString()
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qstr, 20000)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "Proc_SendSamples"
    Public Function Proc_SendSamples(ByVal vWorkSpaceId As String, _
                                             ByVal vLocationCode As String, _
                                              ByVal vProjectTypeCode As String, _
                                                ByVal SelectRecord As String, _
                                                ByVal strpagesize As String, _
                                                ByVal strpagenumber As String, _
                                                ByVal Fromdate As String, _
                                                ByVal ToDate As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            qstr = "Proc_SendSamples '" + vWorkSpaceId.ToString() + "','" + vLocationCode.ToString() + "','" + vProjectTypeCode.ToString() + "'," + SelectRecord.ToString() + "," + strpagesize.ToString() + "," + strpagenumber.ToString() + ",'" + Fromdate.ToString() + "','" + ToDate.ToString() + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qstr, 20000)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

    ''Added by Prayag Patel For audittrail report in roleoperation
#Region "Proc_OperationRollAudit"
    Public Function Proc_OperationRollAudit(ByVal ddlUsertype As String, _
                                             ByVal OperationType As String, _
                                              ByVal userid As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            qstr = "Proc_OperationRollAudit '" + ddlUsertype.ToString() + "','" + OperationType.ToString() + "','" + userid.ToString() + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qstr, 20000)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region
    ''Added by Aaditya

#Region "View_DosingDetailForBarCodePrint "
    Public Function View_DosingDetailForBarCodePrint(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_DosingDetailForBarCodePrint = View_DosingDetailForBarCodePrint(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function View_DosingDetailForBarCodePrint(ByVal WhereCondition_1 As String, _
                                   ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                   ByVal ObjDtLogic As ClsDataLogic_New, _
                                   ByRef Sql_DtTbl As Data.DataTable, _
                                   ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_DosingDetailForBarCodePrint = ObjDtLogic.GetDataset("View_DosingDetailBarCodePrint", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

    '===============================================
    'Added By Nipun Khant For Reprint-Delete audittrail cr

#Region "ReprintDeleteSampleAudit"
    Public Function ReprintDeleteSampleAudit(ByVal WhereCondition_1 As String, _
                                   ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                           ByRef sql_DataSet As Data.DataSet, _
                                           ByRef estr_Retu As String) As Boolean

        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try
            ObjDtLogic = New ClsDataLogic_New
            ReprintDeleteSampleAudit = ReprintDeleteSampleAudit(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, estr_Retu)

            sql_DataSet = New Data.DataSet
            sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            estr_Retu = ex.Message
        End Try

    End Function

    Friend Function ReprintDeleteSampleAudit(ByVal WhereCondition_1 As String, _
                                  ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                  ByVal ObjDtLogic As ClsDataLogic_New, _
                                  ByRef Sql_DtTbl As Data.DataTable, _
                                  ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            ReprintDeleteSampleAudit = ObjDtLogic.GetDataset("ReprintDeleteSampleAudit", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function WorkSpaceDeviationReport(ByVal WhereCondition_1 As String, _
                                  ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                  ByVal ObjDtLogic As ClsDataLogic_New, _
                                  ByRef Sql_DtTbl As Data.DataTable, _
                                  ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            WorkSpaceDeviationReport = ObjDtLogic.GetDataset("WorkSpaceDeviationReport", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function


#End Region

#Region "proc_ReprintdeleteSampleAuditFORLabSample"

    Public Function proc_ReprintdeleteSampleAuditFORLabSample(ByVal vWorkSpaceId As String, _
                                              ByVal cFilter As String, _
                                              ByVal iperiod As Integer, _
                                                ByVal inodeid As Integer, _
                                                ByVal dfromcreationdatetime As String, _
                                                ByVal dtocreationdatetime As String, _
                                                ByVal cstatus As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            Dim Param As String = ""
            Param = vWorkSpaceId.ToString() + "##" + cFilter.ToString() + "##" + iperiod.ToString() + "##" + inodeid.ToString() + "##" + dfromcreationdatetime.ToString() + "##" + dtocreationdatetime.ToString() + "##" + cstatus.ToString()

            Sql_DataSet = ObjDtLogic.ProcedureExecute("proc_ReprintdeleteSampleAuditFORLabSample", Param)

            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function

#End Region

#Region "proc_ReprintdeleteSampleAuditFORPK"

    Public Function proc_ReprintdeleteSampleAuditFORPK(ByVal vWorkSpaceId As String, _
                                              ByVal cFilter As String, _
                                              ByVal iperiod As Integer, _
                                                ByVal inodeid As Integer, _
                                                ByVal dfromcreationdatetime As String, _
                                                ByVal dtocreationdatetime As String, _
                                                ByVal cstatus As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            Dim Param As String = ""
            Param = vWorkSpaceId.ToString() + "##" + cFilter.ToString() + "##" + iperiod.ToString() + "##" + inodeid.ToString() + "##" + dfromcreationdatetime.ToString() + "##" + dtocreationdatetime.ToString() + "##" + cstatus.ToString()

            Sql_DataSet = ObjDtLogic.ProcedureExecute("proc_ReprintdeleteSampleAuditFORPK", Param)

            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function

#End Region

#Region "proc_PksampleDetail"

    Public Function proc_PksampleDetail(ByVal vWorkSpaceId As String, _
                                              ByVal cFilter As String, _
                                              ByVal iperiod As Integer, _
                                                ByVal inodeid As Integer, _
                                                ByVal dfromcreationdatetime As String, _
                                                ByVal dtocreationdatetime As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            Dim Param As String = ""
            Param = vWorkSpaceId.ToString() + "##" + cFilter.ToString() + "##" + iperiod.ToString() + "##" + inodeid.ToString() + "##" + dfromcreationdatetime.ToString() + "##" + dtocreationdatetime.ToString()

            Sql_DataSet = ObjDtLogic.ProcedureExecute("proc_PksampleDetail", Param)

            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function

#End Region

    '===============================================

#Region "Proc_AuditTrailofActiveInactiveUser"

    Public Function Proc_AuditTrailofActiveInactiveUser(ByVal UserProfileName As String, _
                                                        ByVal UserName As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            Dim Param As String = ""
            Param = UserProfileName.ToString() + "##" + UserName.ToString()

            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_AuditTrailofActiveInactiveUser", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function

#End Region

    '===============================================
    'Added By Nipun Khant For Dynamic review cr

#Region "Proc_GetLegends"

    Public Function Proc_GetLegends(ByVal vWorkSpaceId As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            qstr = "Proc_GetLegends '" + vWorkSpaceId.ToString() + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qstr, 20000)

            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function

#End Region

#Region "Proc_GetProjectReviewerLevel"

    Public Function Proc_GetProjectReviewerLevel(ByVal vWorkSpaceId As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            qstr = "Proc_GetProjectReviewerLevel '" + vWorkSpaceId.ToString() + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qstr, 20000)

            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function

#End Region

    '===============================================

#Region "Proc_GetWorkSpceDeviationReport"

    Public Function Proc_GetWorkSpceDeviationReport(ByVal vWorkSpaceId As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            qstr = "Proc_WorkSpaceDeviationReprot '" + vWorkSpaceId.ToString() + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qstr, 20000)

            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function

#End Region


#Region "Proc_GetAuditTrailWorkSpaeceDeviationReport"

    Public Function Proc_GetAuditTrailWorkSpaeceDeviationReport(ByVal WorkSpaceDeviationId As String, _
                                                                ByVal WorkSpaceId As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            Dim Param As String = ""
            Param = WorkSpaceDeviationId.ToString() + "##" + WorkSpaceId.ToString()

            Sql_DataSet = ObjDtLogic.ProcedureExecute("PROC_AuditTrailWorkSpaceDeviationReport", Param)

            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function

#End Region


#Region "Proc_WorkSpaceDeviationReportForIndependentReport"

    Public Function Proc_WorkSpaceDeviationReportForIndependentReport(ByVal WorkSpaceDeviationId As String, _
                                                                      ByVal SubjectId As String, _
                                                                       ByVal WorkSpaceDeviationReportId As Integer, _
                                                                      ByVal RefActivityId As Integer, _
                                                                      ByVal ChildActivityId As Integer, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            Dim Param As String = ""
            Param = WorkSpaceDeviationId.ToString() + "##" + SubjectId + "##" + WorkSpaceDeviationReportId.ToString() + "##" + RefActivityId.ToString() + "##" + ChildActivityId.ToString()

            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_WorkSpaceDeviationReportForIndependentReport", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function

#End Region

#Region "Proc_WorkSpaceDeviationReportForParentVisit"

    Public Function Proc_WorkSpaceDeviationReportForParentVisit(ByVal WorkSpaceDeviationId As String, _
                                                                ByVal SubejctID As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            Dim Param As String = ""
            Param = WorkSpaceDeviationId.ToString() + "##" + SubejctID
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_WorkSpaceDeviationReportForParentVisit", Param)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function

#End Region

    '===============================================
    'Added By Nipun Khant For Sample inventory cr
#Region "Proc_GetLotInformation"

    Public Function Proc_GetLotInformation(ByVal vWorkSpaceId As String, _
                                           ByVal cIsBagOrBatch As String, _
                                            ByVal nbachildprojectno As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            qstr = "Proc_GetLotInformation '" + vWorkSpaceId.ToString() + "','" + cIsBagOrBatch + "','" + nbachildprojectno + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qstr, 20000)

            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
    '===============================================

#End Region


#Region "Proc_GetDeviationPeriod"

    Public Function Proc_GetDeviationPeriod(ByVal WorkSpaceID As String, _
                                                ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            Dim Param As String = ""
            Param = WorkSpaceID.ToString()
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetDeviationPeriod", Param)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function

#End Region

    '============Added By Nipun Khant 13-Oct-2015===================================
#Region "Proc_SampleRetrievalReport"
    Public Function Proc_SampleRetrievalReport(ByVal FromDate As String, _
                                                             ByVal ToDate As String, _
                                                             ByRef Sql_DataSet As Data.DataSet, _
                                                             ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = FromDate + "##" + ToDate
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_SampleRetrievalReport", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region
    '===============================================


#Region "Proc_SampleRetrievalReport"
    Public Function Proc_GetEditCheckActivity(ByVal WorkSpaceId As String, _
                                                             ByVal EditCheckType As String, _
                                                             ByRef Sql_DataSet As Data.DataSet, _
                                                             ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = WorkSpaceId + "##" + EditCheckType
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_EditCheckActivity", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

    '===============================================
    'Added By Nipun Khant For Sample inventory cr
#Region "PROC_getBagLabel"

    Public Function PROC_getBagLabel(ByVal vWorkSpaceId As String, _
                                           ByVal cIsBagOrBatch As String, _
                                           ByVal iLotStandardNO As String, _
                                            ByVal nbachildprojectno As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            qstr = "PROC_getBagLabel '" + vWorkSpaceId.ToString() + "','" + cIsBagOrBatch.ToString() + "','" + iLotStandardNO.ToString() + "','" + nbachildprojectno.ToString() + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qstr, 20000)

            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
    '===============================================

#End Region

    ''Added by Aaditya for Review Lab Report
#Region "Proc_GetLabReportData"
    Public Function Proc_GetLabReportData(ByVal nSampleIds As String, _
        ByRef sql_DataSet As Data.DataSet, _
        ByRef estr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            qstr = "Proc_GetLabReportData '" + nSampleIds + "'"
            sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qstr, 18000)
            Return True
        Catch ex As Exception
            estr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

    'Added By Nipun Khant For dynamic review
#Region "GetProjectReviewerMst"
    Public Function GetProjectReviewerMst(ByVal WhereCondition_1 As String, _
                                   ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                           ByRef sql_DataSet As Data.DataSet, _
                                           ByRef estr_Retu As String) As Boolean

        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try
            ObjDtLogic = New ClsDataLogic_New
            GetProjectReviewerMst = GetProjectReviewerMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, estr_Retu)

            sql_DataSet = New Data.DataSet
            sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            estr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetProjectReviewerMst(ByVal WhereCondition_1 As String, _
                                  ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                  ByVal ObjDtLogic As ClsDataLogic_New, _
                                  ByRef Sql_DtTbl As Data.DataTable, _
                                  ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetProjectReviewerMst = ObjDtLogic.GetDataset("ProjectReviewerMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region

    '===============================================
    'Added By Nipun Khant For Dynamic review cr

#Region "Proc_GetAuditProjectReviewerLevel"

    Public Function Proc_GetAuditProjectReviewerLevel(ByVal vWorkSpaceId As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            qstr = "Proc_GetAuditProjectReviewerLevel '" + vWorkSpaceId.ToString() + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qstr, 20000)

            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function

#End Region

    '===============================================

    ''=============Added on 23-Dec-2015 by Aaditya=============
#Region "view_CCSampleRetrievalMstAuditDtl"
    Public Function view_CCSampleRetrievalMstAuditDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            view_CCSampleRetrievalMstAuditDtl = view_CCSampleRetrievalMstAuditDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function view_CCSampleRetrievalMstAuditDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            view_CCSampleRetrievalMstAuditDtl = ObjDtLogic.GetDataset("view_CCSampleRetrievalMstAuditDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region "Proc_InActiveAccount"
    Public Function Proc_InActiveAccount(ByVal Parameters As String, _
                                            ByRef Sql_DataSet As Data.DataSet, _
                                            ByRef eStr_Retu As String) As Boolean
        Try
            Dim ObjDtlogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtlogic.ProcedureExecute("Proc_InActiveAccount", Parameters)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "PROC_GETPROFILELIST"

    Public Function PROC_GETPROFILELIST(ByVal nscopeno As String, _
                                            ByVal iworkflowstageid As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            qstr = "PROC_GETPROFILELIST '" + nscopeno.ToString() + "','" + iworkflowstageid.ToString + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qstr, 20000)

            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function

#End Region


#Region " get_Viewclientmst "
    Public Function get_Viewclientmst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            get_Viewclientmst = get_Viewclientmst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function get_Viewclientmst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            get_Viewclientmst = ObjDtLogic.GetDataset("View_clientmst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region " get_ViewclientmstHistory "
    Public Function GetView_clientmstHistory(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetView_clientmstHistory = GetView_clientmstHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetView_clientmstHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetView_clientmstHistory = ObjDtLogic.GetDataset("View_ClientMstHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region "GetServiceDetail"
    Public Function GetServiceDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetServiceDetail = GetServiceDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetServiceDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        Try
            GetServiceDetail = ObjDtLogic.GetDataset("ServiceMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region " get_ViewServicemstHistory "
    Public Function GetView_ServiceMstHistory(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetView_ServiceMstHistory = GetView_ServiceMstHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetView_ServiceMstHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetView_ServiceMstHistory = ObjDtLogic.GetDataset("View_ServiceMstHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

#Region "GetviewProjectSubTypeMst"
    Public Function GetviewProjectSubTypeMst(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetviewProjectSubTypeMst = GetviewProjectSubTypeMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetviewProjectSubTypeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetviewProjectSubTypeMst = ObjDtLogic.GetDataset("view_ProjectSubTypeMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "Proc_GetProjectReport"
    Public Function Proc_GetProjectReport(ByVal Parameters As String, _
                                        ByRef Sql_DataSet As Data.DataSet, _
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetProjectReport", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "Proc_GetActivityForDasgBoard"

    Public Function Proc_GetActivityForDashBoard(ByVal nMilestone As String, _
                                            ByVal vDeptCode As String, _
                                              ByRef Sql_DataSet As Data.DataSet, _
                                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qstr As String = ""

        Try
            qstr = "Proc_GetActivityForDashBoard '" + nMilestone.ToString() + "','" + vDeptCode.ToString() + "'"
            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qstr, 20000)

            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function

#End Region

#Region "SMSGateWayDetail "
    Public Function GetSMSGateWayDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSMSGateWayDetail = GetSMSGateWayDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSMSGateWayDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSMSGateWayDetail = ObjDtLogic.GetDataset("SMSGateWayDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region


#Region "Proc_GetVisitSchedulerreport"
    Public Function Proc_GetVisitSchedulerreport(ByVal WorkSpaceId_1 As String, _
                                                   ByVal iPeriod As String, _
                                                        ByVal vSubjectId As String, _
                                                        ByVal iParentActivityNodeId As String, _
                                                        ByVal iActivityNodeId As String, _
                                                        ByVal cSubjectWiseFlag As String, _
                                                        ByVal ProjectType As Integer, _
                                                        ByVal cDataStatus As String, _
                                                         ByVal iWorkFlowStageId As String, _
                                                        ByRef Sql_DataSet As Data.DataSet, _
                                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = WorkSpaceId_1 + "##" + iPeriod.ToString() + "##" + vSubjectId + "##" + iParentActivityNodeId + "##" + iActivityNodeId + "##" + cSubjectWiseFlag + "##" + ProjectType.ToString() + "##" + cDataStatus.ToString() + "##" + iWorkFlowStageId.ToString() + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetVisitSchedulerreport", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "Proc_getVisitSchedulerReport_ForCT"
    Public Function Proc_getVisitSchedulerReport_ForCT(ByVal WorkSpaceId_1 As String, _
                                              ByVal iPeriod As String, _
                                                         ByVal vSubjectId As String, _
                                                         ByVal iParentActivityNodeId As String, _
                                                         ByVal iActivityNodeId As String, _
                                                         ByVal cSubjectWiseFlag As String, _
                                                         ByVal cDataStatus As String, _
                                                         ByVal iWorkFlowStageId As String, _
                                                         ByRef Sql_DataSet As Data.DataSet, _
                                                         ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = WorkSpaceId_1 + "##" + iPeriod.ToString() + "##" + vSubjectId + "##" + iParentActivityNodeId + "##" + iActivityNodeId + "##" + cSubjectWiseFlag.ToString() + "##" + cDataStatus.ToString() + "##" + iWorkFlowStageId.ToString() + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_getVisitSchedulerReport_ForCT", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "Proc_getVisitSchedulerReport_ForCTDataExport"
    Public Function Proc_getVisitSchedulerReport_ForCTDataExport(ByVal WorkSpaceId_1 As String, _
                                              ByVal iPeriod As String, _
                                                         ByVal vSubjectId As String, _
                                                         ByVal iParentActivityNodeId As String, _
                                                         ByVal iActivityNodeId As String, _
                                                         ByVal cSubjectWiseFlag As String, _
                                                         ByVal cDataStatus As String, _
                                                         ByVal iWorkFlowStageId As String, _
                                                         ByRef Sql_DataSet As Data.DataSet, _
                                                         ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = WorkSpaceId_1 + "##" + iPeriod.ToString() + "##" + vSubjectId + "##" + iParentActivityNodeId + "##" + iActivityNodeId + "##" + cSubjectWiseFlag.ToString() + "##" + cDataStatus.ToString() + "##" + iWorkFlowStageId.ToString() + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_getVisitSchedulerReport_ForCTDataExport", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "MachineSampleWorkListDtl"


    Public Function GetMachineSampleWorkListDtl(ByVal WhereCondition_1 As String, _
                             ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                             ByRef Sql_DataSet As Data.DataSet, _
                             ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetMachineSampleWorkListDtl = GetMachineSampleWorkListDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetMachineSampleWorkListDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetMachineSampleWorkListDtl = ObjDtLogic.GetDataset("MachineSampleWorkListDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GetSubjectIrisDetail"
    Public Function GetSubjectIrisDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSubjectIrisDetail = GetSubjectIrisDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetSubjectIrisDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSubjectIrisDetail = ObjDtLogic.GetDataset("View_GetSubjectIrisDetail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region  'Added by Simki Jayswal

#Region "Proc_ValidationForCopyEditChecks"
    Public Function Proc_ValidationForCopyEditChecks(ByVal FromWorkSpaceId As String, _
                                                         ByVal ToWorkSpaceId As String, _
                                                        ByRef Sql_DataSet As Data.DataSet, _
                                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = FromWorkSpaceId + "##" + ToWorkSpaceId + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_ValidationForCopyEditChecks", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "GetSubjectIrisVerificationDetail"
    Public Function GetSubjectIrisVerificationDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSubjectIrisVerificationDetail = GetSubjectIrisVerificationDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetSubjectIrisVerificationDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetSubjectIrisVerificationDetail = ObjDtLogic.GetDataset("SubjectIrisVerificationHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region " getSubjectpopulationMst "
    Public Function getSubjectPopulationMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            getSubjectPopulationMst = getSubjectPopulationMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function getSubjectPopulationMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            getSubjectPopulationMst = ObjDtLogic.GetDataset("SubjectPopulationMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region 'add by vineet'

#Region " get_ViewSubjectPopulationMstHistory "
    Public Function GetView_SubjectPopulationMstHistory(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetView_SubjectPopulationMstHistory = GetView_SubjectPopulationMstHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetView_SubjectPopulationMstHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetView_SubjectPopulationMstHistory = ObjDtLogic.GetDataset("View_SubjectPopulationMstHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

#End Region  'add by vineet'

#Region "GetSubjectContactDetail"
    Public Function GetSubjectContactDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSubjectContactDetail = GetSubjectContactDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSubjectContactDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetSubjectContactDetail = ObjDtLogic.GetDataset("SubjectContactDetails", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region          'add by vineet'


    ''Added By Vivek PAtel For DashBoard

#Region " Proc_WorkSpaceProjectTotalSubjectCount "
    Public Function Proc_WorkSpaceProjectTotalSubjectCount(ByVal vWorkSpaceId As String, ByRef Sql_DataSet As Data.DataSet, ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_WorkSpaceProjectTotalSubjectCount", vWorkSpaceId)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try

    End Function
#End Region

#Region " Proc_SiteWiseSubjectInformation "
    Public Function Proc_SiteWiseSubjectInformation(ByVal vWorkSpaceId As String, ByRef Sql_DataSet As Data.DataSet, ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_SiteWiseSubjectInformation", vWorkSpaceId)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try

    End Function
#End Region

#Region " Proc_WorkSpaceAllSubjectCount "
    Public Function Proc_WorkSpaceAllSubjectCount(ByVal vWorkSpaceId As String, ByRef Sql_DataSet As Data.DataSet, ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_WorkSpaceAllSubjectCount", vWorkSpaceId)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try

    End Function
#End Region

#Region " Proc_WorkSpaceDeActivatedSubjectCount "
    Public Function Proc_WorkSpaceDeActivatedSubjectCount(ByVal vWorkSpaceId As String, ByRef Sql_DataSet As Data.DataSet, ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_WorkSpaceDeActivatedSubjectCount", vWorkSpaceId)

            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try

    End Function
#End Region

#Region " Proc_StudyDetail "
    Public Function Proc_StudyDetail(ByVal vWorkSpaceId As String, ByRef Sql_DataSet As Data.DataSet, ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_StudyDetail", vWorkSpaceId)

            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try

    End Function
#End Region

#Region " Proc_SiteInformation "
    Public Function Proc_SiteInformation(ByVal vWorkSpaceId As String, ByRef Sql_DataSet As Data.DataSet, ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_SiteInformation", vWorkSpaceId)

            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try

    End Function
#End Region

#Region " Proc_SubSiteInformation "
    Public Function Proc_SubSiteInformation(ByVal vWorkSpaceId As String, ByRef Sql_DataSet As Data.DataSet, ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_SubSiteInformation", vWorkSpaceId)

            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try

    End Function
#End Region

#Region " Proc_GetParentProjectList "
    Public Function Proc_GetParentProjectList(ByRef Sql_DataSet As Data.DataSet, ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetParentProjectList")

            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try

    End Function
#End Region

#Region " Proc_ProjectStudyDetail "
    Public Function Proc_ProjectStudyDetail(ByVal vWorkSpaceId As String, ByRef Sql_DataSet As Data.DataSet, ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_ProjectStudyDetail", vWorkSpaceId)

            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try

    End Function
#End Region

#Region " Proc_GetWorkSpaceProjectAESAE "
    Public Function Proc_GetWorkSpaceProjectAESAE(ByVal vWorkSpaceId As String, ByRef Sql_DataSet As Data.DataSet, ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetWorkSpaceProjectAESAE", vWorkSpaceId)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try

    End Function

#End Region

#Region " Proc_GetWorkSpaceProjectTrainingGuidline "
    Public Function Proc_GetWorkSpaceProjectTrainingGuidline(ByVal vProjectNo As String, ByRef Sql_DataSet As Data.DataSet, ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetWorkSpaceProjectTrainingGuidline", vProjectNo)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try

    End Function

#End Region

#Region " Proc_UserGroupMstAuditTrail "
    Public Function Proc_GetAuditTrail(ByVal vUserGroupCode As String, ByRef Sql_DataSet As Data.DataSet, ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetAuditTrail", vUserGroupCode)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try

    End Function

#End Region

#Region "Get Panel Display Data"
    Public Function GetPanelDisplayData(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetPanelDisplayData = GetPanelDisplayData(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetPanelDisplayData(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        Try
            GetPanelDisplayData = ObjDtLogic.GetDataset("View_PanelDisplay", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Public Function GetPanelDisplay(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetPanelDisplay = GetPanelDisplay(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetPanelDisplay(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        Try
            GetPanelDisplay = ObjDtLogic.GetDataset("PanelDisplay", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Public Function GetView_PanelDisplayHistory(ByVal WhereCondition_1 As String, _
                             ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                             ByRef Sql_DataSet As Data.DataSet, _
                             ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetView_PanelDisplayHistory = GetView_PanelDisplayHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetView_PanelDisplayHistory(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean

        Try
            GetView_PanelDisplayHistory = ObjDtLogic.GetDataset("View_PanelDisplayHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function


#End Region

#Region "Proc_UserMst"
    Public Function Proc_UserMst(ByVal UserName As String, _
                                                         ByVal UserTypeCode As String, _
                                                         ByVal OperationType As String, _
                                                        ByRef Sql_DataSet As Data.DataSet, _
                                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = UserName + "##" + UserTypeCode + "##" + OperationType + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_UserMst", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "GetSubjectCompletionList_NotRejectedDataMerg"
    Public Function GetSubjectCompletionList_NotRejectedDataMerg(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "FullName + vSubjectId " + " Like '%" + prefixText + "%'"
        whereCondition += " And cRejectionFlag <> 'Y' and cSubjectType <> 'C' and cStatusIndi <>'D'"
        whereCondition += " And CAST(GETDATE() As DATE) not Between Cast(isnull(dBlockfrom,'') As Date) And Cast(isnull(dBlockto,'') As Date)"
        If Not IsNothing(contextKey) AndAlso contextKey.Length > 0 Then
            whereCondition += " AND vLocationCode Not In (" & contextKey.Trim() & ")"
        End If

        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_SubjectMaster", " vSubjectID, FullName  ", whereCondition + " Order BY FullName", ds, estr)


        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vSubjectId").ToString + "#" + dr.Item("FullName").ToString)
            If items.Count > count Then
                Exit For
            End If
        Next

        Return items.ToArray()
    End Function
#End Region

#Region "Proc_ScreeningSameDayValidation"
    Public Function Proc_ScreeningSameDayValidation(ByVal vSubjectId As String, ByVal dScreenDate As String, ByRef Sql_DataSet As Data.DataSet, ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = vSubjectId + "##" + dScreenDate + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_ScreeningSameDayValidation", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "Proc_ScreeningVersionStatus"
    Public Function Proc_ScreeningVersionStatus(ByVal dScreenDate As String, ByVal vSubjectId As String, ByRef Sql_DataSet As Data.DataSet, ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = dScreenDate + "##" + vSubjectId + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_ScreeningVersionStatus", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "Proc_ScreeningVersionStatus"
    Public Function Proc_SCREENINGTEMPLATEHDRDTL(ByVal vSubjectId As String, ByVal dScreenDate As String, ByVal vMedExGroupCode As String, ByVal vUserTypeCode As String, ByRef Sql_DataSet As Data.DataSet, ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = vSubjectId + "##" + dScreenDate + "##" + vMedExGroupCode + "##" + vUserTypeCode + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_SCREENINGTEMPLATEHDRDTL", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "GetDocumentPrinterDtl "
    Public Function GetDocumentPrinterDtl(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetDocumentPrinterDtl = GetDocumentPrinterDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function GetDocumentPrinterDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetDocumentPrinterDtl = ObjDtLogic.GetDataset("DocumentPrinterDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "View_GetDocumentPrinterDtl "
    Public Function View_GetDocumentPrinterDtl(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_GetDocumentPrinterDtl = View_GetDocumentPrinterDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_GetDocumentPrinterDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_GetDocumentPrinterDtl = ObjDtLogic.GetDataset("View_GetDocumentPrinterDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "View_GetPrinterAuditTrail"
    Public Function View_GetPrinterAuditTrail(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByRef Sql_DataSet As Data.DataSet, _
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_GetPrinterAuditTrail = View_GetPrinterAuditTrail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_GetPrinterAuditTrail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_GetPrinterAuditTrail = ObjDtLogic.GetDataset("View_GetPrinterAuditTrail", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region

#Region "GetSubjectCompletionList_NotRejected_BlockPeriodDataMerg"
    Public Function GetSubjectCompletionList_NotRejected_BlockPeriodDataMerg(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "FullName + vSubjectId " + " Like '%" + prefixText + "%'"
        'added on 29-Jul-2009
        whereCondition += " And cRejectionFlag <> 'Y' and cSubjectType <> 'C' and cStatusIndi <>'D'"
        whereCondition += " And CAST(GETDATE() As DATE) not Between Cast(isnull(dBlockfrom,'') As Date) And Cast(isnull(dBlockto,'') As Date)" '' added new

        If Not IsNothing(contextKey) AndAlso contextKey.Length > 0 Then
            whereCondition += " AND vLocationCode Not In (" & contextKey.Trim() & ")"
        End If

        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_SubjectMaster", " vSubjectID, FullName  ", whereCondition + " Order BY FullName", ds, estr)


        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vSubjectId").ToString + "#" + dr.Item("FullName").ToString)
            If items.Count > count Then
                Exit For
            End If
        Next


        Return items.ToArray()
    End Function
#End Region

#Region "GetSubjectCompletionList_NotRejected_OnlyID_BlockPeriodDataMerg"
    Public Function GetSubjectCompletionList_NotRejected_OnlyID_BlockPeriodDataMerg(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "vSubjectId " + " Like '%" + prefixText + "%'"
        'added on 29-Jul-2009
        whereCondition += " And cRejectionFlag <> 'Y' and cSubjectType <> 'C' and cStatusIndi <>'D'"

        If Not IsNothing(contextKey) AndAlso contextKey.Length > 0 Then
            whereCondition += " AND vLocationCode Not In (" & contextKey.Trim() & ")"
        End If

        whereCondition += " And CAST(GETDATE() As DATE) not Between Cast(isnull(dBlockfrom,'') As Date) And Cast(isnull(dBlockto,'') As Date)" '' added new

        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_SubjectMaster", " vSubjectID, vInitials ", whereCondition + " Order BY vSubjectId", ds, estr)


        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vSubjectId").ToString + "#" + dr.Item("vInitials").ToString)
            If items.Count > count Then
                Exit For
            End If
        Next


        Return items.ToArray()
    End Function

#End Region

#Region "GetSubjectCompletionList_NotRejected_OnlyIDDataMerg"
    Public Function GetSubjectCompletionList_NotRejected_OnlyIDDataMerg(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        Dim whereCondition As String = "vSubjectId " + " Like '%" + prefixText + "%'"
        'added on 29-Jul-2009
        whereCondition += " And cRejectionFlag <> 'Y' and cSubjectType <> 'C' and cStatusIndi <>'D'"
        whereCondition += " And CAST(GETDATE() As DATE) not Between Cast(isnull(dBlockfrom,'') As Date) And Cast(isnull(dBlockto,'') As Date)" '' added new
        If Not IsNothing(contextKey) AndAlso contextKey.Length > 0 Then
            whereCondition += " AND vLocationCode Not In (" & contextKey.Trim() & ")"
        End If

        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_SubjectMaster", " vSubjectID, vInitials ", whereCondition + " Order BY vSubjectId", ds, estr)


        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vSubjectId").ToString + "#" + dr.Item("vInitials").ToString)
            If items.Count > count Then
                Exit For
            End If
        Next
        Return items.ToArray()
    End Function
#End Region

#Region "GETNoticeMst "
    Public Function GetNoticeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetNoticeMst = GetNoticeMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetNoticeMst(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetNoticeMst = ObjDtLogic.GetDataset("noticemst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "View_GetNoticeMst"
    Public Function get_ViewNoticeMst(ByVal WhereCondition_1 As String, _
                             ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                             ByRef Sql_DataSet As Data.DataSet, _
                             ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            get_ViewNoticeMst = get_ViewNoticeMst(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function

    Friend Function get_ViewNoticeMst(ByVal WhereCondition_1 As String, _
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                              ByVal ObjDtLogic As ClsDataLogic_New, _
                              ByRef Sql_DtTbl As Data.DataTable, _
                              ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            get_ViewNoticeMst = ObjDtLogic.GetDataset("View_NoticeMst", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region

#Region "Proc_GetNotice"
    Public Function Proc_GetNotice(ByVal dFromDate As String,
                                              ByVal dEndDate As String,
                                                         ByVal vUserTypeCode As String,
                                                         ByVal iUserId As String,
                                                         ByRef Sql_DataSet As Data.DataSet,
                                                         ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = dFromDate + "##" + dEndDate + "##" + vUserTypeCode + "##" + iUserId + "##"
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetNotice", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "Proc_DCFTrackingReport"
    Public Function Proc_DCFTrackingReport(ByVal vWorkSpaceId As String, vType As String, ByRef Sql_DataSet As Data.DataSet, ByRef eStr_Retu As String) As Boolean
        Try
            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = String.Empty
            Param = vWorkSpaceId + "##" + vType
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_DCFTrackingReport", Param)
            Return True
        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region " getWorkSpaceUserNodeDetail "
    Public Function GetViewWorkSpaceUserNodeDetail(ByVal WhereCondition As String, _
                                                     ByRef Sql_DataSet As Data.DataSet, _
                                                     ByRef eStr_Retu As String) As Boolean


        Dim ObjDtLogic As New ClsDataLogic_New
        Dim qStr As String = ""

        Try
            If WhereCondition = "" Then
                qStr = "Select * from View_WorkSpaceUserNodeDetail "
            Else
                qStr = "Select * from View_WorkSpaceUserNodeDetail " & _
                                    " where " + WhereCondition
            End If

            Sql_DataSet = ObjDtLogic.ExecuteQuery_DataSet(qStr)
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
#End Region 'Added By Vivek Patel

#Region "GetSDTMCoreDtl"
    Public Function GetSDTMCoreDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSDTMCoreDtl = GetSDTMCoreDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSDTMCoreDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetSDTMCoreDtl = ObjDtLogic.GetDataset("SDTM_CoreDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "GETSDTMRoleDtl"
    Public Function GetSDTMRoleDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetSDTMRoleDtl = GetSDTMRoleDtl(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetSDTMRoleDtl(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetSDTMRoleDtl = ObjDtLogic.GetDataset("SDTM_RoleDtl", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "View_GetScreeningDetailsForECG "
    Public Function View_GetScreeningDetailsForECG(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_GetScreeningDetailsForECG = View_GetScreeningDetailsForECG(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_GetScreeningDetailsForECG(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_GetScreeningDetailsForECG = ObjDtLogic.GetDataset("View_GetScreeningDetailsForECG", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region 'Added By Vivek Patel

#Region "Proc_GetMedExMst"
    Public Function Proc_GetMedExMst(ByVal Parameters As String, _
                                         ByRef Sql_DataSet As Data.DataSet, _
                                         ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetMedExMst", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region


#Region "Proc_GetActivityOperationMatrix"
    Public Function Proc_GetActivityOperationMatrix(ByVal Parameters As String, _
                                         ByRef Sql_DataSet As Data.DataSet, _
                                         ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetActivityOperationMatrix", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

    'THIS IS WEB SERVICE FOR AUTOCOMPLETE EXTENDER For Get Menu Name As Per User Rights
    Public Function GetOperationName(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()

        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()

        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing

        Dim whereCondition As String = "MenuText " + " Like '%"
        whereCondition += prefixText + "%'" + IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), "")

        whereCondition += "AND cOperationType = 'BW' AND ISNULL(menuurl,'') <> ''"

        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_Menu", " * ", whereCondition, ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("MenuURL").ToString + "#" + dr.Item("MenuText").ToString)
        Next

        Return items.ToArray()
    End Function


#Region "View_GetScreeningDetailsForReviewedECG "
    Public Function View_GetScreeningDetailsForReviewedECG(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            View_GetScreeningDetailsForReviewedECG = View_GetScreeningDetailsForReviewedECG(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function View_GetScreeningDetailsForReviewedECG(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            View_GetScreeningDetailsForReviewedECG = ObjDtLogic.GetDataset("View_GetScreeningDetailsForReviewedECG", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
#End Region 'Added By Vivek Patel


#Region " GetViewUserWiseProfile "
    Public Function GetViewUserWiseProfile(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByRef Sql_DataSet As Data.DataSet, _
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetViewUserWiseProfile = GetViewUserWiseProfile(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetViewUserWiseProfile(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetViewUserWiseProfile = ObjDtLogic.GetDataset("View_UserWiseProfile", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region 'Added By Rinkal Makwana For Di-Soft

#Region " Proc_SiteWiseSubjectInformationForDashboard "
    Public Function Proc_SiteWiseSubjectInformationForDashboard(ByVal Parameters As String, _
                                         ByRef Sql_DataSet As Data.DataSet, _
                                         ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_SiteWiseSubjectInformationForDashboard", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region 'Added By Rinkal Makwana For Di-Soft Dashboard

#Region " GetProjectDetail "
    Public Function GetProjectDetail(ByVal WhereCondition_1 As String, _
                                 ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                                 ByRef Sql_DataSet As Data.DataSet, _
                                 ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetProjectDetail = GetProjectDetail(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetProjectDetail(ByVal WhereCondition_1 As String, _
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum, _
                               ByVal ObjDtLogic As ClsDataLogic_New, _
                               ByRef Sql_DtTbl As Data.DataTable, _
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetProjectDetail = ObjDtLogic.GetDataset("View_MyProjectsForSetProject", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function
#End Region 'Added By Rinkal Makwana For Di-Soft Dashboard

#Region "GetEmailSetupMaster"

    Public Function GetEmailSetupMaster(ByVal WhereCondition_1 As String,
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum,
                               ByRef Sql_DataSet As Data.DataSet,
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetEmailSetupMaster = GetEmailSetupMaster(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetEmailSetupMaster(ByVal WhereCondition_1 As String,
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum,
                               ByVal ObjDtLogic As ClsDataLogic_New,
                               ByRef Sql_DtTbl As Data.DataTable,
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetEmailSetupMaster = ObjDtLogic.GetDataset("EmailSetup", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region 'Added by Shyam Kamdar for EmailSetup

#Region "GetEmailSetupDetal"

    Public Function GetEmailSetupDeatil(ByVal WhereCondition_1 As String,
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum,
                               ByRef Sql_DataSet As Data.DataSet,
                               ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As New ClsDataLogic_New
        Dim Tbl_1 As New Data.DataTable

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetEmailSetupDeatil = GetEmailSetupDeatil(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetEmailSetupDeatil(ByVal WhereCondition_1 As String,
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum,
                               ByVal ObjDtLogic As ClsDataLogic_New,
                               ByRef Sql_DtTbl As Data.DataTable,
                               ByRef eStr_Retu As String) As Boolean
        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetEmailSetupDeatil = ObjDtLogic.GetDataset("View_EmailSetup", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)


        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region 'Added by Shyam Kamdar for EmailSetup

    Public Function GetChildProjectCompletionList(ByVal prefixText As String, ByVal count As Integer, ByVal contextKey As String) As String()
        Dim items As System.Collections.Generic.List(Of String) = New System.Collections.Generic.List(Of String)()
        If count = 0 Then
            count = 10
        End If

        Dim ds As New DataSet()
        Dim estr As String = ""
        Dim result As Boolean = False
        Dim dr As DataRow = Nothing
        'Dim whereCondition As String = "cWorkspaceType = 'C' AND vRequestId  + vProjectNo " + " Like '%"
        'Comment by Hiral Muliya(13-01-2021)(Remove vRequestId)

        Dim whereCondition As String = "cWorkspaceType = 'C' AND  vProjectNo " + " Like '%"
        whereCondition += prefixText + "%'" + IIf(contextKey.Trim() <> "", " AND " & contextKey.Trim(), "")

        Dim objHlp As New WS_HelpDbTable

        result = objHlp.GetFieldsOfTable("View_Myprojects", " * ",
            whereCondition, ds, estr)

        For index As Integer = 0 To ds.Tables(0).Rows.Count - 1
            dr = ds.Tables(0).Rows(index)
            items.Add("'" + dr.Item("vWorkspaceid").ToString + "#" + dr.Item("vProjectNo").ToString()) '+ "#") + dr.Item("vRequestId").ToString())
            'Comment by hiral Muliya(13-01-2021)(Remove vRequestId)
        Next
        Return items.ToArray()
    End Function
    Public Function Update_ImgTransmittalHdr(ByVal Parameters As String,
                                        ByRef Sql_DataSet As Data.DataSet,
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Update_ImgTransmittalHdr ", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function

#Region " GetOTPInfoDetails "
    Public Function GetOTPInfoDetails(ByVal WhereCondition_1 As String,
        ByVal DataRetrieval_1 As DataRetrievalModeEnum,
        ByRef Sql_DataSet As Data.DataSet,
        ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetOTPInfoDetails = GetOTPInfoDetails(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function GetOTPInfoDetails(ByVal WhereCondition_1 As String,
        ByVal DataRetrieval_1 As DataRetrievalModeEnum,
        ByVal ObjDtLogic As ClsDataLogic_New,
        ByRef Sql_DtTbl As Data.DataTable,
        ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetOTPInfoDetails = ObjDtLogic.GetDataset("OTPInfo", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region "Proc_OTPInfo"
    Public Function Proc_OTPInfo(ByVal UserName As String,
                                                        ByRef Sql_DataSet As Data.DataSet,
                                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Dim Param As String = ""
            Param = UserName
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Proc_GetOTPInfo", Param)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region " Proc_EmailSetupMailId "
    Public Function Proc_EmailSetupMailId(ByVal Parameters As String,
                                        ByRef Sql_DataSet As Data.DataSet,
                                        ByRef eStr_Retu As String) As Boolean
        Try

            Dim ObjDtLogic As New ClsDataLogic_New
            Sql_DataSet = ObjDtLogic.ProcedureExecute("Get_EmailSetupMailId", Parameters)
            Return True

        Catch ex As Exception
            eStr_Retu = ex.Message
            Return False
        End Try
    End Function
#End Region

#Region "Get EXE Msg Info"
    Public Function GetExMsgInfoDetails(ByVal WhereCondition_1 As String,
           ByVal DataRetrieval_1 As DataRetrievalModeEnum,
           ByRef Sql_DataSet As Data.DataSet,
           ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing
        Try
            ObjDtLogic = New ClsDataLogic_New
            GetExMsgInfoDetails = GetExMsgInfoDetails(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function

    Friend Function GetExMsgInfoDetails(ByVal WhereCondition_1 As String,
        ByVal DataRetrieval_1 As DataRetrievalModeEnum,
        ByVal ObjDtLogic As ClsDataLogic_New,
        ByRef Sql_DtTbl As Data.DataTable,
        ByRef eStr_Retu As String) As Boolean

        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If
        Try
            GetExMsgInfoDetails = ObjDtLogic.GetDataset("ExMsgInfo", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try
    End Function
#End Region

#Region " get_ViewEmailSetupHistory "
    Public Function GetView_EmailSetupHistory(ByVal WhereCondition_1 As String,
                              ByVal DataRetrieval_1 As DataRetrievalModeEnum,
                              ByRef Sql_DataSet As Data.DataSet,
                              ByRef eStr_Retu As String) As Boolean
        Dim ObjDtLogic As ClsDataLogic_New = Nothing
        Dim Tbl_1 As Data.DataTable = Nothing

        Try

            ObjDtLogic = New ClsDataLogic_New
            GetView_EmailSetupHistory = GetView_EmailSetupHistory(WhereCondition_1, DataRetrieval_1, ObjDtLogic, Tbl_1, eStr_Retu)

            Sql_DataSet = New Data.DataSet
            Sql_DataSet.Tables.Add(Tbl_1)

        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try

    End Function
    Friend Function GetView_EmailSetupHistory(ByVal WhereCondition_1 As String,
                               ByVal DataRetrieval_1 As DataRetrievalModeEnum,
                               ByVal ObjDtLogic As ClsDataLogic_New,
                               ByRef Sql_DtTbl As Data.DataTable,
                               ByRef eStr_Retu As String) As Boolean


        If DataRetrieval_1 = DataRetrievalModeEnum.DatatTable_Query Then
            eStr_Retu = "Invalid Data Retrieval Option"
            Exit Function
        End If

        Try
            GetView_EmailSetupHistory = ObjDtLogic.GetDataset("View_EmailSetupHistory", "", WhereCondition_1, DataRetrieval_1, Sql_DtTbl)
        Catch ex As Exception
            eStr_Retu = ex.Message
        End Try


    End Function

#End Region

End Class

